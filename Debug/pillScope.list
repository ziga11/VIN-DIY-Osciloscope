
pillScope.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009198  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000a86c  08009328  08009328  00019328  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013b94  08013b94  00030088  2**0
                  CONTENTS
  4 .ARM          00000008  08013b94  08013b94  00023b94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013b9c  08013b9c  00030088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013b9c  08013b9c  00023b9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08013ba0  08013ba0  00023ba0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08013ba4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030088  2**0
                  CONTENTS
 10 .bss          000005fc  20000088  20000088  00030088  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000684  20000684  00030088  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030088  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000300b8  2**0
                  CONTENTS, READONLY
 14 .debug_info   000144ad  00000000  00000000  000300fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003128  00000000  00000000  000445a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001238  00000000  00000000  000476d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000e27  00000000  00000000  00048908  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00025215  00000000  00000000  0004972f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00016b7a  00000000  00000000  0006e944  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e1645  00000000  00000000  000854be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000056c4  00000000  00000000  00166b04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004c  00000000  00000000  0016c1c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000088 	.word	0x20000088
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009310 	.word	0x08009310

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000008c 	.word	0x2000008c
 80001cc:	08009310 	.word	0x08009310

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2iz>:
 8000a1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a24:	d215      	bcs.n	8000a52 <__aeabi_d2iz+0x36>
 8000a26:	d511      	bpl.n	8000a4c <__aeabi_d2iz+0x30>
 8000a28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a30:	d912      	bls.n	8000a58 <__aeabi_d2iz+0x3c>
 8000a32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a3e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a42:	fa23 f002 	lsr.w	r0, r3, r2
 8000a46:	bf18      	it	ne
 8000a48:	4240      	negne	r0, r0
 8000a4a:	4770      	bx	lr
 8000a4c:	f04f 0000 	mov.w	r0, #0
 8000a50:	4770      	bx	lr
 8000a52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a56:	d105      	bne.n	8000a64 <__aeabi_d2iz+0x48>
 8000a58:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a5c:	bf08      	it	eq
 8000a5e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a62:	4770      	bx	lr
 8000a64:	f04f 0000 	mov.w	r0, #0
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop

08000a6c <__aeabi_d2f>:
 8000a6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a70:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a74:	bf24      	itt	cs
 8000a76:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a7a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a7e:	d90d      	bls.n	8000a9c <__aeabi_d2f+0x30>
 8000a80:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a84:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a88:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a8c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a90:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a94:	bf08      	it	eq
 8000a96:	f020 0001 	biceq.w	r0, r0, #1
 8000a9a:	4770      	bx	lr
 8000a9c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000aa0:	d121      	bne.n	8000ae6 <__aeabi_d2f+0x7a>
 8000aa2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000aa6:	bfbc      	itt	lt
 8000aa8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000aac:	4770      	bxlt	lr
 8000aae:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ab2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ab6:	f1c2 0218 	rsb	r2, r2, #24
 8000aba:	f1c2 0c20 	rsb	ip, r2, #32
 8000abe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ac2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ac6:	bf18      	it	ne
 8000ac8:	f040 0001 	orrne.w	r0, r0, #1
 8000acc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ad0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ad4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ad8:	ea40 000c 	orr.w	r0, r0, ip
 8000adc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ae0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ae4:	e7cc      	b.n	8000a80 <__aeabi_d2f+0x14>
 8000ae6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aea:	d107      	bne.n	8000afc <__aeabi_d2f+0x90>
 8000aec:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000af0:	bf1e      	ittt	ne
 8000af2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000af6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000afa:	4770      	bxne	lr
 8000afc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b00:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b04:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop

08000b0c <__aeabi_uldivmod>:
 8000b0c:	b953      	cbnz	r3, 8000b24 <__aeabi_uldivmod+0x18>
 8000b0e:	b94a      	cbnz	r2, 8000b24 <__aeabi_uldivmod+0x18>
 8000b10:	2900      	cmp	r1, #0
 8000b12:	bf08      	it	eq
 8000b14:	2800      	cmpeq	r0, #0
 8000b16:	bf1c      	itt	ne
 8000b18:	f04f 31ff 	movne.w	r1, #4294967295
 8000b1c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b20:	f000 b970 	b.w	8000e04 <__aeabi_idiv0>
 8000b24:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b28:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b2c:	f000 f806 	bl	8000b3c <__udivmoddi4>
 8000b30:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b38:	b004      	add	sp, #16
 8000b3a:	4770      	bx	lr

08000b3c <__udivmoddi4>:
 8000b3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b40:	9e08      	ldr	r6, [sp, #32]
 8000b42:	460d      	mov	r5, r1
 8000b44:	4604      	mov	r4, r0
 8000b46:	460f      	mov	r7, r1
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d14a      	bne.n	8000be2 <__udivmoddi4+0xa6>
 8000b4c:	428a      	cmp	r2, r1
 8000b4e:	4694      	mov	ip, r2
 8000b50:	d965      	bls.n	8000c1e <__udivmoddi4+0xe2>
 8000b52:	fab2 f382 	clz	r3, r2
 8000b56:	b143      	cbz	r3, 8000b6a <__udivmoddi4+0x2e>
 8000b58:	fa02 fc03 	lsl.w	ip, r2, r3
 8000b5c:	f1c3 0220 	rsb	r2, r3, #32
 8000b60:	409f      	lsls	r7, r3
 8000b62:	fa20 f202 	lsr.w	r2, r0, r2
 8000b66:	4317      	orrs	r7, r2
 8000b68:	409c      	lsls	r4, r3
 8000b6a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000b6e:	fa1f f58c 	uxth.w	r5, ip
 8000b72:	fbb7 f1fe 	udiv	r1, r7, lr
 8000b76:	0c22      	lsrs	r2, r4, #16
 8000b78:	fb0e 7711 	mls	r7, lr, r1, r7
 8000b7c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000b80:	fb01 f005 	mul.w	r0, r1, r5
 8000b84:	4290      	cmp	r0, r2
 8000b86:	d90a      	bls.n	8000b9e <__udivmoddi4+0x62>
 8000b88:	eb1c 0202 	adds.w	r2, ip, r2
 8000b8c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000b90:	f080 811c 	bcs.w	8000dcc <__udivmoddi4+0x290>
 8000b94:	4290      	cmp	r0, r2
 8000b96:	f240 8119 	bls.w	8000dcc <__udivmoddi4+0x290>
 8000b9a:	3902      	subs	r1, #2
 8000b9c:	4462      	add	r2, ip
 8000b9e:	1a12      	subs	r2, r2, r0
 8000ba0:	b2a4      	uxth	r4, r4
 8000ba2:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ba6:	fb0e 2210 	mls	r2, lr, r0, r2
 8000baa:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000bae:	fb00 f505 	mul.w	r5, r0, r5
 8000bb2:	42a5      	cmp	r5, r4
 8000bb4:	d90a      	bls.n	8000bcc <__udivmoddi4+0x90>
 8000bb6:	eb1c 0404 	adds.w	r4, ip, r4
 8000bba:	f100 32ff 	add.w	r2, r0, #4294967295
 8000bbe:	f080 8107 	bcs.w	8000dd0 <__udivmoddi4+0x294>
 8000bc2:	42a5      	cmp	r5, r4
 8000bc4:	f240 8104 	bls.w	8000dd0 <__udivmoddi4+0x294>
 8000bc8:	4464      	add	r4, ip
 8000bca:	3802      	subs	r0, #2
 8000bcc:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000bd0:	1b64      	subs	r4, r4, r5
 8000bd2:	2100      	movs	r1, #0
 8000bd4:	b11e      	cbz	r6, 8000bde <__udivmoddi4+0xa2>
 8000bd6:	40dc      	lsrs	r4, r3
 8000bd8:	2300      	movs	r3, #0
 8000bda:	e9c6 4300 	strd	r4, r3, [r6]
 8000bde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000be2:	428b      	cmp	r3, r1
 8000be4:	d908      	bls.n	8000bf8 <__udivmoddi4+0xbc>
 8000be6:	2e00      	cmp	r6, #0
 8000be8:	f000 80ed 	beq.w	8000dc6 <__udivmoddi4+0x28a>
 8000bec:	2100      	movs	r1, #0
 8000bee:	e9c6 0500 	strd	r0, r5, [r6]
 8000bf2:	4608      	mov	r0, r1
 8000bf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bf8:	fab3 f183 	clz	r1, r3
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	d149      	bne.n	8000c94 <__udivmoddi4+0x158>
 8000c00:	42ab      	cmp	r3, r5
 8000c02:	d302      	bcc.n	8000c0a <__udivmoddi4+0xce>
 8000c04:	4282      	cmp	r2, r0
 8000c06:	f200 80f8 	bhi.w	8000dfa <__udivmoddi4+0x2be>
 8000c0a:	1a84      	subs	r4, r0, r2
 8000c0c:	eb65 0203 	sbc.w	r2, r5, r3
 8000c10:	2001      	movs	r0, #1
 8000c12:	4617      	mov	r7, r2
 8000c14:	2e00      	cmp	r6, #0
 8000c16:	d0e2      	beq.n	8000bde <__udivmoddi4+0xa2>
 8000c18:	e9c6 4700 	strd	r4, r7, [r6]
 8000c1c:	e7df      	b.n	8000bde <__udivmoddi4+0xa2>
 8000c1e:	b902      	cbnz	r2, 8000c22 <__udivmoddi4+0xe6>
 8000c20:	deff      	udf	#255	; 0xff
 8000c22:	fab2 f382 	clz	r3, r2
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	f040 8090 	bne.w	8000d4c <__udivmoddi4+0x210>
 8000c2c:	1a8a      	subs	r2, r1, r2
 8000c2e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c32:	fa1f fe8c 	uxth.w	lr, ip
 8000c36:	2101      	movs	r1, #1
 8000c38:	fbb2 f5f7 	udiv	r5, r2, r7
 8000c3c:	fb07 2015 	mls	r0, r7, r5, r2
 8000c40:	0c22      	lsrs	r2, r4, #16
 8000c42:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000c46:	fb0e f005 	mul.w	r0, lr, r5
 8000c4a:	4290      	cmp	r0, r2
 8000c4c:	d908      	bls.n	8000c60 <__udivmoddi4+0x124>
 8000c4e:	eb1c 0202 	adds.w	r2, ip, r2
 8000c52:	f105 38ff 	add.w	r8, r5, #4294967295
 8000c56:	d202      	bcs.n	8000c5e <__udivmoddi4+0x122>
 8000c58:	4290      	cmp	r0, r2
 8000c5a:	f200 80cb 	bhi.w	8000df4 <__udivmoddi4+0x2b8>
 8000c5e:	4645      	mov	r5, r8
 8000c60:	1a12      	subs	r2, r2, r0
 8000c62:	b2a4      	uxth	r4, r4
 8000c64:	fbb2 f0f7 	udiv	r0, r2, r7
 8000c68:	fb07 2210 	mls	r2, r7, r0, r2
 8000c6c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c70:	fb0e fe00 	mul.w	lr, lr, r0
 8000c74:	45a6      	cmp	lr, r4
 8000c76:	d908      	bls.n	8000c8a <__udivmoddi4+0x14e>
 8000c78:	eb1c 0404 	adds.w	r4, ip, r4
 8000c7c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c80:	d202      	bcs.n	8000c88 <__udivmoddi4+0x14c>
 8000c82:	45a6      	cmp	lr, r4
 8000c84:	f200 80bb 	bhi.w	8000dfe <__udivmoddi4+0x2c2>
 8000c88:	4610      	mov	r0, r2
 8000c8a:	eba4 040e 	sub.w	r4, r4, lr
 8000c8e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000c92:	e79f      	b.n	8000bd4 <__udivmoddi4+0x98>
 8000c94:	f1c1 0720 	rsb	r7, r1, #32
 8000c98:	408b      	lsls	r3, r1
 8000c9a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c9e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ca2:	fa05 f401 	lsl.w	r4, r5, r1
 8000ca6:	fa20 f307 	lsr.w	r3, r0, r7
 8000caa:	40fd      	lsrs	r5, r7
 8000cac:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000cb0:	4323      	orrs	r3, r4
 8000cb2:	fbb5 f8f9 	udiv	r8, r5, r9
 8000cb6:	fa1f fe8c 	uxth.w	lr, ip
 8000cba:	fb09 5518 	mls	r5, r9, r8, r5
 8000cbe:	0c1c      	lsrs	r4, r3, #16
 8000cc0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000cc4:	fb08 f50e 	mul.w	r5, r8, lr
 8000cc8:	42a5      	cmp	r5, r4
 8000cca:	fa02 f201 	lsl.w	r2, r2, r1
 8000cce:	fa00 f001 	lsl.w	r0, r0, r1
 8000cd2:	d90b      	bls.n	8000cec <__udivmoddi4+0x1b0>
 8000cd4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cd8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000cdc:	f080 8088 	bcs.w	8000df0 <__udivmoddi4+0x2b4>
 8000ce0:	42a5      	cmp	r5, r4
 8000ce2:	f240 8085 	bls.w	8000df0 <__udivmoddi4+0x2b4>
 8000ce6:	f1a8 0802 	sub.w	r8, r8, #2
 8000cea:	4464      	add	r4, ip
 8000cec:	1b64      	subs	r4, r4, r5
 8000cee:	b29d      	uxth	r5, r3
 8000cf0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000cf4:	fb09 4413 	mls	r4, r9, r3, r4
 8000cf8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000cfc:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d00:	45a6      	cmp	lr, r4
 8000d02:	d908      	bls.n	8000d16 <__udivmoddi4+0x1da>
 8000d04:	eb1c 0404 	adds.w	r4, ip, r4
 8000d08:	f103 35ff 	add.w	r5, r3, #4294967295
 8000d0c:	d26c      	bcs.n	8000de8 <__udivmoddi4+0x2ac>
 8000d0e:	45a6      	cmp	lr, r4
 8000d10:	d96a      	bls.n	8000de8 <__udivmoddi4+0x2ac>
 8000d12:	3b02      	subs	r3, #2
 8000d14:	4464      	add	r4, ip
 8000d16:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d1a:	fba3 9502 	umull	r9, r5, r3, r2
 8000d1e:	eba4 040e 	sub.w	r4, r4, lr
 8000d22:	42ac      	cmp	r4, r5
 8000d24:	46c8      	mov	r8, r9
 8000d26:	46ae      	mov	lr, r5
 8000d28:	d356      	bcc.n	8000dd8 <__udivmoddi4+0x29c>
 8000d2a:	d053      	beq.n	8000dd4 <__udivmoddi4+0x298>
 8000d2c:	b156      	cbz	r6, 8000d44 <__udivmoddi4+0x208>
 8000d2e:	ebb0 0208 	subs.w	r2, r0, r8
 8000d32:	eb64 040e 	sbc.w	r4, r4, lr
 8000d36:	fa04 f707 	lsl.w	r7, r4, r7
 8000d3a:	40ca      	lsrs	r2, r1
 8000d3c:	40cc      	lsrs	r4, r1
 8000d3e:	4317      	orrs	r7, r2
 8000d40:	e9c6 7400 	strd	r7, r4, [r6]
 8000d44:	4618      	mov	r0, r3
 8000d46:	2100      	movs	r1, #0
 8000d48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4c:	f1c3 0120 	rsb	r1, r3, #32
 8000d50:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d54:	fa20 f201 	lsr.w	r2, r0, r1
 8000d58:	fa25 f101 	lsr.w	r1, r5, r1
 8000d5c:	409d      	lsls	r5, r3
 8000d5e:	432a      	orrs	r2, r5
 8000d60:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d64:	fa1f fe8c 	uxth.w	lr, ip
 8000d68:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d6c:	fb07 1510 	mls	r5, r7, r0, r1
 8000d70:	0c11      	lsrs	r1, r2, #16
 8000d72:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000d76:	fb00 f50e 	mul.w	r5, r0, lr
 8000d7a:	428d      	cmp	r5, r1
 8000d7c:	fa04 f403 	lsl.w	r4, r4, r3
 8000d80:	d908      	bls.n	8000d94 <__udivmoddi4+0x258>
 8000d82:	eb1c 0101 	adds.w	r1, ip, r1
 8000d86:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d8a:	d22f      	bcs.n	8000dec <__udivmoddi4+0x2b0>
 8000d8c:	428d      	cmp	r5, r1
 8000d8e:	d92d      	bls.n	8000dec <__udivmoddi4+0x2b0>
 8000d90:	3802      	subs	r0, #2
 8000d92:	4461      	add	r1, ip
 8000d94:	1b49      	subs	r1, r1, r5
 8000d96:	b292      	uxth	r2, r2
 8000d98:	fbb1 f5f7 	udiv	r5, r1, r7
 8000d9c:	fb07 1115 	mls	r1, r7, r5, r1
 8000da0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000da4:	fb05 f10e 	mul.w	r1, r5, lr
 8000da8:	4291      	cmp	r1, r2
 8000daa:	d908      	bls.n	8000dbe <__udivmoddi4+0x282>
 8000dac:	eb1c 0202 	adds.w	r2, ip, r2
 8000db0:	f105 38ff 	add.w	r8, r5, #4294967295
 8000db4:	d216      	bcs.n	8000de4 <__udivmoddi4+0x2a8>
 8000db6:	4291      	cmp	r1, r2
 8000db8:	d914      	bls.n	8000de4 <__udivmoddi4+0x2a8>
 8000dba:	3d02      	subs	r5, #2
 8000dbc:	4462      	add	r2, ip
 8000dbe:	1a52      	subs	r2, r2, r1
 8000dc0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000dc4:	e738      	b.n	8000c38 <__udivmoddi4+0xfc>
 8000dc6:	4631      	mov	r1, r6
 8000dc8:	4630      	mov	r0, r6
 8000dca:	e708      	b.n	8000bde <__udivmoddi4+0xa2>
 8000dcc:	4639      	mov	r1, r7
 8000dce:	e6e6      	b.n	8000b9e <__udivmoddi4+0x62>
 8000dd0:	4610      	mov	r0, r2
 8000dd2:	e6fb      	b.n	8000bcc <__udivmoddi4+0x90>
 8000dd4:	4548      	cmp	r0, r9
 8000dd6:	d2a9      	bcs.n	8000d2c <__udivmoddi4+0x1f0>
 8000dd8:	ebb9 0802 	subs.w	r8, r9, r2
 8000ddc:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000de0:	3b01      	subs	r3, #1
 8000de2:	e7a3      	b.n	8000d2c <__udivmoddi4+0x1f0>
 8000de4:	4645      	mov	r5, r8
 8000de6:	e7ea      	b.n	8000dbe <__udivmoddi4+0x282>
 8000de8:	462b      	mov	r3, r5
 8000dea:	e794      	b.n	8000d16 <__udivmoddi4+0x1da>
 8000dec:	4640      	mov	r0, r8
 8000dee:	e7d1      	b.n	8000d94 <__udivmoddi4+0x258>
 8000df0:	46d0      	mov	r8, sl
 8000df2:	e77b      	b.n	8000cec <__udivmoddi4+0x1b0>
 8000df4:	3d02      	subs	r5, #2
 8000df6:	4462      	add	r2, ip
 8000df8:	e732      	b.n	8000c60 <__udivmoddi4+0x124>
 8000dfa:	4608      	mov	r0, r1
 8000dfc:	e70a      	b.n	8000c14 <__udivmoddi4+0xd8>
 8000dfe:	4464      	add	r4, ip
 8000e00:	3802      	subs	r0, #2
 8000e02:	e742      	b.n	8000c8a <__udivmoddi4+0x14e>

08000e04 <__aeabi_idiv0>:
 8000e04:	4770      	bx	lr
 8000e06:	bf00      	nop

08000e08 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e0c:	f003 f8b2 	bl	8003f74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e10:	f000 f812 	bl	8000e38 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e14:	f000 f9d4 	bl	80011c0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000e18:	f000 f976 	bl	8001108 <MX_DMA_Init>
  MX_ADC1_Init();
 8000e1c:	f000 f874 	bl	8000f08 <MX_ADC1_Init>
  MX_SPI1_Init();
 8000e20:	f000 f8c4 	bl	8000fac <MX_SPI1_Init>
  MX_TIM3_Init();
 8000e24:	f000 f8f8 	bl	8001018 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8000e28:	f000 f944 	bl	80010b4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  scopeInit();
 8000e2c:	f000 faf0 	bl	8001410 <scopeInit>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    scopeLoop();
 8000e30:	f000 fb50 	bl	80014d4 <scopeLoop>
  {
 8000e34:	e7fc      	b.n	8000e30 <main+0x28>
	...

08000e38 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b094      	sub	sp, #80	; 0x50
 8000e3c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e3e:	f107 0320 	add.w	r3, r7, #32
 8000e42:	2230      	movs	r2, #48	; 0x30
 8000e44:	2100      	movs	r1, #0
 8000e46:	4618      	mov	r0, r3
 8000e48:	f007 fbce 	bl	80085e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e4c:	f107 030c 	add.w	r3, r7, #12
 8000e50:	2200      	movs	r2, #0
 8000e52:	601a      	str	r2, [r3, #0]
 8000e54:	605a      	str	r2, [r3, #4]
 8000e56:	609a      	str	r2, [r3, #8]
 8000e58:	60da      	str	r2, [r3, #12]
 8000e5a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	60bb      	str	r3, [r7, #8]
 8000e60:	4b27      	ldr	r3, [pc, #156]	; (8000f00 <SystemClock_Config+0xc8>)
 8000e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e64:	4a26      	ldr	r2, [pc, #152]	; (8000f00 <SystemClock_Config+0xc8>)
 8000e66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e6a:	6413      	str	r3, [r2, #64]	; 0x40
 8000e6c:	4b24      	ldr	r3, [pc, #144]	; (8000f00 <SystemClock_Config+0xc8>)
 8000e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e74:	60bb      	str	r3, [r7, #8]
 8000e76:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e78:	2300      	movs	r3, #0
 8000e7a:	607b      	str	r3, [r7, #4]
 8000e7c:	4b21      	ldr	r3, [pc, #132]	; (8000f04 <SystemClock_Config+0xcc>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	4a20      	ldr	r2, [pc, #128]	; (8000f04 <SystemClock_Config+0xcc>)
 8000e82:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e86:	6013      	str	r3, [r2, #0]
 8000e88:	4b1e      	ldr	r3, [pc, #120]	; (8000f04 <SystemClock_Config+0xcc>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e90:	607b      	str	r3, [r7, #4]
 8000e92:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e94:	2302      	movs	r3, #2
 8000e96:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e98:	2301      	movs	r3, #1
 8000e9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e9c:	2310      	movs	r3, #16
 8000e9e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ea0:	2302      	movs	r3, #2
 8000ea2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000ea8:	2308      	movs	r3, #8
 8000eaa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000eac:	2332      	movs	r3, #50	; 0x32
 8000eae:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000eb0:	2302      	movs	r3, #2
 8000eb2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000eb4:	2304      	movs	r3, #4
 8000eb6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000eb8:	f107 0320 	add.w	r3, r7, #32
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f004 fb95 	bl	80055ec <HAL_RCC_OscConfig>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d001      	beq.n	8000ecc <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000ec8:	f000 fa82 	bl	80013d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ecc:	230f      	movs	r3, #15
 8000ece:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ed0:	2302      	movs	r3, #2
 8000ed2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ed8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000edc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000ee2:	f107 030c 	add.w	r3, r7, #12
 8000ee6:	2101      	movs	r1, #1
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f004 fdf7 	bl	8005adc <HAL_RCC_ClockConfig>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d001      	beq.n	8000ef8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000ef4:	f000 fa6c 	bl	80013d0 <Error_Handler>
  }
}
 8000ef8:	bf00      	nop
 8000efa:	3750      	adds	r7, #80	; 0x50
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	40023800 	.word	0x40023800
 8000f04:	40007000 	.word	0x40007000

08000f08 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b084      	sub	sp, #16
 8000f0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f0e:	463b      	mov	r3, r7
 8000f10:	2200      	movs	r2, #0
 8000f12:	601a      	str	r2, [r3, #0]
 8000f14:	605a      	str	r2, [r3, #4]
 8000f16:	609a      	str	r2, [r3, #8]
 8000f18:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000f1a:	4b21      	ldr	r3, [pc, #132]	; (8000fa0 <MX_ADC1_Init+0x98>)
 8000f1c:	4a21      	ldr	r2, [pc, #132]	; (8000fa4 <MX_ADC1_Init+0x9c>)
 8000f1e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000f20:	4b1f      	ldr	r3, [pc, #124]	; (8000fa0 <MX_ADC1_Init+0x98>)
 8000f22:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000f26:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f28:	4b1d      	ldr	r3, [pc, #116]	; (8000fa0 <MX_ADC1_Init+0x98>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000f2e:	4b1c      	ldr	r3, [pc, #112]	; (8000fa0 <MX_ADC1_Init+0x98>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000f34:	4b1a      	ldr	r3, [pc, #104]	; (8000fa0 <MX_ADC1_Init+0x98>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f3a:	4b19      	ldr	r3, [pc, #100]	; (8000fa0 <MX_ADC1_Init+0x98>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f42:	4b17      	ldr	r3, [pc, #92]	; (8000fa0 <MX_ADC1_Init+0x98>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f48:	4b15      	ldr	r3, [pc, #84]	; (8000fa0 <MX_ADC1_Init+0x98>)
 8000f4a:	4a17      	ldr	r2, [pc, #92]	; (8000fa8 <MX_ADC1_Init+0xa0>)
 8000f4c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f4e:	4b14      	ldr	r3, [pc, #80]	; (8000fa0 <MX_ADC1_Init+0x98>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000f54:	4b12      	ldr	r3, [pc, #72]	; (8000fa0 <MX_ADC1_Init+0x98>)
 8000f56:	2201      	movs	r2, #1
 8000f58:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000f5a:	4b11      	ldr	r3, [pc, #68]	; (8000fa0 <MX_ADC1_Init+0x98>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f62:	4b0f      	ldr	r3, [pc, #60]	; (8000fa0 <MX_ADC1_Init+0x98>)
 8000f64:	2201      	movs	r2, #1
 8000f66:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f68:	480d      	ldr	r0, [pc, #52]	; (8000fa0 <MX_ADC1_Init+0x98>)
 8000f6a:	f003 f869 	bl	8004040 <HAL_ADC_Init>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d001      	beq.n	8000f78 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000f74:	f000 fa2c 	bl	80013d0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000f7c:	2301      	movs	r3, #1
 8000f7e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000f80:	2300      	movs	r3, #0
 8000f82:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f84:	463b      	mov	r3, r7
 8000f86:	4619      	mov	r1, r3
 8000f88:	4805      	ldr	r0, [pc, #20]	; (8000fa0 <MX_ADC1_Init+0x98>)
 8000f8a:	f003 f9c1 	bl	8004310 <HAL_ADC_ConfigChannel>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d001      	beq.n	8000f98 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000f94:	f000 fa1c 	bl	80013d0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f98:	bf00      	nop
 8000f9a:	3710      	adds	r7, #16
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	200000a4 	.word	0x200000a4
 8000fa4:	40012000 	.word	0x40012000
 8000fa8:	0f000001 	.word	0x0f000001

08000fac <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000fb0:	4b17      	ldr	r3, [pc, #92]	; (8001010 <MX_SPI1_Init+0x64>)
 8000fb2:	4a18      	ldr	r2, [pc, #96]	; (8001014 <MX_SPI1_Init+0x68>)
 8000fb4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000fb6:	4b16      	ldr	r3, [pc, #88]	; (8001010 <MX_SPI1_Init+0x64>)
 8000fb8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000fbc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000fbe:	4b14      	ldr	r3, [pc, #80]	; (8001010 <MX_SPI1_Init+0x64>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000fc4:	4b12      	ldr	r3, [pc, #72]	; (8001010 <MX_SPI1_Init+0x64>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000fca:	4b11      	ldr	r3, [pc, #68]	; (8001010 <MX_SPI1_Init+0x64>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000fd0:	4b0f      	ldr	r3, [pc, #60]	; (8001010 <MX_SPI1_Init+0x64>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000fd6:	4b0e      	ldr	r3, [pc, #56]	; (8001010 <MX_SPI1_Init+0x64>)
 8000fd8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000fdc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000fde:	4b0c      	ldr	r3, [pc, #48]	; (8001010 <MX_SPI1_Init+0x64>)
 8000fe0:	2208      	movs	r2, #8
 8000fe2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000fe4:	4b0a      	ldr	r3, [pc, #40]	; (8001010 <MX_SPI1_Init+0x64>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000fea:	4b09      	ldr	r3, [pc, #36]	; (8001010 <MX_SPI1_Init+0x64>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ff0:	4b07      	ldr	r3, [pc, #28]	; (8001010 <MX_SPI1_Init+0x64>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000ff6:	4b06      	ldr	r3, [pc, #24]	; (8001010 <MX_SPI1_Init+0x64>)
 8000ff8:	220a      	movs	r2, #10
 8000ffa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000ffc:	4804      	ldr	r0, [pc, #16]	; (8001010 <MX_SPI1_Init+0x64>)
 8000ffe:	f004 ff7f 	bl	8005f00 <HAL_SPI_Init>
 8001002:	4603      	mov	r3, r0
 8001004:	2b00      	cmp	r3, #0
 8001006:	d001      	beq.n	800100c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001008:	f000 f9e2 	bl	80013d0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800100c:	bf00      	nop
 800100e:	bd80      	pop	{r7, pc}
 8001010:	2000014c 	.word	0x2000014c
 8001014:	40013000 	.word	0x40013000

08001018 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b086      	sub	sp, #24
 800101c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800101e:	f107 0308 	add.w	r3, r7, #8
 8001022:	2200      	movs	r2, #0
 8001024:	601a      	str	r2, [r3, #0]
 8001026:	605a      	str	r2, [r3, #4]
 8001028:	609a      	str	r2, [r3, #8]
 800102a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800102c:	463b      	mov	r3, r7
 800102e:	2200      	movs	r2, #0
 8001030:	601a      	str	r2, [r3, #0]
 8001032:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001034:	4b1d      	ldr	r3, [pc, #116]	; (80010ac <MX_TIM3_Init+0x94>)
 8001036:	4a1e      	ldr	r2, [pc, #120]	; (80010b0 <MX_TIM3_Init+0x98>)
 8001038:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800103a:	4b1c      	ldr	r3, [pc, #112]	; (80010ac <MX_TIM3_Init+0x94>)
 800103c:	2200      	movs	r2, #0
 800103e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001040:	4b1a      	ldr	r3, [pc, #104]	; (80010ac <MX_TIM3_Init+0x94>)
 8001042:	2200      	movs	r2, #0
 8001044:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001046:	4b19      	ldr	r3, [pc, #100]	; (80010ac <MX_TIM3_Init+0x94>)
 8001048:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800104c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800104e:	4b17      	ldr	r3, [pc, #92]	; (80010ac <MX_TIM3_Init+0x94>)
 8001050:	2200      	movs	r2, #0
 8001052:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001054:	4b15      	ldr	r3, [pc, #84]	; (80010ac <MX_TIM3_Init+0x94>)
 8001056:	2200      	movs	r2, #0
 8001058:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800105a:	4814      	ldr	r0, [pc, #80]	; (80010ac <MX_TIM3_Init+0x94>)
 800105c:	f005 f9e0 	bl	8006420 <HAL_TIM_Base_Init>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8001066:	f000 f9b3 	bl	80013d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800106a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800106e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001070:	f107 0308 	add.w	r3, r7, #8
 8001074:	4619      	mov	r1, r3
 8001076:	480d      	ldr	r0, [pc, #52]	; (80010ac <MX_TIM3_Init+0x94>)
 8001078:	f005 fc2a 	bl	80068d0 <HAL_TIM_ConfigClockSource>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8001082:	f000 f9a5 	bl	80013d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001086:	2320      	movs	r3, #32
 8001088:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800108a:	2300      	movs	r3, #0
 800108c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800108e:	463b      	mov	r3, r7
 8001090:	4619      	mov	r1, r3
 8001092:	4806      	ldr	r0, [pc, #24]	; (80010ac <MX_TIM3_Init+0x94>)
 8001094:	f005 fe46 	bl	8006d24 <HAL_TIMEx_MasterConfigSynchronization>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d001      	beq.n	80010a2 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800109e:	f000 f997 	bl	80013d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80010a2:	bf00      	nop
 80010a4:	3718      	adds	r7, #24
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	200001a4 	.word	0x200001a4
 80010b0:	40000400 	.word	0x40000400

080010b4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80010b8:	4b11      	ldr	r3, [pc, #68]	; (8001100 <MX_USART1_UART_Init+0x4c>)
 80010ba:	4a12      	ldr	r2, [pc, #72]	; (8001104 <MX_USART1_UART_Init+0x50>)
 80010bc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80010be:	4b10      	ldr	r3, [pc, #64]	; (8001100 <MX_USART1_UART_Init+0x4c>)
 80010c0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80010c4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80010c6:	4b0e      	ldr	r3, [pc, #56]	; (8001100 <MX_USART1_UART_Init+0x4c>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80010cc:	4b0c      	ldr	r3, [pc, #48]	; (8001100 <MX_USART1_UART_Init+0x4c>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80010d2:	4b0b      	ldr	r3, [pc, #44]	; (8001100 <MX_USART1_UART_Init+0x4c>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80010d8:	4b09      	ldr	r3, [pc, #36]	; (8001100 <MX_USART1_UART_Init+0x4c>)
 80010da:	220c      	movs	r2, #12
 80010dc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010de:	4b08      	ldr	r3, [pc, #32]	; (8001100 <MX_USART1_UART_Init+0x4c>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80010e4:	4b06      	ldr	r3, [pc, #24]	; (8001100 <MX_USART1_UART_Init+0x4c>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80010ea:	4805      	ldr	r0, [pc, #20]	; (8001100 <MX_USART1_UART_Init+0x4c>)
 80010ec:	f005 ff3a 	bl	8006f64 <HAL_UART_Init>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d001      	beq.n	80010fa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80010f6:	f000 f96b 	bl	80013d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80010fa:	bf00      	nop
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	200001ec 	.word	0x200001ec
 8001104:	40011000 	.word	0x40011000

08001108 <MX_DMA_Init>:
  * Enable DMA controller clock
  * Configure DMA for memory to memory transfers
  *   hdma_memtomem_dma2_stream1
  */
static void MX_DMA_Init(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800110e:	2300      	movs	r3, #0
 8001110:	607b      	str	r3, [r7, #4]
 8001112:	4b28      	ldr	r3, [pc, #160]	; (80011b4 <MX_DMA_Init+0xac>)
 8001114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001116:	4a27      	ldr	r2, [pc, #156]	; (80011b4 <MX_DMA_Init+0xac>)
 8001118:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800111c:	6313      	str	r3, [r2, #48]	; 0x30
 800111e:	4b25      	ldr	r3, [pc, #148]	; (80011b4 <MX_DMA_Init+0xac>)
 8001120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001122:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001126:	607b      	str	r3, [r7, #4]
 8001128:	687b      	ldr	r3, [r7, #4]

  /* Configure DMA request hdma_memtomem_dma2_stream1 on DMA2_Stream1 */
  hdma_memtomem_dma2_stream1.Instance = DMA2_Stream1;
 800112a:	4b23      	ldr	r3, [pc, #140]	; (80011b8 <MX_DMA_Init+0xb0>)
 800112c:	4a23      	ldr	r2, [pc, #140]	; (80011bc <MX_DMA_Init+0xb4>)
 800112e:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma2_stream1.Init.Channel = DMA_CHANNEL_0;
 8001130:	4b21      	ldr	r3, [pc, #132]	; (80011b8 <MX_DMA_Init+0xb0>)
 8001132:	2200      	movs	r2, #0
 8001134:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma2_stream1.Init.Direction = DMA_MEMORY_TO_MEMORY;
 8001136:	4b20      	ldr	r3, [pc, #128]	; (80011b8 <MX_DMA_Init+0xb0>)
 8001138:	2280      	movs	r2, #128	; 0x80
 800113a:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma2_stream1.Init.PeriphInc = DMA_PINC_ENABLE;
 800113c:	4b1e      	ldr	r3, [pc, #120]	; (80011b8 <MX_DMA_Init+0xb0>)
 800113e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001142:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma2_stream1.Init.MemInc = DMA_MINC_ENABLE;
 8001144:	4b1c      	ldr	r3, [pc, #112]	; (80011b8 <MX_DMA_Init+0xb0>)
 8001146:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800114a:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma2_stream1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800114c:	4b1a      	ldr	r3, [pc, #104]	; (80011b8 <MX_DMA_Init+0xb0>)
 800114e:	2200      	movs	r2, #0
 8001150:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma2_stream1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001152:	4b19      	ldr	r3, [pc, #100]	; (80011b8 <MX_DMA_Init+0xb0>)
 8001154:	2200      	movs	r2, #0
 8001156:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma2_stream1.Init.Mode = DMA_NORMAL;
 8001158:	4b17      	ldr	r3, [pc, #92]	; (80011b8 <MX_DMA_Init+0xb0>)
 800115a:	2200      	movs	r2, #0
 800115c:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma2_stream1.Init.Priority = DMA_PRIORITY_LOW;
 800115e:	4b16      	ldr	r3, [pc, #88]	; (80011b8 <MX_DMA_Init+0xb0>)
 8001160:	2200      	movs	r2, #0
 8001162:	621a      	str	r2, [r3, #32]
  hdma_memtomem_dma2_stream1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001164:	4b14      	ldr	r3, [pc, #80]	; (80011b8 <MX_DMA_Init+0xb0>)
 8001166:	2204      	movs	r2, #4
 8001168:	625a      	str	r2, [r3, #36]	; 0x24
  hdma_memtomem_dma2_stream1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800116a:	4b13      	ldr	r3, [pc, #76]	; (80011b8 <MX_DMA_Init+0xb0>)
 800116c:	2203      	movs	r2, #3
 800116e:	629a      	str	r2, [r3, #40]	; 0x28
  hdma_memtomem_dma2_stream1.Init.MemBurst = DMA_MBURST_SINGLE;
 8001170:	4b11      	ldr	r3, [pc, #68]	; (80011b8 <MX_DMA_Init+0xb0>)
 8001172:	2200      	movs	r2, #0
 8001174:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma_memtomem_dma2_stream1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001176:	4b10      	ldr	r3, [pc, #64]	; (80011b8 <MX_DMA_Init+0xb0>)
 8001178:	2200      	movs	r2, #0
 800117a:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DMA_Init(&hdma_memtomem_dma2_stream1) != HAL_OK)
 800117c:	480e      	ldr	r0, [pc, #56]	; (80011b8 <MX_DMA_Init+0xb0>)
 800117e:	f003 fc65 	bl	8004a4c <HAL_DMA_Init>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d001      	beq.n	800118c <MX_DMA_Init+0x84>
  {
    Error_Handler( );
 8001188:	f000 f922 	bl	80013d0 <Error_Handler>
  }

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800118c:	2200      	movs	r2, #0
 800118e:	2100      	movs	r1, #0
 8001190:	2038      	movs	r0, #56	; 0x38
 8001192:	f003 fc2c 	bl	80049ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001196:	2038      	movs	r0, #56	; 0x38
 8001198:	f003 fc45 	bl	8004a26 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 800119c:	2200      	movs	r2, #0
 800119e:	2100      	movs	r1, #0
 80011a0:	2039      	movs	r0, #57	; 0x39
 80011a2:	f003 fc24 	bl	80049ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80011a6:	2039      	movs	r0, #57	; 0x39
 80011a8:	f003 fc3d 	bl	8004a26 <HAL_NVIC_EnableIRQ>

}
 80011ac:	bf00      	nop
 80011ae:	3708      	adds	r7, #8
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	40023800 	.word	0x40023800
 80011b8:	20000230 	.word	0x20000230
 80011bc:	40026428 	.word	0x40026428

080011c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b08a      	sub	sp, #40	; 0x28
 80011c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c6:	f107 0314 	add.w	r3, r7, #20
 80011ca:	2200      	movs	r2, #0
 80011cc:	601a      	str	r2, [r3, #0]
 80011ce:	605a      	str	r2, [r3, #4]
 80011d0:	609a      	str	r2, [r3, #8]
 80011d2:	60da      	str	r2, [r3, #12]
 80011d4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011d6:	2300      	movs	r3, #0
 80011d8:	613b      	str	r3, [r7, #16]
 80011da:	4b38      	ldr	r3, [pc, #224]	; (80012bc <MX_GPIO_Init+0xfc>)
 80011dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011de:	4a37      	ldr	r2, [pc, #220]	; (80012bc <MX_GPIO_Init+0xfc>)
 80011e0:	f043 0304 	orr.w	r3, r3, #4
 80011e4:	6313      	str	r3, [r2, #48]	; 0x30
 80011e6:	4b35      	ldr	r3, [pc, #212]	; (80012bc <MX_GPIO_Init+0xfc>)
 80011e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ea:	f003 0304 	and.w	r3, r3, #4
 80011ee:	613b      	str	r3, [r7, #16]
 80011f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011f2:	2300      	movs	r3, #0
 80011f4:	60fb      	str	r3, [r7, #12]
 80011f6:	4b31      	ldr	r3, [pc, #196]	; (80012bc <MX_GPIO_Init+0xfc>)
 80011f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fa:	4a30      	ldr	r2, [pc, #192]	; (80012bc <MX_GPIO_Init+0xfc>)
 80011fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001200:	6313      	str	r3, [r2, #48]	; 0x30
 8001202:	4b2e      	ldr	r3, [pc, #184]	; (80012bc <MX_GPIO_Init+0xfc>)
 8001204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001206:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800120a:	60fb      	str	r3, [r7, #12]
 800120c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800120e:	2300      	movs	r3, #0
 8001210:	60bb      	str	r3, [r7, #8]
 8001212:	4b2a      	ldr	r3, [pc, #168]	; (80012bc <MX_GPIO_Init+0xfc>)
 8001214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001216:	4a29      	ldr	r2, [pc, #164]	; (80012bc <MX_GPIO_Init+0xfc>)
 8001218:	f043 0301 	orr.w	r3, r3, #1
 800121c:	6313      	str	r3, [r2, #48]	; 0x30
 800121e:	4b27      	ldr	r3, [pc, #156]	; (80012bc <MX_GPIO_Init+0xfc>)
 8001220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001222:	f003 0301 	and.w	r3, r3, #1
 8001226:	60bb      	str	r3, [r7, #8]
 8001228:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800122a:	2300      	movs	r3, #0
 800122c:	607b      	str	r3, [r7, #4]
 800122e:	4b23      	ldr	r3, [pc, #140]	; (80012bc <MX_GPIO_Init+0xfc>)
 8001230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001232:	4a22      	ldr	r2, [pc, #136]	; (80012bc <MX_GPIO_Init+0xfc>)
 8001234:	f043 0302 	orr.w	r3, r3, #2
 8001238:	6313      	str	r3, [r2, #48]	; 0x30
 800123a:	4b20      	ldr	r3, [pc, #128]	; (80012bc <MX_GPIO_Init+0xfc>)
 800123c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123e:	f003 0302 	and.w	r3, r3, #2
 8001242:	607b      	str	r3, [r7, #4]
 8001244:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001246:	2200      	movs	r2, #0
 8001248:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800124c:	481c      	ldr	r0, [pc, #112]	; (80012c0 <MX_GPIO_Init+0x100>)
 800124e:	f004 f9b3 	bl	80055b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ST7735_CS_Pin|ST7735_RES_Pin|ST7735_DC_Pin, GPIO_PIN_RESET);
 8001252:	2200      	movs	r2, #0
 8001254:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 8001258:	481a      	ldr	r0, [pc, #104]	; (80012c4 <MX_GPIO_Init+0x104>)
 800125a:	f004 f9ad 	bl	80055b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 800125e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001262:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001264:	2301      	movs	r3, #1
 8001266:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001268:	2300      	movs	r3, #0
 800126a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800126c:	2300      	movs	r3, #0
 800126e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001270:	f107 0314 	add.w	r3, r7, #20
 8001274:	4619      	mov	r1, r3
 8001276:	4812      	ldr	r0, [pc, #72]	; (80012c0 <MX_GPIO_Init+0x100>)
 8001278:	f003 ffea 	bl	8005250 <HAL_GPIO_Init>

  /*Configure GPIO pins : ST7735_CS_Pin ST7735_RES_Pin ST7735_DC_Pin */
  GPIO_InitStruct.Pin = ST7735_CS_Pin|ST7735_RES_Pin|ST7735_DC_Pin;
 800127c:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8001280:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001282:	2301      	movs	r3, #1
 8001284:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001286:	2300      	movs	r3, #0
 8001288:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800128a:	2300      	movs	r3, #0
 800128c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800128e:	f107 0314 	add.w	r3, r7, #20
 8001292:	4619      	mov	r1, r3
 8001294:	480b      	ldr	r0, [pc, #44]	; (80012c4 <MX_GPIO_Init+0x104>)
 8001296:	f003 ffdb 	bl	8005250 <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN1_Pin BTN2_Pin BTN3_Pin */
  GPIO_InitStruct.Pin = BTN1_Pin|BTN2_Pin|BTN3_Pin;
 800129a:	f44f 7360 	mov.w	r3, #896	; 0x380
 800129e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012a0:	2300      	movs	r3, #0
 80012a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a4:	2300      	movs	r3, #0
 80012a6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012a8:	f107 0314 	add.w	r3, r7, #20
 80012ac:	4619      	mov	r1, r3
 80012ae:	4805      	ldr	r0, [pc, #20]	; (80012c4 <MX_GPIO_Init+0x104>)
 80012b0:	f003 ffce 	bl	8005250 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80012b4:	bf00      	nop
 80012b6:	3728      	adds	r7, #40	; 0x28
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	40023800 	.word	0x40023800
 80012c0:	40020800 	.word	0x40020800
 80012c4:	40020400 	.word	0x40020400

080012c8 <__io_putchar>:

/* USER CODE BEGIN 4 */
int __io_putchar(int ch)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b082      	sub	sp, #8
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  writeChar(ch);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	b2db      	uxtb	r3, r3
 80012d4:	4618      	mov	r0, r3
 80012d6:	f002 f905 	bl	80034e4 <writeChar>
  return ch;
 80012da:	687b      	ldr	r3, [r7, #4]
}
 80012dc:	4618      	mov	r0, r3
 80012de:	3708      	adds	r7, #8
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}

080012e4 <printFloat>:

void printFloat(float v, int decimalDigits, char s[])
{
 80012e4:	b5b0      	push	{r4, r5, r7, lr}
 80012e6:	b08a      	sub	sp, #40	; 0x28
 80012e8:	af02      	add	r7, sp, #8
 80012ea:	ed87 0a03 	vstr	s0, [r7, #12]
 80012ee:	60b8      	str	r0, [r7, #8]
 80012f0:	6079      	str	r1, [r7, #4]
  uint8_t neg = 0;
 80012f2:	2300      	movs	r3, #0
 80012f4:	77fb      	strb	r3, [r7, #31]
  if (v < 0)
 80012f6:	edd7 7a03 	vldr	s15, [r7, #12]
 80012fa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80012fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001302:	d51b      	bpl.n	800133c <printFloat+0x58>
  {
    neg = 1;
 8001304:	2301      	movs	r3, #1
 8001306:	77fb      	strb	r3, [r7, #31]
    v = v - (2.0 * v);
 8001308:	68f8      	ldr	r0, [r7, #12]
 800130a:	f7ff f91d 	bl	8000548 <__aeabi_f2d>
 800130e:	4604      	mov	r4, r0
 8001310:	460d      	mov	r5, r1
 8001312:	68f8      	ldr	r0, [r7, #12]
 8001314:	f7ff f918 	bl	8000548 <__aeabi_f2d>
 8001318:	4602      	mov	r2, r0
 800131a:	460b      	mov	r3, r1
 800131c:	f7fe ffb6 	bl	800028c <__adddf3>
 8001320:	4602      	mov	r2, r0
 8001322:	460b      	mov	r3, r1
 8001324:	4620      	mov	r0, r4
 8001326:	4629      	mov	r1, r5
 8001328:	f7fe ffae 	bl	8000288 <__aeabi_dsub>
 800132c:	4602      	mov	r2, r0
 800132e:	460b      	mov	r3, r1
 8001330:	4610      	mov	r0, r2
 8001332:	4619      	mov	r1, r3
 8001334:	f7ff fb9a 	bl	8000a6c <__aeabi_d2f>
 8001338:	4603      	mov	r3, r0
 800133a:	60fb      	str	r3, [r7, #12]
  }
  int i = 1;
 800133c:	2301      	movs	r3, #1
 800133e:	61bb      	str	r3, [r7, #24]
  int intPart, fractPart;
  for (; decimalDigits != 0; i *= 10, decimalDigits--);
 8001340:	e008      	b.n	8001354 <printFloat+0x70>
 8001342:	69ba      	ldr	r2, [r7, #24]
 8001344:	4613      	mov	r3, r2
 8001346:	009b      	lsls	r3, r3, #2
 8001348:	4413      	add	r3, r2
 800134a:	005b      	lsls	r3, r3, #1
 800134c:	61bb      	str	r3, [r7, #24]
 800134e:	68bb      	ldr	r3, [r7, #8]
 8001350:	3b01      	subs	r3, #1
 8001352:	60bb      	str	r3, [r7, #8]
 8001354:	68bb      	ldr	r3, [r7, #8]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d1f3      	bne.n	8001342 <printFloat+0x5e>
  intPart = (int)v;
 800135a:	edd7 7a03 	vldr	s15, [r7, #12]
 800135e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001362:	ee17 3a90 	vmov	r3, s15
 8001366:	613b      	str	r3, [r7, #16]
  fractPart = (int)((v - (float)(int)v) * i);
 8001368:	edd7 7a03 	vldr	s15, [r7, #12]
 800136c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001370:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001374:	ed97 7a03 	vldr	s14, [r7, #12]
 8001378:	ee37 7a67 	vsub.f32	s14, s14, s15
 800137c:	69bb      	ldr	r3, [r7, #24]
 800137e:	ee07 3a90 	vmov	s15, r3
 8001382:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001386:	ee67 7a27 	vmul.f32	s15, s14, s15
 800138a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800138e:	ee17 3a90 	vmov	r3, s15
 8001392:	617b      	str	r3, [r7, #20]
  if (fractPart < 0)
 8001394:	697b      	ldr	r3, [r7, #20]
 8001396:	2b00      	cmp	r3, #0
 8001398:	da02      	bge.n	80013a0 <printFloat+0xbc>
    fractPart *= -1;
 800139a:	697b      	ldr	r3, [r7, #20]
 800139c:	425b      	negs	r3, r3
 800139e:	617b      	str	r3, [r7, #20]
  sprintf(s, "%s%i.%i", neg ? "-" : "", intPart, fractPart);
 80013a0:	7ffb      	ldrb	r3, [r7, #31]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d001      	beq.n	80013aa <printFloat+0xc6>
 80013a6:	4a07      	ldr	r2, [pc, #28]	; (80013c4 <printFloat+0xe0>)
 80013a8:	e000      	b.n	80013ac <printFloat+0xc8>
 80013aa:	4a07      	ldr	r2, [pc, #28]	; (80013c8 <printFloat+0xe4>)
 80013ac:	697b      	ldr	r3, [r7, #20]
 80013ae:	9300      	str	r3, [sp, #0]
 80013b0:	693b      	ldr	r3, [r7, #16]
 80013b2:	4906      	ldr	r1, [pc, #24]	; (80013cc <printFloat+0xe8>)
 80013b4:	6878      	ldr	r0, [r7, #4]
 80013b6:	f007 f81f 	bl	80083f8 <siprintf>
}
 80013ba:	bf00      	nop
 80013bc:	3720      	adds	r7, #32
 80013be:	46bd      	mov	sp, r7
 80013c0:	bdb0      	pop	{r4, r5, r7, pc}
 80013c2:	bf00      	nop
 80013c4:	08009328 	.word	0x08009328
 80013c8:	0800932c 	.word	0x0800932c
 80013cc:	08009330 	.word	0x08009330

080013d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013d4:	b672      	cpsid	i
}
 80013d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013d8:	e7fe      	b.n	80013d8 <Error_Handler+0x8>
	...

080013dc <setTimerFreq>:
extern UART_HandleTypeDef huart1;
uint8_t uartBuf[15];

// This sets the sampling rate
void setTimerFreq(uint32_t freq)
{
 80013dc:	b480      	push	{r7}
 80013de:	b085      	sub	sp, #20
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
    uint16_t arr = (SYSCLK_FREQ / ((CLOCKTIM_PRESC + 1) * freq)) - 1;
 80013e4:	4a08      	ldr	r2, [pc, #32]	; (8001408 <setTimerFreq+0x2c>)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80013ec:	b29b      	uxth	r3, r3
 80013ee:	3b01      	subs	r3, #1
 80013f0:	81fb      	strh	r3, [r7, #14]
    htim3.Instance->ARR = arr;
 80013f2:	4b06      	ldr	r3, [pc, #24]	; (800140c <setTimerFreq+0x30>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	89fa      	ldrh	r2, [r7, #14]
 80013f8:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80013fa:	bf00      	nop
 80013fc:	3714      	adds	r7, #20
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr
 8001406:	bf00      	nop
 8001408:	05f5e100 	.word	0x05f5e100
 800140c:	200001a4 	.word	0x200001a4

08001410 <scopeInit>:
// Initialize the scope

void scopeInit()
{
 8001410:	b580      	push	{r7, lr}
 8001412:	af00      	add	r7, sp, #0
    ST7735_initR(INITR_BLACKTAB, &hspi1); // Initialize the LCD
 8001414:	4917      	ldr	r1, [pc, #92]	; (8001474 <scopeInit+0x64>)
 8001416:	2002      	movs	r0, #2
 8001418:	f002 fc2e 	bl	8003c78 <ST7735_initR>
    setRotation(1);
 800141c:	2001      	movs	r0, #1
 800141e:	f002 fb11 	bl	8003a44 <setRotation>
    createFramebuf(); // Create the framebuffer for the LCD
 8001422:	f002 f9ef 	bl	8003804 <createFramebuf>
    clearDisplay();
 8001426:	f001 feef 	bl	8003208 <clearDisplay>
    splash(); // Splash screen
 800142a:	f000 fbd5 	bl	8001bd8 <splash>

    // Set the sampling rate
    sampRate = (16000 * 1000) / tdiv;
 800142e:	4b12      	ldr	r3, [pc, #72]	; (8001478 <scopeInit+0x68>)
 8001430:	ed93 7a00 	vldr	s14, [r3]
 8001434:	eddf 6a11 	vldr	s13, [pc, #68]	; 800147c <scopeInit+0x6c>
 8001438:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800143c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001440:	ee17 2a90 	vmov	r2, s15
 8001444:	4b0e      	ldr	r3, [pc, #56]	; (8001480 <scopeInit+0x70>)
 8001446:	601a      	str	r2, [r3, #0]
    sampPer = tdiv / 16.0;
 8001448:	4b0b      	ldr	r3, [pc, #44]	; (8001478 <scopeInit+0x68>)
 800144a:	ed93 7a00 	vldr	s14, [r3]
 800144e:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8001452:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001456:	4b0b      	ldr	r3, [pc, #44]	; (8001484 <scopeInit+0x74>)
 8001458:	edc3 7a00 	vstr	s15, [r3]
    setTimerFreq(sampRate);
 800145c:	4b08      	ldr	r3, [pc, #32]	; (8001480 <scopeInit+0x70>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4618      	mov	r0, r3
 8001462:	f7ff ffbb 	bl	80013dc <setTimerFreq>

    // Initialize the UART
    HAL_UART_Receive_IT(&huart1, uartBuf, 1);
 8001466:	2201      	movs	r2, #1
 8001468:	4907      	ldr	r1, [pc, #28]	; (8001488 <scopeInit+0x78>)
 800146a:	4808      	ldr	r0, [pc, #32]	; (800148c <scopeInit+0x7c>)
 800146c:	f005 fe59 	bl	8007122 <HAL_UART_Receive_IT>
}
 8001470:	bf00      	nop
 8001472:	bd80      	pop	{r7, pc}
 8001474:	2000014c 	.word	0x2000014c
 8001478:	20000010 	.word	0x20000010
 800147c:	4b742400 	.word	0x4b742400
 8001480:	2000049c 	.word	0x2000049c
 8001484:	200004a0 	.word	0x200004a0
 8001488:	200004b4 	.word	0x200004b4
 800148c:	200001ec 	.word	0x200001ec

08001490 <sample>:

// This function acquires one buffer worth of data
void sample()
{
 8001490:	b580      	push	{r7, lr}
 8001492:	af00      	add	r7, sp, #0
    HAL_TIM_Base_Start(&htim3);
 8001494:	480b      	ldr	r0, [pc, #44]	; (80014c4 <sample+0x34>)
 8001496:	f005 f813 	bl	80064c0 <HAL_TIM_Base_Start>
    HAL_ADC_Start_DMA(&hadc1, (uint32_t *)adcBuf, BUFFER_LEN);
 800149a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800149e:	490a      	ldr	r1, [pc, #40]	; (80014c8 <sample+0x38>)
 80014a0:	480a      	ldr	r0, [pc, #40]	; (80014cc <sample+0x3c>)
 80014a2:	f002 fe11 	bl	80040c8 <HAL_ADC_Start_DMA>
    while (!finishedConversion);
 80014a6:	bf00      	nop
 80014a8:	4b09      	ldr	r3, [pc, #36]	; (80014d0 <sample+0x40>)
 80014aa:	781b      	ldrb	r3, [r3, #0]
 80014ac:	b2db      	uxtb	r3, r3
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d0fa      	beq.n	80014a8 <sample+0x18>
    HAL_TIM_Base_Stop(&htim3);
 80014b2:	4804      	ldr	r0, [pc, #16]	; (80014c4 <sample+0x34>)
 80014b4:	f005 f86c 	bl	8006590 <HAL_TIM_Base_Stop>
    finishedConversion = 1;
 80014b8:	4b05      	ldr	r3, [pc, #20]	; (80014d0 <sample+0x40>)
 80014ba:	2201      	movs	r2, #1
 80014bc:	701a      	strb	r2, [r3, #0]
}
 80014be:	bf00      	nop
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	200001a4 	.word	0x200001a4
 80014c8:	20000290 	.word	0x20000290
 80014cc:	200000a4 	.word	0x200000a4
 80014d0:	20000000 	.word	0x20000000

080014d4 <scopeLoop>:

// This is the main loop of the app
void scopeLoop()
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	af00      	add	r7, sp, #0
    // Acquire one buffer
    sample();
 80014d8:	f7ff ffda 	bl	8001490 <sample>

    // Find the trigger point
    findTrigger(adcBuf);
 80014dc:	480b      	ldr	r0, [pc, #44]	; (800150c <scopeLoop+0x38>)
 80014de:	f001 fd17 	bl	8002f10 <findTrigger>
    if (trigged)
 80014e2:	4b0b      	ldr	r3, [pc, #44]	; (8001510 <scopeLoop+0x3c>)
 80014e4:	781b      	ldrb	r3, [r3, #0]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d005      	beq.n	80014f6 <scopeLoop+0x22>
        HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 0); // light the on-board LED up if triggered
 80014ea:	2200      	movs	r2, #0
 80014ec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014f0:	4808      	ldr	r0, [pc, #32]	; (8001514 <scopeLoop+0x40>)
 80014f2:	f004 f861 	bl	80055b8 <HAL_GPIO_WritePin>

    // Run the UI
    ui();
 80014f6:	f000 fb95 	bl	8001c24 <ui>
    HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 1);
 80014fa:	2201      	movs	r2, #1
 80014fc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001500:	4804      	ldr	r0, [pc, #16]	; (8001514 <scopeLoop+0x40>)
 8001502:	f004 f859 	bl	80055b8 <HAL_GPIO_WritePin>
}
 8001506:	bf00      	nop
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	20000290 	.word	0x20000290
 8001510:	20000490 	.word	0x20000490
 8001514:	40020800 	.word	0x40020800

08001518 <HAL_ADC_ConvCpltCallback>:


// This runs after the ADC has finished sampling one whole buffer
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001518:	b480      	push	{r7}
 800151a:	b083      	sub	sp, #12
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
    finishedConversion = 1;
 8001520:	4b04      	ldr	r3, [pc, #16]	; (8001534 <HAL_ADC_ConvCpltCallback+0x1c>)
 8001522:	2201      	movs	r2, #1
 8001524:	701a      	strb	r2, [r3, #0]
}
 8001526:	bf00      	nop
 8001528:	370c      	adds	r7, #12
 800152a:	46bd      	mov	sp, r7
 800152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001530:	4770      	bx	lr
 8001532:	bf00      	nop
 8001534:	20000000 	.word	0x20000000

08001538 <HAL_UART_RxCpltCallback>:

// This runs after receiving a character over the UART
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b082      	sub	sp, #8
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
    extern uint8_t outputFlag, fast;
    if (uartBuf[0] == 's')
 8001540:	4b12      	ldr	r3, [pc, #72]	; (800158c <HAL_UART_RxCpltCallback+0x54>)
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	2b73      	cmp	r3, #115	; 0x73
 8001546:	d103      	bne.n	8001550 <HAL_UART_RxCpltCallback+0x18>
        outputFlag = 2;
 8001548:	4b11      	ldr	r3, [pc, #68]	; (8001590 <HAL_UART_RxCpltCallback+0x58>)
 800154a:	2202      	movs	r2, #2
 800154c:	701a      	strb	r2, [r3, #0]
 800154e:	e014      	b.n	800157a <HAL_UART_RxCpltCallback+0x42>
    else if (uartBuf[0] == 'S')
 8001550:	4b0e      	ldr	r3, [pc, #56]	; (800158c <HAL_UART_RxCpltCallback+0x54>)
 8001552:	781b      	ldrb	r3, [r3, #0]
 8001554:	2b53      	cmp	r3, #83	; 0x53
 8001556:	d106      	bne.n	8001566 <HAL_UART_RxCpltCallback+0x2e>
    {
        outputFlag = 4;
 8001558:	4b0d      	ldr	r3, [pc, #52]	; (8001590 <HAL_UART_RxCpltCallback+0x58>)
 800155a:	2204      	movs	r2, #4
 800155c:	701a      	strb	r2, [r3, #0]
        fast = 0;
 800155e:	4b0d      	ldr	r3, [pc, #52]	; (8001594 <HAL_UART_RxCpltCallback+0x5c>)
 8001560:	2200      	movs	r2, #0
 8001562:	701a      	strb	r2, [r3, #0]
 8001564:	e009      	b.n	800157a <HAL_UART_RxCpltCallback+0x42>
    }
    else if (uartBuf[0] == 'F')
 8001566:	4b09      	ldr	r3, [pc, #36]	; (800158c <HAL_UART_RxCpltCallback+0x54>)
 8001568:	781b      	ldrb	r3, [r3, #0]
 800156a:	2b46      	cmp	r3, #70	; 0x46
 800156c:	d105      	bne.n	800157a <HAL_UART_RxCpltCallback+0x42>
    {
        outputFlag = 4;
 800156e:	4b08      	ldr	r3, [pc, #32]	; (8001590 <HAL_UART_RxCpltCallback+0x58>)
 8001570:	2204      	movs	r2, #4
 8001572:	701a      	strb	r2, [r3, #0]
        fast = 1;
 8001574:	4b07      	ldr	r3, [pc, #28]	; (8001594 <HAL_UART_RxCpltCallback+0x5c>)
 8001576:	2201      	movs	r2, #1
 8001578:	701a      	strb	r2, [r3, #0]
    }
    HAL_UART_Receive_IT(&huart1, uartBuf, 1);
 800157a:	2201      	movs	r2, #1
 800157c:	4903      	ldr	r1, [pc, #12]	; (800158c <HAL_UART_RxCpltCallback+0x54>)
 800157e:	4806      	ldr	r0, [pc, #24]	; (8001598 <HAL_UART_RxCpltCallback+0x60>)
 8001580:	f005 fdcf 	bl	8007122 <HAL_UART_Receive_IT>
}
 8001584:	bf00      	nop
 8001586:	3708      	adds	r7, #8
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}
 800158c:	200004b4 	.word	0x200004b4
 8001590:	200004c8 	.word	0x200004c8
 8001594:	2000001c 	.word	0x2000001c
 8001598:	200001ec 	.word	0x200001ec

0800159c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800159c:	b480      	push	{r7}
 800159e:	b083      	sub	sp, #12
 80015a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015a2:	2300      	movs	r3, #0
 80015a4:	607b      	str	r3, [r7, #4]
 80015a6:	4b10      	ldr	r3, [pc, #64]	; (80015e8 <HAL_MspInit+0x4c>)
 80015a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015aa:	4a0f      	ldr	r2, [pc, #60]	; (80015e8 <HAL_MspInit+0x4c>)
 80015ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015b0:	6453      	str	r3, [r2, #68]	; 0x44
 80015b2:	4b0d      	ldr	r3, [pc, #52]	; (80015e8 <HAL_MspInit+0x4c>)
 80015b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015ba:	607b      	str	r3, [r7, #4]
 80015bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015be:	2300      	movs	r3, #0
 80015c0:	603b      	str	r3, [r7, #0]
 80015c2:	4b09      	ldr	r3, [pc, #36]	; (80015e8 <HAL_MspInit+0x4c>)
 80015c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c6:	4a08      	ldr	r2, [pc, #32]	; (80015e8 <HAL_MspInit+0x4c>)
 80015c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015cc:	6413      	str	r3, [r2, #64]	; 0x40
 80015ce:	4b06      	ldr	r3, [pc, #24]	; (80015e8 <HAL_MspInit+0x4c>)
 80015d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015d6:	603b      	str	r3, [r7, #0]
 80015d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015da:	bf00      	nop
 80015dc:	370c      	adds	r7, #12
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr
 80015e6:	bf00      	nop
 80015e8:	40023800 	.word	0x40023800

080015ec <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b08a      	sub	sp, #40	; 0x28
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015f4:	f107 0314 	add.w	r3, r7, #20
 80015f8:	2200      	movs	r2, #0
 80015fa:	601a      	str	r2, [r3, #0]
 80015fc:	605a      	str	r2, [r3, #4]
 80015fe:	609a      	str	r2, [r3, #8]
 8001600:	60da      	str	r2, [r3, #12]
 8001602:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4a2f      	ldr	r2, [pc, #188]	; (80016c8 <HAL_ADC_MspInit+0xdc>)
 800160a:	4293      	cmp	r3, r2
 800160c:	d157      	bne.n	80016be <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800160e:	2300      	movs	r3, #0
 8001610:	613b      	str	r3, [r7, #16]
 8001612:	4b2e      	ldr	r3, [pc, #184]	; (80016cc <HAL_ADC_MspInit+0xe0>)
 8001614:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001616:	4a2d      	ldr	r2, [pc, #180]	; (80016cc <HAL_ADC_MspInit+0xe0>)
 8001618:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800161c:	6453      	str	r3, [r2, #68]	; 0x44
 800161e:	4b2b      	ldr	r3, [pc, #172]	; (80016cc <HAL_ADC_MspInit+0xe0>)
 8001620:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001622:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001626:	613b      	str	r3, [r7, #16]
 8001628:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800162a:	2300      	movs	r3, #0
 800162c:	60fb      	str	r3, [r7, #12]
 800162e:	4b27      	ldr	r3, [pc, #156]	; (80016cc <HAL_ADC_MspInit+0xe0>)
 8001630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001632:	4a26      	ldr	r2, [pc, #152]	; (80016cc <HAL_ADC_MspInit+0xe0>)
 8001634:	f043 0301 	orr.w	r3, r3, #1
 8001638:	6313      	str	r3, [r2, #48]	; 0x30
 800163a:	4b24      	ldr	r3, [pc, #144]	; (80016cc <HAL_ADC_MspInit+0xe0>)
 800163c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163e:	f003 0301 	and.w	r3, r3, #1
 8001642:	60fb      	str	r3, [r7, #12]
 8001644:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001646:	2301      	movs	r3, #1
 8001648:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800164a:	2303      	movs	r3, #3
 800164c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164e:	2300      	movs	r3, #0
 8001650:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001652:	f107 0314 	add.w	r3, r7, #20
 8001656:	4619      	mov	r1, r3
 8001658:	481d      	ldr	r0, [pc, #116]	; (80016d0 <HAL_ADC_MspInit+0xe4>)
 800165a:	f003 fdf9 	bl	8005250 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800165e:	4b1d      	ldr	r3, [pc, #116]	; (80016d4 <HAL_ADC_MspInit+0xe8>)
 8001660:	4a1d      	ldr	r2, [pc, #116]	; (80016d8 <HAL_ADC_MspInit+0xec>)
 8001662:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001664:	4b1b      	ldr	r3, [pc, #108]	; (80016d4 <HAL_ADC_MspInit+0xe8>)
 8001666:	2200      	movs	r2, #0
 8001668:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800166a:	4b1a      	ldr	r3, [pc, #104]	; (80016d4 <HAL_ADC_MspInit+0xe8>)
 800166c:	2200      	movs	r2, #0
 800166e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001670:	4b18      	ldr	r3, [pc, #96]	; (80016d4 <HAL_ADC_MspInit+0xe8>)
 8001672:	2200      	movs	r2, #0
 8001674:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001676:	4b17      	ldr	r3, [pc, #92]	; (80016d4 <HAL_ADC_MspInit+0xe8>)
 8001678:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800167c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800167e:	4b15      	ldr	r3, [pc, #84]	; (80016d4 <HAL_ADC_MspInit+0xe8>)
 8001680:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001684:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001686:	4b13      	ldr	r3, [pc, #76]	; (80016d4 <HAL_ADC_MspInit+0xe8>)
 8001688:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800168c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800168e:	4b11      	ldr	r3, [pc, #68]	; (80016d4 <HAL_ADC_MspInit+0xe8>)
 8001690:	2200      	movs	r2, #0
 8001692:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8001694:	4b0f      	ldr	r3, [pc, #60]	; (80016d4 <HAL_ADC_MspInit+0xe8>)
 8001696:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800169a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800169c:	4b0d      	ldr	r3, [pc, #52]	; (80016d4 <HAL_ADC_MspInit+0xe8>)
 800169e:	2200      	movs	r2, #0
 80016a0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80016a2:	480c      	ldr	r0, [pc, #48]	; (80016d4 <HAL_ADC_MspInit+0xe8>)
 80016a4:	f003 f9d2 	bl	8004a4c <HAL_DMA_Init>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d001      	beq.n	80016b2 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 80016ae:	f7ff fe8f 	bl	80013d0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	4a07      	ldr	r2, [pc, #28]	; (80016d4 <HAL_ADC_MspInit+0xe8>)
 80016b6:	639a      	str	r2, [r3, #56]	; 0x38
 80016b8:	4a06      	ldr	r2, [pc, #24]	; (80016d4 <HAL_ADC_MspInit+0xe8>)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80016be:	bf00      	nop
 80016c0:	3728      	adds	r7, #40	; 0x28
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	40012000 	.word	0x40012000
 80016cc:	40023800 	.word	0x40023800
 80016d0:	40020000 	.word	0x40020000
 80016d4:	200000ec 	.word	0x200000ec
 80016d8:	40026410 	.word	0x40026410

080016dc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b08a      	sub	sp, #40	; 0x28
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016e4:	f107 0314 	add.w	r3, r7, #20
 80016e8:	2200      	movs	r2, #0
 80016ea:	601a      	str	r2, [r3, #0]
 80016ec:	605a      	str	r2, [r3, #4]
 80016ee:	609a      	str	r2, [r3, #8]
 80016f0:	60da      	str	r2, [r3, #12]
 80016f2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a19      	ldr	r2, [pc, #100]	; (8001760 <HAL_SPI_MspInit+0x84>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d12b      	bne.n	8001756 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80016fe:	2300      	movs	r3, #0
 8001700:	613b      	str	r3, [r7, #16]
 8001702:	4b18      	ldr	r3, [pc, #96]	; (8001764 <HAL_SPI_MspInit+0x88>)
 8001704:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001706:	4a17      	ldr	r2, [pc, #92]	; (8001764 <HAL_SPI_MspInit+0x88>)
 8001708:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800170c:	6453      	str	r3, [r2, #68]	; 0x44
 800170e:	4b15      	ldr	r3, [pc, #84]	; (8001764 <HAL_SPI_MspInit+0x88>)
 8001710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001712:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001716:	613b      	str	r3, [r7, #16]
 8001718:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800171a:	2300      	movs	r3, #0
 800171c:	60fb      	str	r3, [r7, #12]
 800171e:	4b11      	ldr	r3, [pc, #68]	; (8001764 <HAL_SPI_MspInit+0x88>)
 8001720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001722:	4a10      	ldr	r2, [pc, #64]	; (8001764 <HAL_SPI_MspInit+0x88>)
 8001724:	f043 0302 	orr.w	r3, r3, #2
 8001728:	6313      	str	r3, [r2, #48]	; 0x30
 800172a:	4b0e      	ldr	r3, [pc, #56]	; (8001764 <HAL_SPI_MspInit+0x88>)
 800172c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172e:	f003 0302 	and.w	r3, r3, #2
 8001732:	60fb      	str	r3, [r7, #12]
 8001734:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8001736:	2328      	movs	r3, #40	; 0x28
 8001738:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800173a:	2302      	movs	r3, #2
 800173c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800173e:	2300      	movs	r3, #0
 8001740:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001742:	2303      	movs	r3, #3
 8001744:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001746:	2305      	movs	r3, #5
 8001748:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800174a:	f107 0314 	add.w	r3, r7, #20
 800174e:	4619      	mov	r1, r3
 8001750:	4805      	ldr	r0, [pc, #20]	; (8001768 <HAL_SPI_MspInit+0x8c>)
 8001752:	f003 fd7d 	bl	8005250 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001756:	bf00      	nop
 8001758:	3728      	adds	r7, #40	; 0x28
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	40013000 	.word	0x40013000
 8001764:	40023800 	.word	0x40023800
 8001768:	40020400 	.word	0x40020400

0800176c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800176c:	b480      	push	{r7}
 800176e:	b085      	sub	sp, #20
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a0b      	ldr	r2, [pc, #44]	; (80017a8 <HAL_TIM_Base_MspInit+0x3c>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d10d      	bne.n	800179a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800177e:	2300      	movs	r3, #0
 8001780:	60fb      	str	r3, [r7, #12]
 8001782:	4b0a      	ldr	r3, [pc, #40]	; (80017ac <HAL_TIM_Base_MspInit+0x40>)
 8001784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001786:	4a09      	ldr	r2, [pc, #36]	; (80017ac <HAL_TIM_Base_MspInit+0x40>)
 8001788:	f043 0302 	orr.w	r3, r3, #2
 800178c:	6413      	str	r3, [r2, #64]	; 0x40
 800178e:	4b07      	ldr	r3, [pc, #28]	; (80017ac <HAL_TIM_Base_MspInit+0x40>)
 8001790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001792:	f003 0302 	and.w	r3, r3, #2
 8001796:	60fb      	str	r3, [r7, #12]
 8001798:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800179a:	bf00      	nop
 800179c:	3714      	adds	r7, #20
 800179e:	46bd      	mov	sp, r7
 80017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a4:	4770      	bx	lr
 80017a6:	bf00      	nop
 80017a8:	40000400 	.word	0x40000400
 80017ac:	40023800 	.word	0x40023800

080017b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b08a      	sub	sp, #40	; 0x28
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017b8:	f107 0314 	add.w	r3, r7, #20
 80017bc:	2200      	movs	r2, #0
 80017be:	601a      	str	r2, [r3, #0]
 80017c0:	605a      	str	r2, [r3, #4]
 80017c2:	609a      	str	r2, [r3, #8]
 80017c4:	60da      	str	r2, [r3, #12]
 80017c6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4a21      	ldr	r2, [pc, #132]	; (8001854 <HAL_UART_MspInit+0xa4>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d13c      	bne.n	800184c <HAL_UART_MspInit+0x9c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80017d2:	2300      	movs	r3, #0
 80017d4:	613b      	str	r3, [r7, #16]
 80017d6:	4b20      	ldr	r3, [pc, #128]	; (8001858 <HAL_UART_MspInit+0xa8>)
 80017d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017da:	4a1f      	ldr	r2, [pc, #124]	; (8001858 <HAL_UART_MspInit+0xa8>)
 80017dc:	f043 0310 	orr.w	r3, r3, #16
 80017e0:	6453      	str	r3, [r2, #68]	; 0x44
 80017e2:	4b1d      	ldr	r3, [pc, #116]	; (8001858 <HAL_UART_MspInit+0xa8>)
 80017e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017e6:	f003 0310 	and.w	r3, r3, #16
 80017ea:	613b      	str	r3, [r7, #16]
 80017ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ee:	2300      	movs	r3, #0
 80017f0:	60fb      	str	r3, [r7, #12]
 80017f2:	4b19      	ldr	r3, [pc, #100]	; (8001858 <HAL_UART_MspInit+0xa8>)
 80017f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f6:	4a18      	ldr	r2, [pc, #96]	; (8001858 <HAL_UART_MspInit+0xa8>)
 80017f8:	f043 0301 	orr.w	r3, r3, #1
 80017fc:	6313      	str	r3, [r2, #48]	; 0x30
 80017fe:	4b16      	ldr	r3, [pc, #88]	; (8001858 <HAL_UART_MspInit+0xa8>)
 8001800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001802:	f003 0301 	and.w	r3, r3, #1
 8001806:	60fb      	str	r3, [r7, #12]
 8001808:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800180a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800180e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001810:	2302      	movs	r3, #2
 8001812:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001814:	2300      	movs	r3, #0
 8001816:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001818:	2303      	movs	r3, #3
 800181a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800181c:	2307      	movs	r3, #7
 800181e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001820:	f107 0314 	add.w	r3, r7, #20
 8001824:	4619      	mov	r1, r3
 8001826:	480d      	ldr	r0, [pc, #52]	; (800185c <HAL_UART_MspInit+0xac>)
 8001828:	f003 fd12 	bl	8005250 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800182c:	2200      	movs	r2, #0
 800182e:	2100      	movs	r1, #0
 8001830:	2025      	movs	r0, #37	; 0x25
 8001832:	f003 f8dc 	bl	80049ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001836:	2025      	movs	r0, #37	; 0x25
 8001838:	f003 f8f5 	bl	8004a26 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800183c:	2200      	movs	r2, #0
 800183e:	2100      	movs	r1, #0
 8001840:	2025      	movs	r0, #37	; 0x25
 8001842:	f003 f8d4 	bl	80049ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001846:	2025      	movs	r0, #37	; 0x25
 8001848:	f003 f8ed 	bl	8004a26 <HAL_NVIC_EnableIRQ>
  /* USER CODE END USART1_MspInit 1 */
  }

}
 800184c:	bf00      	nop
 800184e:	3728      	adds	r7, #40	; 0x28
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}
 8001854:	40011000 	.word	0x40011000
 8001858:	40023800 	.word	0x40023800
 800185c:	40020000 	.word	0x40020000

08001860 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001864:	e7fe      	b.n	8001864 <NMI_Handler+0x4>

08001866 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001866:	b480      	push	{r7}
 8001868:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800186a:	e7fe      	b.n	800186a <HardFault_Handler+0x4>

0800186c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001870:	e7fe      	b.n	8001870 <MemManage_Handler+0x4>

08001872 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001872:	b480      	push	{r7}
 8001874:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001876:	e7fe      	b.n	8001876 <BusFault_Handler+0x4>

08001878 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800187c:	e7fe      	b.n	800187c <UsageFault_Handler+0x4>

0800187e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800187e:	b480      	push	{r7}
 8001880:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001882:	bf00      	nop
 8001884:	46bd      	mov	sp, r7
 8001886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188a:	4770      	bx	lr

0800188c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001890:	bf00      	nop
 8001892:	46bd      	mov	sp, r7
 8001894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001898:	4770      	bx	lr

0800189a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800189a:	b480      	push	{r7}
 800189c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800189e:	bf00      	nop
 80018a0:	46bd      	mov	sp, r7
 80018a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a6:	4770      	bx	lr

080018a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018ac:	f002 fb84 	bl	8003fb8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018b0:	bf00      	nop
 80018b2:	bd80      	pop	{r7, pc}

080018b4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80018b8:	4802      	ldr	r0, [pc, #8]	; (80018c4 <USART1_IRQHandler+0x10>)
 80018ba:	f005 fc63 	bl	8007184 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80018be:	bf00      	nop
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	200001ec 	.word	0x200001ec

080018c8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80018cc:	4802      	ldr	r0, [pc, #8]	; (80018d8 <DMA2_Stream0_IRQHandler+0x10>)
 80018ce:	f003 fa55 	bl	8004d7c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80018d2:	bf00      	nop
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	200000ec 	.word	0x200000ec

080018dc <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_memtomem_dma2_stream1);
 80018e0:	4802      	ldr	r0, [pc, #8]	; (80018ec <DMA2_Stream1_IRQHandler+0x10>)
 80018e2:	f003 fa4b 	bl	8004d7c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80018e6:	bf00      	nop
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	20000230 	.word	0x20000230

080018f0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b086      	sub	sp, #24
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	60f8      	str	r0, [r7, #12]
 80018f8:	60b9      	str	r1, [r7, #8]
 80018fa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018fc:	2300      	movs	r3, #0
 80018fe:	617b      	str	r3, [r7, #20]
 8001900:	e00a      	b.n	8001918 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001902:	f3af 8000 	nop.w
 8001906:	4601      	mov	r1, r0
 8001908:	68bb      	ldr	r3, [r7, #8]
 800190a:	1c5a      	adds	r2, r3, #1
 800190c:	60ba      	str	r2, [r7, #8]
 800190e:	b2ca      	uxtb	r2, r1
 8001910:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001912:	697b      	ldr	r3, [r7, #20]
 8001914:	3301      	adds	r3, #1
 8001916:	617b      	str	r3, [r7, #20]
 8001918:	697a      	ldr	r2, [r7, #20]
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	429a      	cmp	r2, r3
 800191e:	dbf0      	blt.n	8001902 <_read+0x12>
	}

return len;
 8001920:	687b      	ldr	r3, [r7, #4]
}
 8001922:	4618      	mov	r0, r3
 8001924:	3718      	adds	r7, #24
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}

0800192a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800192a:	b580      	push	{r7, lr}
 800192c:	b086      	sub	sp, #24
 800192e:	af00      	add	r7, sp, #0
 8001930:	60f8      	str	r0, [r7, #12]
 8001932:	60b9      	str	r1, [r7, #8]
 8001934:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001936:	2300      	movs	r3, #0
 8001938:	617b      	str	r3, [r7, #20]
 800193a:	e009      	b.n	8001950 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800193c:	68bb      	ldr	r3, [r7, #8]
 800193e:	1c5a      	adds	r2, r3, #1
 8001940:	60ba      	str	r2, [r7, #8]
 8001942:	781b      	ldrb	r3, [r3, #0]
 8001944:	4618      	mov	r0, r3
 8001946:	f7ff fcbf 	bl	80012c8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800194a:	697b      	ldr	r3, [r7, #20]
 800194c:	3301      	adds	r3, #1
 800194e:	617b      	str	r3, [r7, #20]
 8001950:	697a      	ldr	r2, [r7, #20]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	429a      	cmp	r2, r3
 8001956:	dbf1      	blt.n	800193c <_write+0x12>
	}
	return len;
 8001958:	687b      	ldr	r3, [r7, #4]
}
 800195a:	4618      	mov	r0, r3
 800195c:	3718      	adds	r7, #24
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}

08001962 <_close>:

int _close(int file)
{
 8001962:	b480      	push	{r7}
 8001964:	b083      	sub	sp, #12
 8001966:	af00      	add	r7, sp, #0
 8001968:	6078      	str	r0, [r7, #4]
	return -1;
 800196a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800196e:	4618      	mov	r0, r3
 8001970:	370c      	adds	r7, #12
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr

0800197a <_fstat>:

int _fstat(int file, struct stat *st)
{
 800197a:	b480      	push	{r7}
 800197c:	b083      	sub	sp, #12
 800197e:	af00      	add	r7, sp, #0
 8001980:	6078      	str	r0, [r7, #4]
 8001982:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800198a:	605a      	str	r2, [r3, #4]
	return 0;
 800198c:	2300      	movs	r3, #0
}
 800198e:	4618      	mov	r0, r3
 8001990:	370c      	adds	r7, #12
 8001992:	46bd      	mov	sp, r7
 8001994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001998:	4770      	bx	lr

0800199a <_isatty>:

int _isatty(int file)
{
 800199a:	b480      	push	{r7}
 800199c:	b083      	sub	sp, #12
 800199e:	af00      	add	r7, sp, #0
 80019a0:	6078      	str	r0, [r7, #4]
	return 1;
 80019a2:	2301      	movs	r3, #1
}
 80019a4:	4618      	mov	r0, r3
 80019a6:	370c      	adds	r7, #12
 80019a8:	46bd      	mov	sp, r7
 80019aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ae:	4770      	bx	lr

080019b0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b085      	sub	sp, #20
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	60f8      	str	r0, [r7, #12]
 80019b8:	60b9      	str	r1, [r7, #8]
 80019ba:	607a      	str	r2, [r7, #4]
	return 0;
 80019bc:	2300      	movs	r3, #0
}
 80019be:	4618      	mov	r0, r3
 80019c0:	3714      	adds	r7, #20
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr
	...

080019cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b086      	sub	sp, #24
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019d4:	4a14      	ldr	r2, [pc, #80]	; (8001a28 <_sbrk+0x5c>)
 80019d6:	4b15      	ldr	r3, [pc, #84]	; (8001a2c <_sbrk+0x60>)
 80019d8:	1ad3      	subs	r3, r2, r3
 80019da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019e0:	4b13      	ldr	r3, [pc, #76]	; (8001a30 <_sbrk+0x64>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d102      	bne.n	80019ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019e8:	4b11      	ldr	r3, [pc, #68]	; (8001a30 <_sbrk+0x64>)
 80019ea:	4a12      	ldr	r2, [pc, #72]	; (8001a34 <_sbrk+0x68>)
 80019ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019ee:	4b10      	ldr	r3, [pc, #64]	; (8001a30 <_sbrk+0x64>)
 80019f0:	681a      	ldr	r2, [r3, #0]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	4413      	add	r3, r2
 80019f6:	693a      	ldr	r2, [r7, #16]
 80019f8:	429a      	cmp	r2, r3
 80019fa:	d207      	bcs.n	8001a0c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019fc:	f006 fe52 	bl	80086a4 <__errno>
 8001a00:	4603      	mov	r3, r0
 8001a02:	220c      	movs	r2, #12
 8001a04:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a06:	f04f 33ff 	mov.w	r3, #4294967295
 8001a0a:	e009      	b.n	8001a20 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a0c:	4b08      	ldr	r3, [pc, #32]	; (8001a30 <_sbrk+0x64>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a12:	4b07      	ldr	r3, [pc, #28]	; (8001a30 <_sbrk+0x64>)
 8001a14:	681a      	ldr	r2, [r3, #0]
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	4413      	add	r3, r2
 8001a1a:	4a05      	ldr	r2, [pc, #20]	; (8001a30 <_sbrk+0x64>)
 8001a1c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a1e:	68fb      	ldr	r3, [r7, #12]
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	3718      	adds	r7, #24
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}
 8001a28:	20020000 	.word	0x20020000
 8001a2c:	00000400 	.word	0x00000400
 8001a30:	200004c4 	.word	0x200004c4
 8001a34:	20000688 	.word	0x20000688

08001a38 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a3c:	4b06      	ldr	r3, [pc, #24]	; (8001a58 <SystemInit+0x20>)
 8001a3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a42:	4a05      	ldr	r2, [pc, #20]	; (8001a58 <SystemInit+0x20>)
 8001a44:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a48:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a4c:	bf00      	nop
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr
 8001a56:	bf00      	nop
 8001a58:	e000ed00 	.word	0xe000ed00

08001a5c <autoCal>:

uint8_t fast = 1;

// Vertical autocalibration
void autoCal()
{
 8001a5c:	b5b0      	push	{r4, r5, r7, lr}
 8001a5e:	b086      	sub	sp, #24
 8001a60:	af00      	add	r7, sp, #0
    clearDisplay();
 8001a62:	f001 fbd1 	bl	8003208 <clearDisplay>
    setCursor(0, 0);
 8001a66:	2100      	movs	r1, #0
 8001a68:	2000      	movs	r0, #0
 8001a6a:	f001 fd0b 	bl	8003484 <setCursor>
    setTextColor(BLACK, WHITE);
 8001a6e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001a72:	2000      	movs	r0, #0
 8001a74:	f001 fd1e 	bl	80034b4 <setTextColor>
    printString("Autocalibration\n\n");
 8001a78:	484f      	ldr	r0, [pc, #316]	; (8001bb8 <autoCal+0x15c>)
 8001a7a:	f001 fdab 	bl	80035d4 <printString>
    setTextColor(WHITE, BLACK);
 8001a7e:	2100      	movs	r1, #0
 8001a80:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001a84:	f001 fd16 	bl	80034b4 <setTextColor>
    printString("Couple input to ground\nThen press Select");
 8001a88:	484c      	ldr	r0, [pc, #304]	; (8001bbc <autoCal+0x160>)
 8001a8a:	f001 fda3 	bl	80035d4 <printString>
    flushDisplay();
 8001a8e:	f001 fed5 	bl	800383c <flushDisplay>
    while (HAL_GPIO_ReadPin(BTN2_GPIO_Port, BTN2_Pin))
 8001a92:	bf00      	nop
 8001a94:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a98:	4849      	ldr	r0, [pc, #292]	; (8001bc0 <autoCal+0x164>)
 8001a9a:	f003 fd75 	bl	8005588 <HAL_GPIO_ReadPin>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d1f7      	bne.n	8001a94 <autoCal+0x38>
        ;
    HAL_Delay(150);
 8001aa4:	2096      	movs	r0, #150	; 0x96
 8001aa6:	f002 faa7 	bl	8003ff8 <HAL_Delay>

    sample();
 8001aaa:	f7ff fcf1 	bl	8001490 <sample>

    clearDisplay();
 8001aae:	f001 fbab 	bl	8003208 <clearDisplay>
    setCursor(0, 0);
 8001ab2:	2100      	movs	r1, #0
 8001ab4:	2000      	movs	r0, #0
 8001ab6:	f001 fce5 	bl	8003484 <setCursor>
    setTextColor(BLACK, WHITE);
 8001aba:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001abe:	2000      	movs	r0, #0
 8001ac0:	f001 fcf8 	bl	80034b4 <setTextColor>
    printString("Autocalibration\n\n");
 8001ac4:	483c      	ldr	r0, [pc, #240]	; (8001bb8 <autoCal+0x15c>)
 8001ac6:	f001 fd85 	bl	80035d4 <printString>
    setTextColor(WHITE, BLACK);
 8001aca:	2100      	movs	r1, #0
 8001acc:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001ad0:	f001 fcf0 	bl	80034b4 <setTextColor>

    uint32_t adcAvg = 0;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	617b      	str	r3, [r7, #20]
    for (int i = 0; i < BUFFER_LEN; i++)
 8001ad8:	2300      	movs	r3, #0
 8001ada:	613b      	str	r3, [r7, #16]
 8001adc:	e00a      	b.n	8001af4 <autoCal+0x98>
        adcAvg += adcBuf[i];
 8001ade:	4a39      	ldr	r2, [pc, #228]	; (8001bc4 <autoCal+0x168>)
 8001ae0:	693b      	ldr	r3, [r7, #16]
 8001ae2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001ae6:	461a      	mov	r2, r3
 8001ae8:	697b      	ldr	r3, [r7, #20]
 8001aea:	4413      	add	r3, r2
 8001aec:	617b      	str	r3, [r7, #20]
    for (int i = 0; i < BUFFER_LEN; i++)
 8001aee:	693b      	ldr	r3, [r7, #16]
 8001af0:	3301      	adds	r3, #1
 8001af2:	613b      	str	r3, [r7, #16]
 8001af4:	693b      	ldr	r3, [r7, #16]
 8001af6:	2bff      	cmp	r3, #255	; 0xff
 8001af8:	ddf1      	ble.n	8001ade <autoCal+0x82>
    adcAvg /= BUFFER_LEN;
 8001afa:	697b      	ldr	r3, [r7, #20]
 8001afc:	0a1b      	lsrs	r3, r3, #8
 8001afe:	617b      	str	r3, [r7, #20]

    offsetVoltage = adcToVoltage(adcAvg);
 8001b00:	697b      	ldr	r3, [r7, #20]
 8001b02:	b29b      	uxth	r3, r3
 8001b04:	4618      	mov	r0, r3
 8001b06:	f001 f817 	bl	8002b38 <adcToVoltage>
 8001b0a:	eef0 7a40 	vmov.f32	s15, s0
 8001b0e:	4b2e      	ldr	r3, [pc, #184]	; (8001bc8 <autoCal+0x16c>)
 8001b10:	edc3 7a00 	vstr	s15, [r3]

    char st[15];
    printFloat(offsetVoltage, 2, st);
 8001b14:	4b2c      	ldr	r3, [pc, #176]	; (8001bc8 <autoCal+0x16c>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f7fe fd15 	bl	8000548 <__aeabi_f2d>
 8001b1e:	4604      	mov	r4, r0
 8001b20:	460d      	mov	r5, r1
 8001b22:	463b      	mov	r3, r7
 8001b24:	4619      	mov	r1, r3
 8001b26:	2002      	movs	r0, #2
 8001b28:	ec45 4b10 	vmov	d0, r4, r5
 8001b2c:	f7ff fbda 	bl	80012e4 <printFloat>
    printf("Offset voltage: %sV\n", st);
 8001b30:	463b      	mov	r3, r7
 8001b32:	4619      	mov	r1, r3
 8001b34:	4825      	ldr	r0, [pc, #148]	; (8001bcc <autoCal+0x170>)
 8001b36:	f006 fbf1 	bl	800831c <iprintf>

    printFloat(frontendVoltage(0), 2, st);
 8001b3a:	2000      	movs	r0, #0
 8001b3c:	f000 ffb8 	bl	8002ab0 <frontendVoltage>
 8001b40:	ee10 3a10 	vmov	r3, s0
 8001b44:	4618      	mov	r0, r3
 8001b46:	f7fe fcff 	bl	8000548 <__aeabi_f2d>
 8001b4a:	4604      	mov	r4, r0
 8001b4c:	460d      	mov	r5, r1
 8001b4e:	463b      	mov	r3, r7
 8001b50:	4619      	mov	r1, r3
 8001b52:	2002      	movs	r0, #2
 8001b54:	ec45 4b10 	vmov	d0, r4, r5
 8001b58:	f7ff fbc4 	bl	80012e4 <printFloat>
    printf("Min input voltage: %sV\n", st);
 8001b5c:	463b      	mov	r3, r7
 8001b5e:	4619      	mov	r1, r3
 8001b60:	481b      	ldr	r0, [pc, #108]	; (8001bd0 <autoCal+0x174>)
 8001b62:	f006 fbdb 	bl	800831c <iprintf>

    printFloat(frontendVoltage(4096), 2, st);
 8001b66:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001b6a:	f000 ffa1 	bl	8002ab0 <frontendVoltage>
 8001b6e:	ee10 3a10 	vmov	r3, s0
 8001b72:	4618      	mov	r0, r3
 8001b74:	f7fe fce8 	bl	8000548 <__aeabi_f2d>
 8001b78:	4604      	mov	r4, r0
 8001b7a:	460d      	mov	r5, r1
 8001b7c:	463b      	mov	r3, r7
 8001b7e:	4619      	mov	r1, r3
 8001b80:	2002      	movs	r0, #2
 8001b82:	ec45 4b10 	vmov	d0, r4, r5
 8001b86:	f7ff fbad 	bl	80012e4 <printFloat>
    printf("Max input voltage: %sV\n", st);
 8001b8a:	463b      	mov	r3, r7
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	4811      	ldr	r0, [pc, #68]	; (8001bd4 <autoCal+0x178>)
 8001b90:	f006 fbc4 	bl	800831c <iprintf>

    flushDisplay();
 8001b94:	f001 fe52 	bl	800383c <flushDisplay>

    while (HAL_GPIO_ReadPin(BTN2_GPIO_Port, BTN2_Pin))
 8001b98:	bf00      	nop
 8001b9a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b9e:	4808      	ldr	r0, [pc, #32]	; (8001bc0 <autoCal+0x164>)
 8001ba0:	f003 fcf2 	bl	8005588 <HAL_GPIO_ReadPin>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d1f7      	bne.n	8001b9a <autoCal+0x13e>
        ;
    HAL_Delay(150);
 8001baa:	2096      	movs	r0, #150	; 0x96
 8001bac:	f002 fa24 	bl	8003ff8 <HAL_Delay>
}
 8001bb0:	bf00      	nop
 8001bb2:	3718      	adds	r7, #24
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bdb0      	pop	{r4, r5, r7, pc}
 8001bb8:	08009338 	.word	0x08009338
 8001bbc:	0800934c 	.word	0x0800934c
 8001bc0:	40020400 	.word	0x40020400
 8001bc4:	20000290 	.word	0x20000290
 8001bc8:	20000014 	.word	0x20000014
 8001bcc:	08009378 	.word	0x08009378
 8001bd0:	08009390 	.word	0x08009390
 8001bd4:	080093a8 	.word	0x080093a8

08001bd8 <splash>:

// A little startup splash screen
void splash()
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b082      	sub	sp, #8
 8001bdc:	af02      	add	r7, sp, #8
    drawBitmap(0, 0, 160, 128, logo);
 8001bde:	4b0e      	ldr	r3, [pc, #56]	; (8001c18 <splash+0x40>)
 8001be0:	9300      	str	r3, [sp, #0]
 8001be2:	2380      	movs	r3, #128	; 0x80
 8001be4:	22a0      	movs	r2, #160	; 0xa0
 8001be6:	2100      	movs	r1, #0
 8001be8:	2000      	movs	r0, #0
 8001bea:	f001 fa95 	bl	8003118 <drawBitmap>
    setTextColor(BLACK, WHITE);
 8001bee:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001bf2:	2000      	movs	r0, #0
 8001bf4:	f001 fc5e 	bl	80034b4 <setTextColor>

    printString(" FW compiled: ");
 8001bf8:	4808      	ldr	r0, [pc, #32]	; (8001c1c <splash+0x44>)
 8001bfa:	f001 fceb 	bl	80035d4 <printString>
    printString(__DATE__);
 8001bfe:	4808      	ldr	r0, [pc, #32]	; (8001c20 <splash+0x48>)
 8001c00:	f001 fce8 	bl	80035d4 <printString>
    flushDisplay();
 8001c04:	f001 fe1a 	bl	800383c <flushDisplay>
    HAL_Delay(2500);
 8001c08:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8001c0c:	f002 f9f4 	bl	8003ff8 <HAL_Delay>
}
 8001c10:	bf00      	nop
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	080095b0 	.word	0x080095b0
 8001c1c:	080093c0 	.word	0x080093c0
 8001c20:	080093d0 	.word	0x080093d0

08001c24 <ui>:

// The main UI function
void ui()
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	af00      	add	r7, sp, #0
    clearDisplay();
 8001c28:	f001 faee 	bl	8003208 <clearDisplay>

    if (!HAL_GPIO_ReadPin(BTN1_GPIO_Port, BTN1_Pin) && !HAL_GPIO_ReadPin(BTN3_GPIO_Port, BTN3_Pin))
 8001c2c:	2180      	movs	r1, #128	; 0x80
 8001c2e:	4826      	ldr	r0, [pc, #152]	; (8001cc8 <ui+0xa4>)
 8001c30:	f003 fcaa 	bl	8005588 <HAL_GPIO_ReadPin>
 8001c34:	4603      	mov	r3, r0
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d114      	bne.n	8001c64 <ui+0x40>
 8001c3a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001c3e:	4822      	ldr	r0, [pc, #136]	; (8001cc8 <ui+0xa4>)
 8001c40:	f003 fca2 	bl	8005588 <HAL_GPIO_ReadPin>
 8001c44:	4603      	mov	r3, r0
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d10c      	bne.n	8001c64 <ui+0x40>
    {
        autocalFlag = 1;
 8001c4a:	4b20      	ldr	r3, [pc, #128]	; (8001ccc <ui+0xa8>)
 8001c4c:	2201      	movs	r2, #1
 8001c4e:	701a      	strb	r2, [r3, #0]
        if (!HAL_GPIO_ReadPin(BTN2_GPIO_Port, BTN2_Pin)) // Reset if all 3 buttons are pressed at the same time
 8001c50:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c54:	481c      	ldr	r0, [pc, #112]	; (8001cc8 <ui+0xa4>)
 8001c56:	f003 fc97 	bl	8005588 <HAL_GPIO_ReadPin>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d101      	bne.n	8001c64 <ui+0x40>
            HAL_NVIC_SystemReset();
 8001c60:	f002 feef 	bl	8004a42 <HAL_NVIC_SystemReset>
    }

    if (autocalFlag) // Check if we need to calibrate
 8001c64:	4b19      	ldr	r3, [pc, #100]	; (8001ccc <ui+0xa8>)
 8001c66:	781b      	ldrb	r3, [r3, #0]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d004      	beq.n	8001c76 <ui+0x52>
    {
        autoCal();
 8001c6c:	f7ff fef6 	bl	8001a5c <autoCal>
        autocalFlag = 0;
 8001c70:	4b16      	ldr	r3, [pc, #88]	; (8001ccc <ui+0xa8>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	701a      	strb	r2, [r3, #0]
    }

    traceScreen(); // Draw the wave
 8001c76:	f001 f935 	bl	8002ee4 <traceScreen>
    sideInfo();    // Print info on the side
 8001c7a:	f000 f82b 	bl	8001cd4 <sideInfo>
    settingsBar();
 8001c7e:	f000 f94b 	bl	8001f18 <settingsBar>

    if (outputFlag)
 8001c82:	4b13      	ldr	r3, [pc, #76]	; (8001cd0 <ui+0xac>)
 8001c84:	781b      	ldrb	r3, [r3, #0]
 8001c86:	b2db      	uxtb	r3, r3
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d018      	beq.n	8001cbe <ui+0x9a>
    {
        if (outputFlag < 3) // If the computer requested data, we send it. This flag is modified in the USB receive handler in usbd_cdc_if.c and in the UART receive handler in scope.c
 8001c8c:	4b10      	ldr	r3, [pc, #64]	; (8001cd0 <ui+0xac>)
 8001c8e:	781b      	ldrb	r3, [r3, #0]
 8001c90:	b2db      	uxtb	r3, r3
 8001c92:	2b02      	cmp	r3, #2
 8001c94:	d809      	bhi.n	8001caa <ui+0x86>
        {
            outputCSV(outputFlag);
 8001c96:	4b0e      	ldr	r3, [pc, #56]	; (8001cd0 <ui+0xac>)
 8001c98:	781b      	ldrb	r3, [r3, #0]
 8001c9a:	b2db      	uxtb	r3, r3
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f000 fc85 	bl	80025ac <outputCSV>
            outputFlag = 0;
 8001ca2:	4b0b      	ldr	r3, [pc, #44]	; (8001cd0 <ui+0xac>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	701a      	strb	r2, [r3, #0]
 8001ca8:	e009      	b.n	8001cbe <ui+0x9a>
        }
        else
        {
            outputTek(outputFlag - 2);
 8001caa:	4b09      	ldr	r3, [pc, #36]	; (8001cd0 <ui+0xac>)
 8001cac:	781b      	ldrb	r3, [r3, #0]
 8001cae:	b2db      	uxtb	r3, r3
 8001cb0:	3b02      	subs	r3, #2
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f000 fdca 	bl	800284c <outputTek>
            outputFlag = 0;
 8001cb8:	4b05      	ldr	r3, [pc, #20]	; (8001cd0 <ui+0xac>)
 8001cba:	2200      	movs	r2, #0
 8001cbc:	701a      	strb	r2, [r3, #0]
        }
    }

    flushDisplay();
 8001cbe:	f001 fdbd 	bl	800383c <flushDisplay>
}
 8001cc2:	bf00      	nop
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	40020400 	.word	0x40020400
 8001ccc:	200004c9 	.word	0x200004c9
 8001cd0:	200004c8 	.word	0x200004c8

08001cd4 <sideInfo>:

// This function displays voltage info in the side menu
void sideInfo()
{
 8001cd4:	b5b0      	push	{r4, r5, r7, lr}
 8001cd6:	b084      	sub	sp, #16
 8001cd8:	af00      	add	r7, sp, #0
    char st[15];
    printFloat(minVoltage, 1, st);
 8001cda:	4b7e      	ldr	r3, [pc, #504]	; (8001ed4 <sideInfo+0x200>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f7fe fc32 	bl	8000548 <__aeabi_f2d>
 8001ce4:	4604      	mov	r4, r0
 8001ce6:	460d      	mov	r5, r1
 8001ce8:	463b      	mov	r3, r7
 8001cea:	4619      	mov	r1, r3
 8001cec:	2001      	movs	r0, #1
 8001cee:	ec45 4b10 	vmov	d0, r4, r5
 8001cf2:	f7ff faf7 	bl	80012e4 <printFloat>
    setTextColor(BLACK, WHITE);
 8001cf6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001cfa:	2000      	movs	r0, #0
 8001cfc:	f001 fbda 	bl	80034b4 <setTextColor>
    setCursor(MENUPOS, 1);
 8001d00:	2101      	movs	r1, #1
 8001d02:	2086      	movs	r0, #134	; 0x86
 8001d04:	f001 fbbe 	bl	8003484 <setCursor>
    printString("Min:");
 8001d08:	4873      	ldr	r0, [pc, #460]	; (8001ed8 <sideInfo+0x204>)
 8001d0a:	f001 fc63 	bl	80035d4 <printString>
    setTextColor(WHITE, BLACK);
 8001d0e:	2100      	movs	r1, #0
 8001d10:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001d14:	f001 fbce 	bl	80034b4 <setTextColor>
    setCursor(MENUPOS, 10);
 8001d18:	210a      	movs	r1, #10
 8001d1a:	2086      	movs	r0, #134	; 0x86
 8001d1c:	f001 fbb2 	bl	8003484 <setCursor>
    printf("%s\n", st);
 8001d20:	463b      	mov	r3, r7
 8001d22:	4618      	mov	r0, r3
 8001d24:	f006 fb60 	bl	80083e8 <puts>

    printFloat(maxVoltage, 1, st);
 8001d28:	4b6c      	ldr	r3, [pc, #432]	; (8001edc <sideInfo+0x208>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f7fe fc0b 	bl	8000548 <__aeabi_f2d>
 8001d32:	4604      	mov	r4, r0
 8001d34:	460d      	mov	r5, r1
 8001d36:	463b      	mov	r3, r7
 8001d38:	4619      	mov	r1, r3
 8001d3a:	2001      	movs	r0, #1
 8001d3c:	ec45 4b10 	vmov	d0, r4, r5
 8001d40:	f7ff fad0 	bl	80012e4 <printFloat>
    setTextColor(BLACK, WHITE);
 8001d44:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001d48:	2000      	movs	r0, #0
 8001d4a:	f001 fbb3 	bl	80034b4 <setTextColor>
    setCursor(MENUPOS, 21);
 8001d4e:	2115      	movs	r1, #21
 8001d50:	2086      	movs	r0, #134	; 0x86
 8001d52:	f001 fb97 	bl	8003484 <setCursor>
    printString("Max:");
 8001d56:	4862      	ldr	r0, [pc, #392]	; (8001ee0 <sideInfo+0x20c>)
 8001d58:	f001 fc3c 	bl	80035d4 <printString>
    setTextColor(WHITE, BLACK);
 8001d5c:	2100      	movs	r1, #0
 8001d5e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001d62:	f001 fba7 	bl	80034b4 <setTextColor>
    setCursor(MENUPOS, 30);
 8001d66:	211e      	movs	r1, #30
 8001d68:	2086      	movs	r0, #134	; 0x86
 8001d6a:	f001 fb8b 	bl	8003484 <setCursor>
    printf("%s\n", st);
 8001d6e:	463b      	mov	r3, r7
 8001d70:	4618      	mov	r0, r3
 8001d72:	f006 fb39 	bl	80083e8 <puts>

    setTextColor(BLACK, WHITE);
 8001d76:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001d7a:	2000      	movs	r0, #0
 8001d7c:	f001 fb9a 	bl	80034b4 <setTextColor>
    setCursor(MENUPOS, 41);
 8001d80:	2129      	movs	r1, #41	; 0x29
 8001d82:	2086      	movs	r0, #134	; 0x86
 8001d84:	f001 fb7e 	bl	8003484 <setCursor>
    printString("Ppk:");
 8001d88:	4856      	ldr	r0, [pc, #344]	; (8001ee4 <sideInfo+0x210>)
 8001d8a:	f001 fc23 	bl	80035d4 <printString>
    setTextColor(WHITE, BLACK);
 8001d8e:	2100      	movs	r1, #0
 8001d90:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001d94:	f001 fb8e 	bl	80034b4 <setTextColor>
    setCursor(MENUPOS, 51);
 8001d98:	2133      	movs	r1, #51	; 0x33
 8001d9a:	2086      	movs	r0, #134	; 0x86
 8001d9c:	f001 fb72 	bl	8003484 <setCursor>
    printFloat(maxVoltage - minVoltage, 1, st);
 8001da0:	4b4e      	ldr	r3, [pc, #312]	; (8001edc <sideInfo+0x208>)
 8001da2:	ed93 7a00 	vldr	s14, [r3]
 8001da6:	4b4b      	ldr	r3, [pc, #300]	; (8001ed4 <sideInfo+0x200>)
 8001da8:	edd3 7a00 	vldr	s15, [r3]
 8001dac:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001db0:	ee17 0a90 	vmov	r0, s15
 8001db4:	f7fe fbc8 	bl	8000548 <__aeabi_f2d>
 8001db8:	4604      	mov	r4, r0
 8001dba:	460d      	mov	r5, r1
 8001dbc:	463b      	mov	r3, r7
 8001dbe:	4619      	mov	r1, r3
 8001dc0:	2001      	movs	r0, #1
 8001dc2:	ec45 4b10 	vmov	d0, r4, r5
 8001dc6:	f7ff fa8d 	bl	80012e4 <printFloat>
    printf("%sV\n", st);
 8001dca:	463b      	mov	r3, r7
 8001dcc:	4619      	mov	r1, r3
 8001dce:	4846      	ldr	r0, [pc, #280]	; (8001ee8 <sideInfo+0x214>)
 8001dd0:	f006 faa4 	bl	800831c <iprintf>

    setTextColor(BLACK, WHITE);
 8001dd4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001dd8:	2000      	movs	r0, #0
 8001dda:	f001 fb6b 	bl	80034b4 <setTextColor>
    setCursor(MENUPOS, 61);
 8001dde:	213d      	movs	r1, #61	; 0x3d
 8001de0:	2086      	movs	r0, #134	; 0x86
 8001de2:	f001 fb4f 	bl	8003484 <setCursor>
    printString("Freq");
 8001de6:	4841      	ldr	r0, [pc, #260]	; (8001eec <sideInfo+0x218>)
 8001de8:	f001 fbf4 	bl	80035d4 <printString>
    setTextColor(WHITE, BLACK);
 8001dec:	2100      	movs	r1, #0
 8001dee:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001df2:	f001 fb5f 	bl	80034b4 <setTextColor>
    setCursor(MENUPOS, 71);
 8001df6:	2147      	movs	r1, #71	; 0x47
 8001df8:	2086      	movs	r0, #134	; 0x86
 8001dfa:	f001 fb43 	bl	8003484 <setCursor>

    if (measuredFreq >= 1000)
 8001dfe:	4b3c      	ldr	r3, [pc, #240]	; (8001ef0 <sideInfo+0x21c>)
 8001e00:	edd3 7a00 	vldr	s15, [r3]
 8001e04:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8001ef4 <sideInfo+0x220>
 8001e08:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e10:	db3b      	blt.n	8001e8a <sideInfo+0x1b6>
    {
        if (measuredFreq >= 100000)
 8001e12:	4b37      	ldr	r3, [pc, #220]	; (8001ef0 <sideInfo+0x21c>)
 8001e14:	edd3 7a00 	vldr	s15, [r3]
 8001e18:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8001ef8 <sideInfo+0x224>
 8001e1c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e24:	db11      	blt.n	8001e4a <sideInfo+0x176>
            printf("%d\n", (int)measuredFreq / 1000);
 8001e26:	4b32      	ldr	r3, [pc, #200]	; (8001ef0 <sideInfo+0x21c>)
 8001e28:	edd3 7a00 	vldr	s15, [r3]
 8001e2c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e30:	ee17 1a90 	vmov	r1, s15
 8001e34:	4b31      	ldr	r3, [pc, #196]	; (8001efc <sideInfo+0x228>)
 8001e36:	fb83 2301 	smull	r2, r3, r3, r1
 8001e3a:	119a      	asrs	r2, r3, #6
 8001e3c:	17cb      	asrs	r3, r1, #31
 8001e3e:	1ad3      	subs	r3, r2, r3
 8001e40:	4619      	mov	r1, r3
 8001e42:	482f      	ldr	r0, [pc, #188]	; (8001f00 <sideInfo+0x22c>)
 8001e44:	f006 fa6a 	bl	800831c <iprintf>
 8001e48:	e017      	b.n	8001e7a <sideInfo+0x1a6>
        else
        {
            printFloat(measuredFreq / 1000, 1, st);
 8001e4a:	4b29      	ldr	r3, [pc, #164]	; (8001ef0 <sideInfo+0x21c>)
 8001e4c:	edd3 7a00 	vldr	s15, [r3]
 8001e50:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8001ef4 <sideInfo+0x220>
 8001e54:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001e58:	ee16 0a90 	vmov	r0, s13
 8001e5c:	f7fe fb74 	bl	8000548 <__aeabi_f2d>
 8001e60:	4604      	mov	r4, r0
 8001e62:	460d      	mov	r5, r1
 8001e64:	463b      	mov	r3, r7
 8001e66:	4619      	mov	r1, r3
 8001e68:	2001      	movs	r0, #1
 8001e6a:	ec45 4b10 	vmov	d0, r4, r5
 8001e6e:	f7ff fa39 	bl	80012e4 <printFloat>
            printString(st);
 8001e72:	463b      	mov	r3, r7
 8001e74:	4618      	mov	r0, r3
 8001e76:	f001 fbad 	bl	80035d4 <printString>
        }
        setCursor(MENUPOS, 81);
 8001e7a:	2151      	movs	r1, #81	; 0x51
 8001e7c:	2086      	movs	r0, #134	; 0x86
 8001e7e:	f001 fb01 	bl	8003484 <setCursor>
        printString("kHz");
 8001e82:	4820      	ldr	r0, [pc, #128]	; (8001f04 <sideInfo+0x230>)
 8001e84:	f001 fba6 	bl	80035d4 <printString>
 8001e88:	e010      	b.n	8001eac <sideInfo+0x1d8>
    }
    else
    {
        printf("%d\n", (int)measuredFreq);
 8001e8a:	4b19      	ldr	r3, [pc, #100]	; (8001ef0 <sideInfo+0x21c>)
 8001e8c:	edd3 7a00 	vldr	s15, [r3]
 8001e90:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e94:	ee17 1a90 	vmov	r1, s15
 8001e98:	4819      	ldr	r0, [pc, #100]	; (8001f00 <sideInfo+0x22c>)
 8001e9a:	f006 fa3f 	bl	800831c <iprintf>
        setCursor(MENUPOS, 81);
 8001e9e:	2151      	movs	r1, #81	; 0x51
 8001ea0:	2086      	movs	r0, #134	; 0x86
 8001ea2:	f001 faef 	bl	8003484 <setCursor>
        printString("Hz");
 8001ea6:	4818      	ldr	r0, [pc, #96]	; (8001f08 <sideInfo+0x234>)
 8001ea8:	f001 fb94 	bl	80035d4 <printString>
    }

    setCursor(MENUPOS, 91);
 8001eac:	215b      	movs	r1, #91	; 0x5b
 8001eae:	2086      	movs	r0, #134	; 0x86
 8001eb0:	f001 fae8 	bl	8003484 <setCursor>
    if (trigged)
 8001eb4:	4b15      	ldr	r3, [pc, #84]	; (8001f0c <sideInfo+0x238>)
 8001eb6:	781b      	ldrb	r3, [r3, #0]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d007      	beq.n	8001ecc <sideInfo+0x1f8>
    {
        setTextColor(ST7735_GREEN, BLACK);
 8001ebc:	2100      	movs	r1, #0
 8001ebe:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 8001ec2:	f001 faf7 	bl	80034b4 <setTextColor>
        printString("Trig");
 8001ec6:	4812      	ldr	r0, [pc, #72]	; (8001f10 <sideInfo+0x23c>)
 8001ec8:	f001 fb84 	bl	80035d4 <printString>
    }
}
 8001ecc:	bf00      	nop
 8001ece:	3710      	adds	r7, #16
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bdb0      	pop	{r4, r5, r7, pc}
 8001ed4:	200004a8 	.word	0x200004a8
 8001ed8:	080093dc 	.word	0x080093dc
 8001edc:	200004a4 	.word	0x200004a4
 8001ee0:	080093e4 	.word	0x080093e4
 8001ee4:	080093ec 	.word	0x080093ec
 8001ee8:	080093f4 	.word	0x080093f4
 8001eec:	080093fc 	.word	0x080093fc
 8001ef0:	200004ac 	.word	0x200004ac
 8001ef4:	447a0000 	.word	0x447a0000
 8001ef8:	47c35000 	.word	0x47c35000
 8001efc:	10624dd3 	.word	0x10624dd3
 8001f00:	08009404 	.word	0x08009404
 8001f04:	08009408 	.word	0x08009408
 8001f08:	0800940c 	.word	0x0800940c
 8001f0c:	20000490 	.word	0x20000490
 8001f10:	08009410 	.word	0x08009410
 8001f14:	00000000 	.word	0x00000000

08001f18 <settingsBar>:

// This function adjusts the settings
void settingsBar()
{
 8001f18:	b5b0      	push	{r4, r5, r7, lr}
 8001f1a:	b084      	sub	sp, #16
 8001f1c:	af00      	add	r7, sp, #0
    extern uint8_t topClip, bottomClip;
    static uint8_t sel = 0;
    char st[10];

    // Print top row
    if (topClip || bottomClip)
 8001f1e:	4bbb      	ldr	r3, [pc, #748]	; (800220c <settingsBar+0x2f4>)
 8001f20:	781b      	ldrb	r3, [r3, #0]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d103      	bne.n	8001f2e <settingsBar+0x16>
 8001f26:	4bba      	ldr	r3, [pc, #744]	; (8002210 <settingsBar+0x2f8>)
 8001f28:	781b      	ldrb	r3, [r3, #0]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d005      	beq.n	8001f3a <settingsBar+0x22>
        setTextColor(ST7735_RED, BLACK);
 8001f2e:	2100      	movs	r1, #0
 8001f30:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8001f34:	f001 fabe 	bl	80034b4 <setTextColor>
 8001f38:	e004      	b.n	8001f44 <settingsBar+0x2c>
    else
        setTextColor(WHITE, BLACK);
 8001f3a:	2100      	movs	r1, #0
 8001f3c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001f40:	f001 fab8 	bl	80034b4 <setTextColor>
    setCursor(0, 105);
 8001f44:	2169      	movs	r1, #105	; 0x69
 8001f46:	2000      	movs	r0, #0
 8001f48:	f001 fa9c 	bl	8003484 <setCursor>
    printString("Vdiv");
 8001f4c:	48b1      	ldr	r0, [pc, #708]	; (8002214 <settingsBar+0x2fc>)
 8001f4e:	f001 fb41 	bl	80035d4 <printString>

    setTextColor(WHITE, BLACK);
 8001f52:	2100      	movs	r1, #0
 8001f54:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001f58:	f001 faac 	bl	80034b4 <setTextColor>
    setCursor(30, 105);
 8001f5c:	2169      	movs	r1, #105	; 0x69
 8001f5e:	201e      	movs	r0, #30
 8001f60:	f001 fa90 	bl	8003484 <setCursor>
    printString("Trig");
 8001f64:	48ac      	ldr	r0, [pc, #688]	; (8002218 <settingsBar+0x300>)
 8001f66:	f001 fb35 	bl	80035d4 <printString>

    setCursor(60, 105);
 8001f6a:	2169      	movs	r1, #105	; 0x69
 8001f6c:	203c      	movs	r0, #60	; 0x3c
 8001f6e:	f001 fa89 	bl	8003484 <setCursor>
    printString("Slope");
 8001f72:	48aa      	ldr	r0, [pc, #680]	; (800221c <settingsBar+0x304>)
 8001f74:	f001 fb2e 	bl	80035d4 <printString>

    setCursor(95, 105);
 8001f78:	2169      	movs	r1, #105	; 0x69
 8001f7a:	205f      	movs	r0, #95	; 0x5f
 8001f7c:	f001 fa82 	bl	8003484 <setCursor>
    printString("Atten");
 8001f80:	48a7      	ldr	r0, [pc, #668]	; (8002220 <settingsBar+0x308>)
 8001f82:	f001 fb27 	bl	80035d4 <printString>

    setCursor(130, 105);
 8001f86:	2169      	movs	r1, #105	; 0x69
 8001f88:	2082      	movs	r0, #130	; 0x82
 8001f8a:	f001 fa7b 	bl	8003484 <setCursor>
    if (tdiv < 100)
 8001f8e:	4ba5      	ldr	r3, [pc, #660]	; (8002224 <settingsBar+0x30c>)
 8001f90:	edd3 7a00 	vldr	s15, [r3]
 8001f94:	ed9f 7aa4 	vldr	s14, [pc, #656]	; 8002228 <settingsBar+0x310>
 8001f98:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fa0:	d503      	bpl.n	8001faa <settingsBar+0x92>
        printString("us/d");
 8001fa2:	48a2      	ldr	r0, [pc, #648]	; (800222c <settingsBar+0x314>)
 8001fa4:	f001 fb16 	bl	80035d4 <printString>
 8001fa8:	e002      	b.n	8001fb0 <settingsBar+0x98>
    else
        printString("ms/d");
 8001faa:	48a1      	ldr	r0, [pc, #644]	; (8002230 <settingsBar+0x318>)
 8001fac:	f001 fb12 	bl	80035d4 <printString>

    // Print bottom row
    if (sel == 0)
 8001fb0:	4ba0      	ldr	r3, [pc, #640]	; (8002234 <settingsBar+0x31c>)
 8001fb2:	781b      	ldrb	r3, [r3, #0]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d114      	bne.n	8001fe2 <settingsBar+0xca>
    {
        if (topClip || bottomClip)
 8001fb8:	4b94      	ldr	r3, [pc, #592]	; (800220c <settingsBar+0x2f4>)
 8001fba:	781b      	ldrb	r3, [r3, #0]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d103      	bne.n	8001fc8 <settingsBar+0xb0>
 8001fc0:	4b93      	ldr	r3, [pc, #588]	; (8002210 <settingsBar+0x2f8>)
 8001fc2:	781b      	ldrb	r3, [r3, #0]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d006      	beq.n	8001fd6 <settingsBar+0xbe>
            setTextColor(ST7735_RED, WHITE);
 8001fc8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001fcc:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8001fd0:	f001 fa70 	bl	80034b4 <setTextColor>
 8001fd4:	e018      	b.n	8002008 <settingsBar+0xf0>
        else
            setTextColor(BLACK, WHITE);
 8001fd6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001fda:	2000      	movs	r0, #0
 8001fdc:	f001 fa6a 	bl	80034b4 <setTextColor>
 8001fe0:	e012      	b.n	8002008 <settingsBar+0xf0>
    }
    else if (topClip || bottomClip)
 8001fe2:	4b8a      	ldr	r3, [pc, #552]	; (800220c <settingsBar+0x2f4>)
 8001fe4:	781b      	ldrb	r3, [r3, #0]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d103      	bne.n	8001ff2 <settingsBar+0xda>
 8001fea:	4b89      	ldr	r3, [pc, #548]	; (8002210 <settingsBar+0x2f8>)
 8001fec:	781b      	ldrb	r3, [r3, #0]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d005      	beq.n	8001ffe <settingsBar+0xe6>
        setTextColor(ST7735_RED, BLACK);
 8001ff2:	2100      	movs	r1, #0
 8001ff4:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8001ff8:	f001 fa5c 	bl	80034b4 <setTextColor>
 8001ffc:	e004      	b.n	8002008 <settingsBar+0xf0>
    else
        setTextColor(WHITE, BLACK);
 8001ffe:	2100      	movs	r1, #0
 8002000:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002004:	f001 fa56 	bl	80034b4 <setTextColor>
    setCursor(0, 115);
 8002008:	2173      	movs	r1, #115	; 0x73
 800200a:	2000      	movs	r0, #0
 800200c:	f001 fa3a 	bl	8003484 <setCursor>
    printFloat(vdiv, 1, st);
 8002010:	4b89      	ldr	r3, [pc, #548]	; (8002238 <settingsBar+0x320>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4618      	mov	r0, r3
 8002016:	f7fe fa97 	bl	8000548 <__aeabi_f2d>
 800201a:	4604      	mov	r4, r0
 800201c:	460d      	mov	r5, r1
 800201e:	1d3b      	adds	r3, r7, #4
 8002020:	4619      	mov	r1, r3
 8002022:	2001      	movs	r0, #1
 8002024:	ec45 4b10 	vmov	d0, r4, r5
 8002028:	f7ff f95c 	bl	80012e4 <printFloat>
    printf("%sV\n", st);
 800202c:	1d3b      	adds	r3, r7, #4
 800202e:	4619      	mov	r1, r3
 8002030:	4882      	ldr	r0, [pc, #520]	; (800223c <settingsBar+0x324>)
 8002032:	f006 f973 	bl	800831c <iprintf>

    setTextColor(WHITE, BLACK);
 8002036:	2100      	movs	r1, #0
 8002038:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800203c:	f001 fa3a 	bl	80034b4 <setTextColor>
    if (sel == 1)
 8002040:	4b7c      	ldr	r3, [pc, #496]	; (8002234 <settingsBar+0x31c>)
 8002042:	781b      	ldrb	r3, [r3, #0]
 8002044:	2b01      	cmp	r3, #1
 8002046:	d120      	bne.n	800208a <settingsBar+0x172>
    {
        setTextColor(BLACK, WHITE);
 8002048:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800204c:	2000      	movs	r0, #0
 800204e:	f001 fa31 	bl	80034b4 <setTextColor>
        drawFastHLine(0, (uint16_t)((PIXDIV * YDIV / 2 - 1) - (trigVoltage * PIXDIV / vdiv)), XDIV * PIXDIV, ST7735_RED);
 8002052:	4b7b      	ldr	r3, [pc, #492]	; (8002240 <settingsBar+0x328>)
 8002054:	edd3 7a00 	vldr	s15, [r3]
 8002058:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 800205c:	ee67 6a87 	vmul.f32	s13, s15, s14
 8002060:	4b75      	ldr	r3, [pc, #468]	; (8002238 <settingsBar+0x320>)
 8002062:	ed93 7a00 	vldr	s14, [r3]
 8002066:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800206a:	ed9f 7a76 	vldr	s14, [pc, #472]	; 8002244 <settingsBar+0x32c>
 800206e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002072:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002076:	ee17 3a90 	vmov	r3, s15
 800207a:	b29b      	uxth	r3, r3
 800207c:	b219      	sxth	r1, r3
 800207e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002082:	2280      	movs	r2, #128	; 0x80
 8002084:	2000      	movs	r0, #0
 8002086:	f001 faef 	bl	8003668 <drawFastHLine>
    }
    setCursor(30, 115);
 800208a:	2173      	movs	r1, #115	; 0x73
 800208c:	201e      	movs	r0, #30
 800208e:	f001 f9f9 	bl	8003484 <setCursor>
    printFloat(trigVoltage, 1, st);
 8002092:	4b6b      	ldr	r3, [pc, #428]	; (8002240 <settingsBar+0x328>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4618      	mov	r0, r3
 8002098:	f7fe fa56 	bl	8000548 <__aeabi_f2d>
 800209c:	4604      	mov	r4, r0
 800209e:	460d      	mov	r5, r1
 80020a0:	1d3b      	adds	r3, r7, #4
 80020a2:	4619      	mov	r1, r3
 80020a4:	2001      	movs	r0, #1
 80020a6:	ec45 4b10 	vmov	d0, r4, r5
 80020aa:	f7ff f91b 	bl	80012e4 <printFloat>
    printf("%s\n", st);
 80020ae:	1d3b      	adds	r3, r7, #4
 80020b0:	4618      	mov	r0, r3
 80020b2:	f006 f999 	bl	80083e8 <puts>

    setTextColor(WHITE, BLACK);
 80020b6:	2100      	movs	r1, #0
 80020b8:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80020bc:	f001 f9fa 	bl	80034b4 <setTextColor>
    setCursor(60, 115);
 80020c0:	2173      	movs	r1, #115	; 0x73
 80020c2:	203c      	movs	r0, #60	; 0x3c
 80020c4:	f001 f9de 	bl	8003484 <setCursor>
    if (sel == 2)
 80020c8:	4b5a      	ldr	r3, [pc, #360]	; (8002234 <settingsBar+0x31c>)
 80020ca:	781b      	ldrb	r3, [r3, #0]
 80020cc:	2b02      	cmp	r3, #2
 80020ce:	d104      	bne.n	80020da <settingsBar+0x1c2>
        setTextColor(BLACK, WHITE);
 80020d0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80020d4:	2000      	movs	r0, #0
 80020d6:	f001 f9ed 	bl	80034b4 <setTextColor>
    if (trig == RISING)
 80020da:	4b5b      	ldr	r3, [pc, #364]	; (8002248 <settingsBar+0x330>)
 80020dc:	781b      	ldrb	r3, [r3, #0]
 80020de:	2b01      	cmp	r3, #1
 80020e0:	d103      	bne.n	80020ea <settingsBar+0x1d2>
        printf("Rise\n");
 80020e2:	485a      	ldr	r0, [pc, #360]	; (800224c <settingsBar+0x334>)
 80020e4:	f006 f980 	bl	80083e8 <puts>
 80020e8:	e002      	b.n	80020f0 <settingsBar+0x1d8>
    else
        printf("Fall\n");
 80020ea:	4859      	ldr	r0, [pc, #356]	; (8002250 <settingsBar+0x338>)
 80020ec:	f006 f97c 	bl	80083e8 <puts>

    setTextColor(WHITE, BLACK);
 80020f0:	2100      	movs	r1, #0
 80020f2:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80020f6:	f001 f9dd 	bl	80034b4 <setTextColor>
    setCursor(95, 115);
 80020fa:	2173      	movs	r1, #115	; 0x73
 80020fc:	205f      	movs	r0, #95	; 0x5f
 80020fe:	f001 f9c1 	bl	8003484 <setCursor>
    if (sel == 3)
 8002102:	4b4c      	ldr	r3, [pc, #304]	; (8002234 <settingsBar+0x31c>)
 8002104:	781b      	ldrb	r3, [r3, #0]
 8002106:	2b03      	cmp	r3, #3
 8002108:	d104      	bne.n	8002114 <settingsBar+0x1fc>
        setTextColor(BLACK, WHITE);
 800210a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800210e:	2000      	movs	r0, #0
 8002110:	f001 f9d0 	bl	80034b4 <setTextColor>
    printf("%dx\n", atten);
 8002114:	4b4f      	ldr	r3, [pc, #316]	; (8002254 <settingsBar+0x33c>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4619      	mov	r1, r3
 800211a:	484f      	ldr	r0, [pc, #316]	; (8002258 <settingsBar+0x340>)
 800211c:	f006 f8fe 	bl	800831c <iprintf>

    setTextColor(WHITE, BLACK);
 8002120:	2100      	movs	r1, #0
 8002122:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002126:	f001 f9c5 	bl	80034b4 <setTextColor>
    if (sel == 4)
 800212a:	4b42      	ldr	r3, [pc, #264]	; (8002234 <settingsBar+0x31c>)
 800212c:	781b      	ldrb	r3, [r3, #0]
 800212e:	2b04      	cmp	r3, #4
 8002130:	d104      	bne.n	800213c <settingsBar+0x224>
        setTextColor(BLACK, WHITE);
 8002132:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002136:	2000      	movs	r0, #0
 8002138:	f001 f9bc 	bl	80034b4 <setTextColor>
    setCursor(130, 115);
 800213c:	2173      	movs	r1, #115	; 0x73
 800213e:	2082      	movs	r0, #130	; 0x82
 8002140:	f001 f9a0 	bl	8003484 <setCursor>
    if (tdiv < 100)
 8002144:	4b37      	ldr	r3, [pc, #220]	; (8002224 <settingsBar+0x30c>)
 8002146:	edd3 7a00 	vldr	s15, [r3]
 800214a:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8002228 <settingsBar+0x310>
 800214e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002152:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002156:	d50a      	bpl.n	800216e <settingsBar+0x256>
        printf("%d\n", (int)tdiv);
 8002158:	4b32      	ldr	r3, [pc, #200]	; (8002224 <settingsBar+0x30c>)
 800215a:	edd3 7a00 	vldr	s15, [r3]
 800215e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002162:	ee17 1a90 	vmov	r1, s15
 8002166:	483d      	ldr	r0, [pc, #244]	; (800225c <settingsBar+0x344>)
 8002168:	f006 f8d8 	bl	800831c <iprintf>
 800216c:	e02c      	b.n	80021c8 <settingsBar+0x2b0>
    else if (tdiv < 1000)
 800216e:	4b2d      	ldr	r3, [pc, #180]	; (8002224 <settingsBar+0x30c>)
 8002170:	edd3 7a00 	vldr	s15, [r3]
 8002174:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 8002260 <settingsBar+0x348>
 8002178:	eef4 7ac7 	vcmpe.f32	s15, s14
 800217c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002180:	d511      	bpl.n	80021a6 <settingsBar+0x28e>
        printf("0.%d\n", (int)tdiv / 100);
 8002182:	4b28      	ldr	r3, [pc, #160]	; (8002224 <settingsBar+0x30c>)
 8002184:	edd3 7a00 	vldr	s15, [r3]
 8002188:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800218c:	ee17 1a90 	vmov	r1, s15
 8002190:	4b34      	ldr	r3, [pc, #208]	; (8002264 <settingsBar+0x34c>)
 8002192:	fb83 2301 	smull	r2, r3, r3, r1
 8002196:	115a      	asrs	r2, r3, #5
 8002198:	17cb      	asrs	r3, r1, #31
 800219a:	1ad3      	subs	r3, r2, r3
 800219c:	4619      	mov	r1, r3
 800219e:	4832      	ldr	r0, [pc, #200]	; (8002268 <settingsBar+0x350>)
 80021a0:	f006 f8bc 	bl	800831c <iprintf>
 80021a4:	e010      	b.n	80021c8 <settingsBar+0x2b0>
    else
        printf("%d\n", (int)tdiv / 1000);
 80021a6:	4b1f      	ldr	r3, [pc, #124]	; (8002224 <settingsBar+0x30c>)
 80021a8:	edd3 7a00 	vldr	s15, [r3]
 80021ac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80021b0:	ee17 1a90 	vmov	r1, s15
 80021b4:	4b2d      	ldr	r3, [pc, #180]	; (800226c <settingsBar+0x354>)
 80021b6:	fb83 2301 	smull	r2, r3, r3, r1
 80021ba:	119a      	asrs	r2, r3, #6
 80021bc:	17cb      	asrs	r3, r1, #31
 80021be:	1ad3      	subs	r3, r2, r3
 80021c0:	4619      	mov	r1, r3
 80021c2:	4826      	ldr	r0, [pc, #152]	; (800225c <settingsBar+0x344>)
 80021c4:	f006 f8aa 	bl	800831c <iprintf>

    // Handle buttons
    if (!HAL_GPIO_ReadPin(BTN1_GPIO_Port, BTN1_Pin))
 80021c8:	2180      	movs	r1, #128	; 0x80
 80021ca:	4829      	ldr	r0, [pc, #164]	; (8002270 <settingsBar+0x358>)
 80021cc:	f003 f9dc 	bl	8005588 <HAL_GPIO_ReadPin>
 80021d0:	4603      	mov	r3, r0
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	f040 80e1 	bne.w	800239a <settingsBar+0x482>
    {
        if (sel == 0) // volts per div
 80021d8:	4b16      	ldr	r3, [pc, #88]	; (8002234 <settingsBar+0x31c>)
 80021da:	781b      	ldrb	r3, [r3, #0]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d149      	bne.n	8002274 <settingsBar+0x35c>
        {
            if (vdiv > 0.5)
 80021e0:	4b15      	ldr	r3, [pc, #84]	; (8002238 <settingsBar+0x320>)
 80021e2:	edd3 7a00 	vldr	s15, [r3]
 80021e6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80021ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80021ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021f2:	f340 80cf 	ble.w	8002394 <settingsBar+0x47c>
                vdiv -= 0.5;
 80021f6:	4b10      	ldr	r3, [pc, #64]	; (8002238 <settingsBar+0x320>)
 80021f8:	edd3 7a00 	vldr	s15, [r3]
 80021fc:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002200:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002204:	4b0c      	ldr	r3, [pc, #48]	; (8002238 <settingsBar+0x320>)
 8002206:	edc3 7a00 	vstr	s15, [r3]
 800220a:	e0c3      	b.n	8002394 <settingsBar+0x47c>
 800220c:	200004cb 	.word	0x200004cb
 8002210:	200004cc 	.word	0x200004cc
 8002214:	08009418 	.word	0x08009418
 8002218:	08009410 	.word	0x08009410
 800221c:	08009420 	.word	0x08009420
 8002220:	08009428 	.word	0x08009428
 8002224:	20000010 	.word	0x20000010
 8002228:	42c80000 	.word	0x42c80000
 800222c:	08009430 	.word	0x08009430
 8002230:	08009438 	.word	0x08009438
 8002234:	200004ca 	.word	0x200004ca
 8002238:	20000008 	.word	0x20000008
 800223c:	080093f4 	.word	0x080093f4
 8002240:	20000498 	.word	0x20000498
 8002244:	423c0000 	.word	0x423c0000
 8002248:	2000000c 	.word	0x2000000c
 800224c:	08009440 	.word	0x08009440
 8002250:	08009448 	.word	0x08009448
 8002254:	20000004 	.word	0x20000004
 8002258:	08009450 	.word	0x08009450
 800225c:	08009404 	.word	0x08009404
 8002260:	447a0000 	.word	0x447a0000
 8002264:	51eb851f 	.word	0x51eb851f
 8002268:	08009458 	.word	0x08009458
 800226c:	10624dd3 	.word	0x10624dd3
 8002270:	40020400 	.word	0x40020400
        }
        else if (sel == 1) // trigger level
 8002274:	4bb0      	ldr	r3, [pc, #704]	; (8002538 <settingsBar+0x620>)
 8002276:	781b      	ldrb	r3, [r3, #0]
 8002278:	2b01      	cmp	r3, #1
 800227a:	d113      	bne.n	80022a4 <settingsBar+0x38c>
        {
            trigVoltage -= 0.1;
 800227c:	4baf      	ldr	r3, [pc, #700]	; (800253c <settingsBar+0x624>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4618      	mov	r0, r3
 8002282:	f7fe f961 	bl	8000548 <__aeabi_f2d>
 8002286:	a3aa      	add	r3, pc, #680	; (adr r3, 8002530 <settingsBar+0x618>)
 8002288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800228c:	f7fd fffc 	bl	8000288 <__aeabi_dsub>
 8002290:	4602      	mov	r2, r0
 8002292:	460b      	mov	r3, r1
 8002294:	4610      	mov	r0, r2
 8002296:	4619      	mov	r1, r3
 8002298:	f7fe fbe8 	bl	8000a6c <__aeabi_d2f>
 800229c:	4603      	mov	r3, r0
 800229e:	4aa7      	ldr	r2, [pc, #668]	; (800253c <settingsBar+0x624>)
 80022a0:	6013      	str	r3, [r2, #0]
 80022a2:	e077      	b.n	8002394 <settingsBar+0x47c>
        }
        else if (sel == 2) // trigger slope
 80022a4:	4ba4      	ldr	r3, [pc, #656]	; (8002538 <settingsBar+0x620>)
 80022a6:	781b      	ldrb	r3, [r3, #0]
 80022a8:	2b02      	cmp	r3, #2
 80022aa:	d103      	bne.n	80022b4 <settingsBar+0x39c>
        {
            trig = FALLING;
 80022ac:	4ba4      	ldr	r3, [pc, #656]	; (8002540 <settingsBar+0x628>)
 80022ae:	2200      	movs	r2, #0
 80022b0:	701a      	strb	r2, [r3, #0]
 80022b2:	e06f      	b.n	8002394 <settingsBar+0x47c>
        }
        else if (sel == 3) // attenuation
 80022b4:	4ba0      	ldr	r3, [pc, #640]	; (8002538 <settingsBar+0x620>)
 80022b6:	781b      	ldrb	r3, [r3, #0]
 80022b8:	2b03      	cmp	r3, #3
 80022ba:	d103      	bne.n	80022c4 <settingsBar+0x3ac>
        {
            atten = 1;
 80022bc:	4ba1      	ldr	r3, [pc, #644]	; (8002544 <settingsBar+0x62c>)
 80022be:	2201      	movs	r2, #1
 80022c0:	601a      	str	r2, [r3, #0]
 80022c2:	e067      	b.n	8002394 <settingsBar+0x47c>
        }
        else if (sel == 4) // tdiv
 80022c4:	4b9c      	ldr	r3, [pc, #624]	; (8002538 <settingsBar+0x620>)
 80022c6:	781b      	ldrb	r3, [r3, #0]
 80022c8:	2b04      	cmp	r3, #4
 80022ca:	d163      	bne.n	8002394 <settingsBar+0x47c>
        {
            if (tdiv > 10)
 80022cc:	4b9e      	ldr	r3, [pc, #632]	; (8002548 <settingsBar+0x630>)
 80022ce:	edd3 7a00 	vldr	s15, [r3]
 80022d2:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80022d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80022da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022de:	dd3d      	ble.n	800235c <settingsBar+0x444>
            {
                if (tdiv > 1000)
 80022e0:	4b99      	ldr	r3, [pc, #612]	; (8002548 <settingsBar+0x630>)
 80022e2:	edd3 7a00 	vldr	s15, [r3]
 80022e6:	ed9f 7a99 	vldr	s14, [pc, #612]	; 800254c <settingsBar+0x634>
 80022ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80022ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022f2:	dd0a      	ble.n	800230a <settingsBar+0x3f2>
                    tdiv -= 1000;
 80022f4:	4b94      	ldr	r3, [pc, #592]	; (8002548 <settingsBar+0x630>)
 80022f6:	edd3 7a00 	vldr	s15, [r3]
 80022fa:	ed9f 7a94 	vldr	s14, [pc, #592]	; 800254c <settingsBar+0x634>
 80022fe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002302:	4b91      	ldr	r3, [pc, #580]	; (8002548 <settingsBar+0x630>)
 8002304:	edc3 7a00 	vstr	s15, [r3]
 8002308:	e028      	b.n	800235c <settingsBar+0x444>
                else if (tdiv > 100)
 800230a:	4b8f      	ldr	r3, [pc, #572]	; (8002548 <settingsBar+0x630>)
 800230c:	edd3 7a00 	vldr	s15, [r3]
 8002310:	ed9f 7a8f 	vldr	s14, [pc, #572]	; 8002550 <settingsBar+0x638>
 8002314:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002318:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800231c:	dd0a      	ble.n	8002334 <settingsBar+0x41c>
                    tdiv -= 100;
 800231e:	4b8a      	ldr	r3, [pc, #552]	; (8002548 <settingsBar+0x630>)
 8002320:	edd3 7a00 	vldr	s15, [r3]
 8002324:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 8002550 <settingsBar+0x638>
 8002328:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800232c:	4b86      	ldr	r3, [pc, #536]	; (8002548 <settingsBar+0x630>)
 800232e:	edc3 7a00 	vstr	s15, [r3]
 8002332:	e013      	b.n	800235c <settingsBar+0x444>
                else if (tdiv > 10)
 8002334:	4b84      	ldr	r3, [pc, #528]	; (8002548 <settingsBar+0x630>)
 8002336:	edd3 7a00 	vldr	s15, [r3]
 800233a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800233e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002342:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002346:	dd09      	ble.n	800235c <settingsBar+0x444>
                    tdiv -= 10;
 8002348:	4b7f      	ldr	r3, [pc, #508]	; (8002548 <settingsBar+0x630>)
 800234a:	edd3 7a00 	vldr	s15, [r3]
 800234e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002352:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002356:	4b7c      	ldr	r3, [pc, #496]	; (8002548 <settingsBar+0x630>)
 8002358:	edc3 7a00 	vstr	s15, [r3]
            }

            sampRate = (PIXDIV * 1000 * 1000) / tdiv;
 800235c:	4b7a      	ldr	r3, [pc, #488]	; (8002548 <settingsBar+0x630>)
 800235e:	ed93 7a00 	vldr	s14, [r3]
 8002362:	eddf 6a7c 	vldr	s13, [pc, #496]	; 8002554 <settingsBar+0x63c>
 8002366:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800236a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800236e:	ee17 2a90 	vmov	r2, s15
 8002372:	4b79      	ldr	r3, [pc, #484]	; (8002558 <settingsBar+0x640>)
 8002374:	601a      	str	r2, [r3, #0]
            sampPer = tdiv / (float)PIXDIV;
 8002376:	4b74      	ldr	r3, [pc, #464]	; (8002548 <settingsBar+0x630>)
 8002378:	ed93 7a00 	vldr	s14, [r3]
 800237c:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8002380:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002384:	4b75      	ldr	r3, [pc, #468]	; (800255c <settingsBar+0x644>)
 8002386:	edc3 7a00 	vstr	s15, [r3]
            setTimerFreq(sampRate);
 800238a:	4b73      	ldr	r3, [pc, #460]	; (8002558 <settingsBar+0x640>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4618      	mov	r0, r3
 8002390:	f7ff f824 	bl	80013dc <setTimerFreq>
        }
        HAL_Delay(150);
 8002394:	2096      	movs	r0, #150	; 0x96
 8002396:	f001 fe2f 	bl	8003ff8 <HAL_Delay>
    }

    if (!HAL_GPIO_ReadPin(BTN3_GPIO_Port, BTN3_Pin))
 800239a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800239e:	4870      	ldr	r0, [pc, #448]	; (8002560 <settingsBar+0x648>)
 80023a0:	f003 f8f2 	bl	8005588 <HAL_GPIO_ReadPin>
 80023a4:	4603      	mov	r3, r0
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	f040 80a3 	bne.w	80024f2 <settingsBar+0x5da>
    {
        if (sel == 0) // vdiv
 80023ac:	4b62      	ldr	r3, [pc, #392]	; (8002538 <settingsBar+0x620>)
 80023ae:	781b      	ldrb	r3, [r3, #0]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d115      	bne.n	80023e0 <settingsBar+0x4c8>
        {
            if (vdiv < 9)
 80023b4:	4b6b      	ldr	r3, [pc, #428]	; (8002564 <settingsBar+0x64c>)
 80023b6:	edd3 7a00 	vldr	s15, [r3]
 80023ba:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 80023be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80023c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023c6:	f140 8091 	bpl.w	80024ec <settingsBar+0x5d4>
                vdiv += 0.5;
 80023ca:	4b66      	ldr	r3, [pc, #408]	; (8002564 <settingsBar+0x64c>)
 80023cc:	edd3 7a00 	vldr	s15, [r3]
 80023d0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80023d4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80023d8:	4b62      	ldr	r3, [pc, #392]	; (8002564 <settingsBar+0x64c>)
 80023da:	edc3 7a00 	vstr	s15, [r3]
 80023de:	e085      	b.n	80024ec <settingsBar+0x5d4>
        }
        else if (sel == 1) // trigLevel
 80023e0:	4b55      	ldr	r3, [pc, #340]	; (8002538 <settingsBar+0x620>)
 80023e2:	781b      	ldrb	r3, [r3, #0]
 80023e4:	2b01      	cmp	r3, #1
 80023e6:	d113      	bne.n	8002410 <settingsBar+0x4f8>
        {
            trigVoltage += 0.1;
 80023e8:	4b54      	ldr	r3, [pc, #336]	; (800253c <settingsBar+0x624>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4618      	mov	r0, r3
 80023ee:	f7fe f8ab 	bl	8000548 <__aeabi_f2d>
 80023f2:	a34f      	add	r3, pc, #316	; (adr r3, 8002530 <settingsBar+0x618>)
 80023f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023f8:	f7fd ff48 	bl	800028c <__adddf3>
 80023fc:	4602      	mov	r2, r0
 80023fe:	460b      	mov	r3, r1
 8002400:	4610      	mov	r0, r2
 8002402:	4619      	mov	r1, r3
 8002404:	f7fe fb32 	bl	8000a6c <__aeabi_d2f>
 8002408:	4603      	mov	r3, r0
 800240a:	4a4c      	ldr	r2, [pc, #304]	; (800253c <settingsBar+0x624>)
 800240c:	6013      	str	r3, [r2, #0]
 800240e:	e06d      	b.n	80024ec <settingsBar+0x5d4>
        }
        else if (sel == 2) // trigType
 8002410:	4b49      	ldr	r3, [pc, #292]	; (8002538 <settingsBar+0x620>)
 8002412:	781b      	ldrb	r3, [r3, #0]
 8002414:	2b02      	cmp	r3, #2
 8002416:	d103      	bne.n	8002420 <settingsBar+0x508>
        {
            trig = RISING;
 8002418:	4b49      	ldr	r3, [pc, #292]	; (8002540 <settingsBar+0x628>)
 800241a:	2201      	movs	r2, #1
 800241c:	701a      	strb	r2, [r3, #0]
 800241e:	e065      	b.n	80024ec <settingsBar+0x5d4>
        }
        else if (sel == 3) // atten
 8002420:	4b45      	ldr	r3, [pc, #276]	; (8002538 <settingsBar+0x620>)
 8002422:	781b      	ldrb	r3, [r3, #0]
 8002424:	2b03      	cmp	r3, #3
 8002426:	d103      	bne.n	8002430 <settingsBar+0x518>
        {
            atten = 10;
 8002428:	4b46      	ldr	r3, [pc, #280]	; (8002544 <settingsBar+0x62c>)
 800242a:	220a      	movs	r2, #10
 800242c:	601a      	str	r2, [r3, #0]
 800242e:	e05d      	b.n	80024ec <settingsBar+0x5d4>
        }
        else if (sel == 4) // tdiv
 8002430:	4b41      	ldr	r3, [pc, #260]	; (8002538 <settingsBar+0x620>)
 8002432:	781b      	ldrb	r3, [r3, #0]
 8002434:	2b04      	cmp	r3, #4
 8002436:	d159      	bne.n	80024ec <settingsBar+0x5d4>
        {
            if (tdiv >= 1000)
 8002438:	4b43      	ldr	r3, [pc, #268]	; (8002548 <settingsBar+0x630>)
 800243a:	edd3 7a00 	vldr	s15, [r3]
 800243e:	ed9f 7a43 	vldr	s14, [pc, #268]	; 800254c <settingsBar+0x634>
 8002442:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002446:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800244a:	db0a      	blt.n	8002462 <settingsBar+0x54a>
                tdiv += 1000;
 800244c:	4b3e      	ldr	r3, [pc, #248]	; (8002548 <settingsBar+0x630>)
 800244e:	edd3 7a00 	vldr	s15, [r3]
 8002452:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 800254c <settingsBar+0x634>
 8002456:	ee77 7a87 	vadd.f32	s15, s15, s14
 800245a:	4b3b      	ldr	r3, [pc, #236]	; (8002548 <settingsBar+0x630>)
 800245c:	edc3 7a00 	vstr	s15, [r3]
 8002460:	e028      	b.n	80024b4 <settingsBar+0x59c>
            else if (tdiv >= 100)
 8002462:	4b39      	ldr	r3, [pc, #228]	; (8002548 <settingsBar+0x630>)
 8002464:	edd3 7a00 	vldr	s15, [r3]
 8002468:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8002550 <settingsBar+0x638>
 800246c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002470:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002474:	db0a      	blt.n	800248c <settingsBar+0x574>
                tdiv += 100;
 8002476:	4b34      	ldr	r3, [pc, #208]	; (8002548 <settingsBar+0x630>)
 8002478:	edd3 7a00 	vldr	s15, [r3]
 800247c:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8002550 <settingsBar+0x638>
 8002480:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002484:	4b30      	ldr	r3, [pc, #192]	; (8002548 <settingsBar+0x630>)
 8002486:	edc3 7a00 	vstr	s15, [r3]
 800248a:	e013      	b.n	80024b4 <settingsBar+0x59c>
            else if (tdiv >= 10)
 800248c:	4b2e      	ldr	r3, [pc, #184]	; (8002548 <settingsBar+0x630>)
 800248e:	edd3 7a00 	vldr	s15, [r3]
 8002492:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002496:	eef4 7ac7 	vcmpe.f32	s15, s14
 800249a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800249e:	db09      	blt.n	80024b4 <settingsBar+0x59c>
                tdiv += 10;
 80024a0:	4b29      	ldr	r3, [pc, #164]	; (8002548 <settingsBar+0x630>)
 80024a2:	edd3 7a00 	vldr	s15, [r3]
 80024a6:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80024aa:	ee77 7a87 	vadd.f32	s15, s15, s14
 80024ae:	4b26      	ldr	r3, [pc, #152]	; (8002548 <settingsBar+0x630>)
 80024b0:	edc3 7a00 	vstr	s15, [r3]

            sampRate = (PIXDIV * 1000 * 1000) / tdiv;
 80024b4:	4b24      	ldr	r3, [pc, #144]	; (8002548 <settingsBar+0x630>)
 80024b6:	ed93 7a00 	vldr	s14, [r3]
 80024ba:	eddf 6a26 	vldr	s13, [pc, #152]	; 8002554 <settingsBar+0x63c>
 80024be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80024c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80024c6:	ee17 2a90 	vmov	r2, s15
 80024ca:	4b23      	ldr	r3, [pc, #140]	; (8002558 <settingsBar+0x640>)
 80024cc:	601a      	str	r2, [r3, #0]
            sampPer = tdiv / (float)PIXDIV;
 80024ce:	4b1e      	ldr	r3, [pc, #120]	; (8002548 <settingsBar+0x630>)
 80024d0:	ed93 7a00 	vldr	s14, [r3]
 80024d4:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 80024d8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80024dc:	4b1f      	ldr	r3, [pc, #124]	; (800255c <settingsBar+0x644>)
 80024de:	edc3 7a00 	vstr	s15, [r3]
            setTimerFreq(sampRate);
 80024e2:	4b1d      	ldr	r3, [pc, #116]	; (8002558 <settingsBar+0x640>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4618      	mov	r0, r3
 80024e8:	f7fe ff78 	bl	80013dc <setTimerFreq>
        }
        HAL_Delay(150);
 80024ec:	2096      	movs	r0, #150	; 0x96
 80024ee:	f001 fd83 	bl	8003ff8 <HAL_Delay>
    }

    if (!HAL_GPIO_ReadPin(BTN2_GPIO_Port, BTN2_Pin))
 80024f2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80024f6:	481a      	ldr	r0, [pc, #104]	; (8002560 <settingsBar+0x648>)
 80024f8:	f003 f846 	bl	8005588 <HAL_GPIO_ReadPin>
 80024fc:	4603      	mov	r3, r0
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d108      	bne.n	8002514 <settingsBar+0x5fc>
    {
        sel++;
 8002502:	4b0d      	ldr	r3, [pc, #52]	; (8002538 <settingsBar+0x620>)
 8002504:	781b      	ldrb	r3, [r3, #0]
 8002506:	3301      	adds	r3, #1
 8002508:	b2da      	uxtb	r2, r3
 800250a:	4b0b      	ldr	r3, [pc, #44]	; (8002538 <settingsBar+0x620>)
 800250c:	701a      	strb	r2, [r3, #0]
        HAL_Delay(150);
 800250e:	2096      	movs	r0, #150	; 0x96
 8002510:	f001 fd72 	bl	8003ff8 <HAL_Delay>
    }
    if (sel > 4)
 8002514:	4b08      	ldr	r3, [pc, #32]	; (8002538 <settingsBar+0x620>)
 8002516:	781b      	ldrb	r3, [r3, #0]
 8002518:	2b04      	cmp	r3, #4
 800251a:	d902      	bls.n	8002522 <settingsBar+0x60a>
        sel = 0;
 800251c:	4b06      	ldr	r3, [pc, #24]	; (8002538 <settingsBar+0x620>)
 800251e:	2200      	movs	r2, #0
 8002520:	701a      	strb	r2, [r3, #0]
}
 8002522:	bf00      	nop
 8002524:	3710      	adds	r7, #16
 8002526:	46bd      	mov	sp, r7
 8002528:	bdb0      	pop	{r4, r5, r7, pc}
 800252a:	bf00      	nop
 800252c:	f3af 8000 	nop.w
 8002530:	9999999a 	.word	0x9999999a
 8002534:	3fb99999 	.word	0x3fb99999
 8002538:	200004ca 	.word	0x200004ca
 800253c:	20000498 	.word	0x20000498
 8002540:	2000000c 	.word	0x2000000c
 8002544:	20000004 	.word	0x20000004
 8002548:	20000010 	.word	0x20000010
 800254c:	447a0000 	.word	0x447a0000
 8002550:	42c80000 	.word	0x42c80000
 8002554:	4b742400 	.word	0x4b742400
 8002558:	2000049c 	.word	0x2000049c
 800255c:	200004a0 	.word	0x200004a0
 8002560:	40020400 	.word	0x40020400
 8002564:	20000008 	.word	0x20000008

08002568 <outputSerial>:

// This function dumps a string to either UART or USB port
void outputSerial(char s[], uint8_t o)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b082      	sub	sp, #8
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
 8002570:	460b      	mov	r3, r1
 8002572:	70fb      	strb	r3, [r7, #3]
    switch (o)
 8002574:	78fb      	ldrb	r3, [r7, #3]
 8002576:	2b01      	cmp	r3, #1
 8002578:	d002      	beq.n	8002580 <outputSerial+0x18>
 800257a:	2b02      	cmp	r3, #2
 800257c:	d004      	beq.n	8002588 <outputSerial+0x20>
        break;
    case 2:
        HAL_UART_Transmit(&huart1, s, strlen(s), HAL_MAX_DELAY);
        break;
    default:
        break;
 800257e:	e00f      	b.n	80025a0 <outputSerial+0x38>
        HAL_Delay(1);
 8002580:	2001      	movs	r0, #1
 8002582:	f001 fd39 	bl	8003ff8 <HAL_Delay>
        break;
 8002586:	e00b      	b.n	80025a0 <outputSerial+0x38>
        HAL_UART_Transmit(&huart1, s, strlen(s), HAL_MAX_DELAY);
 8002588:	6878      	ldr	r0, [r7, #4]
 800258a:	f7fd fe21 	bl	80001d0 <strlen>
 800258e:	4603      	mov	r3, r0
 8002590:	b29a      	uxth	r2, r3
 8002592:	f04f 33ff 	mov.w	r3, #4294967295
 8002596:	6879      	ldr	r1, [r7, #4]
 8002598:	4803      	ldr	r0, [pc, #12]	; (80025a8 <outputSerial+0x40>)
 800259a:	f004 fd30 	bl	8006ffe <HAL_UART_Transmit>
        break;
 800259e:	bf00      	nop
    }
}
 80025a0:	bf00      	nop
 80025a2:	3708      	adds	r7, #8
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}
 80025a8:	200001ec 	.word	0x200001ec

080025ac <outputCSV>:

// This function dumps the captured waveform as TekScope-compatible CSV data
void outputCSV(uint8_t o)
{
 80025ac:	b5b0      	push	{r4, r5, r7, lr}
 80025ae:	ed2d 8b02 	vpush	{d8}
 80025b2:	b092      	sub	sp, #72	; 0x48
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	4603      	mov	r3, r0
 80025b8:	71fb      	strb	r3, [r7, #7]
    char st[10];
    char s1[10];
    uint8_t buffer[30] = "";
 80025ba:	2300      	movs	r3, #0
 80025bc:	60bb      	str	r3, [r7, #8]
 80025be:	f107 030c 	add.w	r3, r7, #12
 80025c2:	2200      	movs	r2, #0
 80025c4:	601a      	str	r2, [r3, #0]
 80025c6:	605a      	str	r2, [r3, #4]
 80025c8:	609a      	str	r2, [r3, #8]
 80025ca:	60da      	str	r2, [r3, #12]
 80025cc:	611a      	str	r2, [r3, #16]
 80025ce:	615a      	str	r2, [r3, #20]
 80025d0:	831a      	strh	r2, [r3, #24]

    setCursor(2, 5);
 80025d2:	2105      	movs	r1, #5
 80025d4:	2002      	movs	r0, #2
 80025d6:	f000 ff55 	bl	8003484 <setCursor>
    setTextColor(BLACK, WHITE);
 80025da:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80025de:	2000      	movs	r0, #0
 80025e0:	f000 ff68 	bl	80034b4 <setTextColor>
    printString("Sending data");
 80025e4:	4886      	ldr	r0, [pc, #536]	; (8002800 <outputCSV+0x254>)
 80025e6:	f000 fff5 	bl	80035d4 <printString>
    if (o == 1)
 80025ea:	79fb      	ldrb	r3, [r7, #7]
 80025ec:	2b01      	cmp	r3, #1
 80025ee:	d103      	bne.n	80025f8 <outputCSV+0x4c>
        printString(" via USB");
 80025f0:	4884      	ldr	r0, [pc, #528]	; (8002804 <outputCSV+0x258>)
 80025f2:	f000 ffef 	bl	80035d4 <printString>
 80025f6:	e002      	b.n	80025fe <outputCSV+0x52>
    else
        printString(" via UART");
 80025f8:	4883      	ldr	r0, [pc, #524]	; (8002808 <outputCSV+0x25c>)
 80025fa:	f000 ffeb 	bl	80035d4 <printString>
    flushDisplay();
 80025fe:	f001 f91d 	bl	800383c <flushDisplay>

    sprintf(buffer, "\033[2J\033[H\033[3J");
 8002602:	f107 0308 	add.w	r3, r7, #8
 8002606:	4981      	ldr	r1, [pc, #516]	; (800280c <outputCSV+0x260>)
 8002608:	4618      	mov	r0, r3
 800260a:	f005 fef5 	bl	80083f8 <siprintf>
    outputSerial(buffer, o);
 800260e:	79fa      	ldrb	r2, [r7, #7]
 8002610:	f107 0308 	add.w	r3, r7, #8
 8002614:	4611      	mov	r1, r2
 8002616:	4618      	mov	r0, r3
 8002618:	f7ff ffa6 	bl	8002568 <outputSerial>

    sprintf(buffer, "Model,TekscopeSW\n\r");
 800261c:	f107 0308 	add.w	r3, r7, #8
 8002620:	497b      	ldr	r1, [pc, #492]	; (8002810 <outputCSV+0x264>)
 8002622:	4618      	mov	r0, r3
 8002624:	f005 fee8 	bl	80083f8 <siprintf>
    outputSerial(buffer, o);
 8002628:	79fa      	ldrb	r2, [r7, #7]
 800262a:	f107 0308 	add.w	r3, r7, #8
 800262e:	4611      	mov	r1, r2
 8002630:	4618      	mov	r0, r3
 8002632:	f7ff ff99 	bl	8002568 <outputSerial>

    sprintf(buffer, "Label,CH1\n\r");
 8002636:	f107 0308 	add.w	r3, r7, #8
 800263a:	4976      	ldr	r1, [pc, #472]	; (8002814 <outputCSV+0x268>)
 800263c:	4618      	mov	r0, r3
 800263e:	f005 fedb 	bl	80083f8 <siprintf>
    outputSerial(buffer, o);
 8002642:	79fa      	ldrb	r2, [r7, #7]
 8002644:	f107 0308 	add.w	r3, r7, #8
 8002648:	4611      	mov	r1, r2
 800264a:	4618      	mov	r0, r3
 800264c:	f7ff ff8c 	bl	8002568 <outputSerial>

    sprintf(buffer, "Waveform Type,ANALOG\n\r");
 8002650:	f107 0308 	add.w	r3, r7, #8
 8002654:	4970      	ldr	r1, [pc, #448]	; (8002818 <outputCSV+0x26c>)
 8002656:	4618      	mov	r0, r3
 8002658:	f005 fece 	bl	80083f8 <siprintf>
    outputSerial(buffer, o);
 800265c:	79fa      	ldrb	r2, [r7, #7]
 800265e:	f107 0308 	add.w	r3, r7, #8
 8002662:	4611      	mov	r1, r2
 8002664:	4618      	mov	r0, r3
 8002666:	f7ff ff7f 	bl	8002568 <outputSerial>

    sprintf(buffer, "Horizontal Units,s\n\r");
 800266a:	f107 0308 	add.w	r3, r7, #8
 800266e:	496b      	ldr	r1, [pc, #428]	; (800281c <outputCSV+0x270>)
 8002670:	4618      	mov	r0, r3
 8002672:	f005 fec1 	bl	80083f8 <siprintf>
    outputSerial(buffer, o);
 8002676:	79fa      	ldrb	r2, [r7, #7]
 8002678:	f107 0308 	add.w	r3, r7, #8
 800267c:	4611      	mov	r1, r2
 800267e:	4618      	mov	r0, r3
 8002680:	f7ff ff72 	bl	8002568 <outputSerial>

    printFloat(sampPer, 2, st);
 8002684:	4b66      	ldr	r3, [pc, #408]	; (8002820 <outputCSV+0x274>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4618      	mov	r0, r3
 800268a:	f7fd ff5d 	bl	8000548 <__aeabi_f2d>
 800268e:	4604      	mov	r4, r0
 8002690:	460d      	mov	r5, r1
 8002692:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002696:	4619      	mov	r1, r3
 8002698:	2002      	movs	r0, #2
 800269a:	ec45 4b10 	vmov	d0, r4, r5
 800269e:	f7fe fe21 	bl	80012e4 <printFloat>
    sprintf(buffer, "Sample Interval,%sE-06\n\r", st);
 80026a2:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80026a6:	f107 0308 	add.w	r3, r7, #8
 80026aa:	495e      	ldr	r1, [pc, #376]	; (8002824 <outputCSV+0x278>)
 80026ac:	4618      	mov	r0, r3
 80026ae:	f005 fea3 	bl	80083f8 <siprintf>
    outputSerial(buffer, o);
 80026b2:	79fa      	ldrb	r2, [r7, #7]
 80026b4:	f107 0308 	add.w	r3, r7, #8
 80026b8:	4611      	mov	r1, r2
 80026ba:	4618      	mov	r0, r3
 80026bc:	f7ff ff54 	bl	8002568 <outputSerial>

    sprintf(buffer, "Record Length,%d\n\r", BUFFER_LEN);
 80026c0:	f107 0308 	add.w	r3, r7, #8
 80026c4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80026c8:	4957      	ldr	r1, [pc, #348]	; (8002828 <outputCSV+0x27c>)
 80026ca:	4618      	mov	r0, r3
 80026cc:	f005 fe94 	bl	80083f8 <siprintf>
    outputSerial(buffer, o);
 80026d0:	79fa      	ldrb	r2, [r7, #7]
 80026d2:	f107 0308 	add.w	r3, r7, #8
 80026d6:	4611      	mov	r1, r2
 80026d8:	4618      	mov	r0, r3
 80026da:	f7ff ff45 	bl	8002568 <outputSerial>

    sprintf(buffer, "Zero Index,%d\n\r", trigPoint);
 80026de:	4b53      	ldr	r3, [pc, #332]	; (800282c <outputCSV+0x280>)
 80026e0:	681a      	ldr	r2, [r3, #0]
 80026e2:	f107 0308 	add.w	r3, r7, #8
 80026e6:	4952      	ldr	r1, [pc, #328]	; (8002830 <outputCSV+0x284>)
 80026e8:	4618      	mov	r0, r3
 80026ea:	f005 fe85 	bl	80083f8 <siprintf>
    outputSerial(buffer, o);
 80026ee:	79fa      	ldrb	r2, [r7, #7]
 80026f0:	f107 0308 	add.w	r3, r7, #8
 80026f4:	4611      	mov	r1, r2
 80026f6:	4618      	mov	r0, r3
 80026f8:	f7ff ff36 	bl	8002568 <outputSerial>
    HAL_Delay(5);
 80026fc:	2005      	movs	r0, #5
 80026fe:	f001 fc7b 	bl	8003ff8 <HAL_Delay>

    sprintf(buffer, "Vertical Units,V\n\r");
 8002702:	f107 0308 	add.w	r3, r7, #8
 8002706:	494b      	ldr	r1, [pc, #300]	; (8002834 <outputCSV+0x288>)
 8002708:	4618      	mov	r0, r3
 800270a:	f005 fe75 	bl	80083f8 <siprintf>
    outputSerial(buffer, o);
 800270e:	79fa      	ldrb	r2, [r7, #7]
 8002710:	f107 0308 	add.w	r3, r7, #8
 8002714:	4611      	mov	r1, r2
 8002716:	4618      	mov	r0, r3
 8002718:	f7ff ff26 	bl	8002568 <outputSerial>

    sprintf(buffer, ",\n\rLabels,\n\r");
 800271c:	f107 0308 	add.w	r3, r7, #8
 8002720:	4945      	ldr	r1, [pc, #276]	; (8002838 <outputCSV+0x28c>)
 8002722:	4618      	mov	r0, r3
 8002724:	f005 fe68 	bl	80083f8 <siprintf>
    outputSerial(buffer, o);
 8002728:	79fa      	ldrb	r2, [r7, #7]
 800272a:	f107 0308 	add.w	r3, r7, #8
 800272e:	4611      	mov	r1, r2
 8002730:	4618      	mov	r0, r3
 8002732:	f7ff ff19 	bl	8002568 <outputSerial>

    sprintf(buffer, "TIME,CH1\n\r");
 8002736:	f107 0308 	add.w	r3, r7, #8
 800273a:	4940      	ldr	r1, [pc, #256]	; (800283c <outputCSV+0x290>)
 800273c:	4618      	mov	r0, r3
 800273e:	f005 fe5b 	bl	80083f8 <siprintf>
    outputSerial(buffer, o);
 8002742:	79fa      	ldrb	r2, [r7, #7]
 8002744:	f107 0308 	add.w	r3, r7, #8
 8002748:	4611      	mov	r1, r2
 800274a:	4618      	mov	r0, r3
 800274c:	f7ff ff0c 	bl	8002568 <outputSerial>

    for (int i = 0; i < BUFFER_LEN; i++)
 8002750:	2300      	movs	r3, #0
 8002752:	647b      	str	r3, [r7, #68]	; 0x44
 8002754:	e04a      	b.n	80027ec <outputCSV+0x240>
    {
        float voltage = atten * frontendVoltage(adcBuf[i]);
 8002756:	4b3a      	ldr	r3, [pc, #232]	; (8002840 <outputCSV+0x294>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	ee07 3a90 	vmov	s15, r3
 800275e:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8002762:	4a38      	ldr	r2, [pc, #224]	; (8002844 <outputCSV+0x298>)
 8002764:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002766:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800276a:	4618      	mov	r0, r3
 800276c:	f000 f9a0 	bl	8002ab0 <frontendVoltage>
 8002770:	eef0 7a40 	vmov.f32	s15, s0
 8002774:	ee68 7a27 	vmul.f32	s15, s16, s15
 8002778:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        printFloat(voltage, 1, st);
 800277c:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800277e:	f7fd fee3 	bl	8000548 <__aeabi_f2d>
 8002782:	4604      	mov	r4, r0
 8002784:	460d      	mov	r5, r1
 8002786:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800278a:	4619      	mov	r1, r3
 800278c:	2001      	movs	r0, #1
 800278e:	ec45 4b10 	vmov	d0, r4, r5
 8002792:	f7fe fda7 	bl	80012e4 <printFloat>
        printFloat((float)i * sampPer, 3, s1);
 8002796:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002798:	ee07 3a90 	vmov	s15, r3
 800279c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80027a0:	4b1f      	ldr	r3, [pc, #124]	; (8002820 <outputCSV+0x274>)
 80027a2:	edd3 7a00 	vldr	s15, [r3]
 80027a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027aa:	ee17 0a90 	vmov	r0, s15
 80027ae:	f7fd fecb 	bl	8000548 <__aeabi_f2d>
 80027b2:	4604      	mov	r4, r0
 80027b4:	460d      	mov	r5, r1
 80027b6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80027ba:	4619      	mov	r1, r3
 80027bc:	2003      	movs	r0, #3
 80027be:	ec45 4b10 	vmov	d0, r4, r5
 80027c2:	f7fe fd8f 	bl	80012e4 <printFloat>
        sprintf(buffer, "%sE-06,%s\n\r", s1, st);
 80027c6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80027ca:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80027ce:	f107 0008 	add.w	r0, r7, #8
 80027d2:	491d      	ldr	r1, [pc, #116]	; (8002848 <outputCSV+0x29c>)
 80027d4:	f005 fe10 	bl	80083f8 <siprintf>
        outputSerial(buffer, o);
 80027d8:	79fa      	ldrb	r2, [r7, #7]
 80027da:	f107 0308 	add.w	r3, r7, #8
 80027de:	4611      	mov	r1, r2
 80027e0:	4618      	mov	r0, r3
 80027e2:	f7ff fec1 	bl	8002568 <outputSerial>
    for (int i = 0; i < BUFFER_LEN; i++)
 80027e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027e8:	3301      	adds	r3, #1
 80027ea:	647b      	str	r3, [r7, #68]	; 0x44
 80027ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027ee:	2bff      	cmp	r3, #255	; 0xff
 80027f0:	ddb1      	ble.n	8002756 <outputCSV+0x1aa>
    }
}
 80027f2:	bf00      	nop
 80027f4:	bf00      	nop
 80027f6:	3748      	adds	r7, #72	; 0x48
 80027f8:	46bd      	mov	sp, r7
 80027fa:	ecbd 8b02 	vpop	{d8}
 80027fe:	bdb0      	pop	{r4, r5, r7, pc}
 8002800:	08009460 	.word	0x08009460
 8002804:	08009470 	.word	0x08009470
 8002808:	0800947c 	.word	0x0800947c
 800280c:	08009488 	.word	0x08009488
 8002810:	08009494 	.word	0x08009494
 8002814:	080094a8 	.word	0x080094a8
 8002818:	080094b4 	.word	0x080094b4
 800281c:	080094cc 	.word	0x080094cc
 8002820:	200004a0 	.word	0x200004a0
 8002824:	080094e4 	.word	0x080094e4
 8002828:	08009500 	.word	0x08009500
 800282c:	20000494 	.word	0x20000494
 8002830:	08009514 	.word	0x08009514
 8002834:	08009524 	.word	0x08009524
 8002838:	08009538 	.word	0x08009538
 800283c:	08009548 	.word	0x08009548
 8002840:	20000004 	.word	0x20000004
 8002844:	20000290 	.word	0x20000290
 8002848:	08009554 	.word	0x08009554

0800284c <outputTek>:

// This function dumps the captured waveform as raw data, for the TekScope data ingestion app
void outputTek(uint8_t o)
{
 800284c:	b5b0      	push	{r4, r5, r7, lr}
 800284e:	b090      	sub	sp, #64	; 0x40
 8002850:	af00      	add	r7, sp, #0
 8002852:	4603      	mov	r3, r0
 8002854:	71fb      	strb	r3, [r7, #7]
    char st[10];
    uint8_t buffer[30] = "";
 8002856:	2300      	movs	r3, #0
 8002858:	60fb      	str	r3, [r7, #12]
 800285a:	f107 0310 	add.w	r3, r7, #16
 800285e:	2200      	movs	r2, #0
 8002860:	601a      	str	r2, [r3, #0]
 8002862:	605a      	str	r2, [r3, #4]
 8002864:	609a      	str	r2, [r3, #8]
 8002866:	60da      	str	r2, [r3, #12]
 8002868:	611a      	str	r2, [r3, #16]
 800286a:	615a      	str	r2, [r3, #20]
 800286c:	831a      	strh	r2, [r3, #24]

    setCursor(2, 5);
 800286e:	2105      	movs	r1, #5
 8002870:	2002      	movs	r0, #2
 8002872:	f000 fe07 	bl	8003484 <setCursor>
    setTextColor(BLACK, WHITE);
 8002876:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800287a:	2000      	movs	r0, #0
 800287c:	f000 fe1a 	bl	80034b4 <setTextColor>
    printString("Sending data");
 8002880:	487d      	ldr	r0, [pc, #500]	; (8002a78 <outputTek+0x22c>)
 8002882:	f000 fea7 	bl	80035d4 <printString>
    if (o == 1)
 8002886:	79fb      	ldrb	r3, [r7, #7]
 8002888:	2b01      	cmp	r3, #1
 800288a:	d103      	bne.n	8002894 <outputTek+0x48>
        printString(" via USB");
 800288c:	487b      	ldr	r0, [pc, #492]	; (8002a7c <outputTek+0x230>)
 800288e:	f000 fea1 	bl	80035d4 <printString>
 8002892:	e002      	b.n	800289a <outputTek+0x4e>
    else
        printString(" via UART");
 8002894:	487a      	ldr	r0, [pc, #488]	; (8002a80 <outputTek+0x234>)
 8002896:	f000 fe9d 	bl	80035d4 <printString>
    flushDisplay();
 800289a:	f000 ffcf 	bl	800383c <flushDisplay>

    // transmission begin marker
    sprintf(buffer, "BeginWave!\n\r");
 800289e:	f107 030c 	add.w	r3, r7, #12
 80028a2:	4978      	ldr	r1, [pc, #480]	; (8002a84 <outputTek+0x238>)
 80028a4:	4618      	mov	r0, r3
 80028a6:	f005 fda7 	bl	80083f8 <siprintf>
    outputSerial(buffer, o);
 80028aa:	79fa      	ldrb	r2, [r7, #7]
 80028ac:	f107 030c 	add.w	r3, r7, #12
 80028b0:	4611      	mov	r1, r2
 80028b2:	4618      	mov	r0, r3
 80028b4:	f7ff fe58 	bl	8002568 <outputSerial>

    // sample period
    printFloat(sampPer, 2, st);
 80028b8:	4b73      	ldr	r3, [pc, #460]	; (8002a88 <outputTek+0x23c>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4618      	mov	r0, r3
 80028be:	f7fd fe43 	bl	8000548 <__aeabi_f2d>
 80028c2:	4604      	mov	r4, r0
 80028c4:	460d      	mov	r5, r1
 80028c6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80028ca:	4619      	mov	r1, r3
 80028cc:	2002      	movs	r0, #2
 80028ce:	ec45 4b10 	vmov	d0, r4, r5
 80028d2:	f7fe fd07 	bl	80012e4 <printFloat>
    sprintf(buffer, "%s\n\r", st);
 80028d6:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80028da:	f107 030c 	add.w	r3, r7, #12
 80028de:	496b      	ldr	r1, [pc, #428]	; (8002a8c <outputTek+0x240>)
 80028e0:	4618      	mov	r0, r3
 80028e2:	f005 fd89 	bl	80083f8 <siprintf>
    outputSerial(buffer, o);
 80028e6:	79fa      	ldrb	r2, [r7, #7]
 80028e8:	f107 030c 	add.w	r3, r7, #12
 80028ec:	4611      	mov	r1, r2
 80028ee:	4618      	mov	r0, r3
 80028f0:	f7ff fe3a 	bl	8002568 <outputSerial>

    // number of samples
    if (fast)
 80028f4:	4b66      	ldr	r3, [pc, #408]	; (8002a90 <outputTek+0x244>)
 80028f6:	781b      	ldrb	r3, [r3, #0]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d007      	beq.n	800290c <outputTek+0xc0>
        sprintf(buffer, "%d\n\r", BUFFER_LEN / 2);
 80028fc:	f107 030c 	add.w	r3, r7, #12
 8002900:	2280      	movs	r2, #128	; 0x80
 8002902:	4964      	ldr	r1, [pc, #400]	; (8002a94 <outputTek+0x248>)
 8002904:	4618      	mov	r0, r3
 8002906:	f005 fd77 	bl	80083f8 <siprintf>
 800290a:	e007      	b.n	800291c <outputTek+0xd0>
    else
        sprintf(buffer, "%d\n\r", BUFFER_LEN);
 800290c:	f107 030c 	add.w	r3, r7, #12
 8002910:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002914:	495f      	ldr	r1, [pc, #380]	; (8002a94 <outputTek+0x248>)
 8002916:	4618      	mov	r0, r3
 8002918:	f005 fd6e 	bl	80083f8 <siprintf>
    outputSerial(buffer, o);
 800291c:	79fa      	ldrb	r2, [r7, #7]
 800291e:	f107 030c 	add.w	r3, r7, #12
 8002922:	4611      	mov	r1, r2
 8002924:	4618      	mov	r0, r3
 8002926:	f7ff fe1f 	bl	8002568 <outputSerial>

    // trigger point in buffer
    if (fast)
 800292a:	4b59      	ldr	r3, [pc, #356]	; (8002a90 <outputTek+0x244>)
 800292c:	781b      	ldrb	r3, [r3, #0]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d007      	beq.n	8002942 <outputTek+0xf6>
        sprintf(buffer, "%d\n\r", 0);
 8002932:	f107 030c 	add.w	r3, r7, #12
 8002936:	2200      	movs	r2, #0
 8002938:	4956      	ldr	r1, [pc, #344]	; (8002a94 <outputTek+0x248>)
 800293a:	4618      	mov	r0, r3
 800293c:	f005 fd5c 	bl	80083f8 <siprintf>
 8002940:	e007      	b.n	8002952 <outputTek+0x106>
    else
        sprintf(buffer, "%d\n\r", trigPoint);
 8002942:	4b55      	ldr	r3, [pc, #340]	; (8002a98 <outputTek+0x24c>)
 8002944:	681a      	ldr	r2, [r3, #0]
 8002946:	f107 030c 	add.w	r3, r7, #12
 800294a:	4952      	ldr	r1, [pc, #328]	; (8002a94 <outputTek+0x248>)
 800294c:	4618      	mov	r0, r3
 800294e:	f005 fd53 	bl	80083f8 <siprintf>
    outputSerial(buffer, o);
 8002952:	79fa      	ldrb	r2, [r7, #7]
 8002954:	f107 030c 	add.w	r3, r7, #12
 8002958:	4611      	mov	r1, r2
 800295a:	4618      	mov	r0, r3
 800295c:	f7ff fe04 	bl	8002568 <outputSerial>

    // frontend offset voltage
    printFloat(offsetVoltage, 4, st);
 8002960:	4b4e      	ldr	r3, [pc, #312]	; (8002a9c <outputTek+0x250>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4618      	mov	r0, r3
 8002966:	f7fd fdef 	bl	8000548 <__aeabi_f2d>
 800296a:	4604      	mov	r4, r0
 800296c:	460d      	mov	r5, r1
 800296e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002972:	4619      	mov	r1, r3
 8002974:	2004      	movs	r0, #4
 8002976:	ec45 4b10 	vmov	d0, r4, r5
 800297a:	f7fe fcb3 	bl	80012e4 <printFloat>
    sprintf(buffer, "%s\n\r", st);
 800297e:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8002982:	f107 030c 	add.w	r3, r7, #12
 8002986:	4941      	ldr	r1, [pc, #260]	; (8002a8c <outputTek+0x240>)
 8002988:	4618      	mov	r0, r3
 800298a:	f005 fd35 	bl	80083f8 <siprintf>
    outputSerial(buffer, o);
 800298e:	79fa      	ldrb	r2, [r7, #7]
 8002990:	f107 030c 	add.w	r3, r7, #12
 8002994:	4611      	mov	r1, r2
 8002996:	4618      	mov	r0, r3
 8002998:	f7ff fde6 	bl	8002568 <outputSerial>

    // attenuation factor of the probe
    sprintf(buffer, "%d\n\r", atten);
 800299c:	4b40      	ldr	r3, [pc, #256]	; (8002aa0 <outputTek+0x254>)
 800299e:	681a      	ldr	r2, [r3, #0]
 80029a0:	f107 030c 	add.w	r3, r7, #12
 80029a4:	493b      	ldr	r1, [pc, #236]	; (8002a94 <outputTek+0x248>)
 80029a6:	4618      	mov	r0, r3
 80029a8:	f005 fd26 	bl	80083f8 <siprintf>
    outputSerial(buffer, o);
 80029ac:	79fa      	ldrb	r2, [r7, #7]
 80029ae:	f107 030c 	add.w	r3, r7, #12
 80029b2:	4611      	mov	r1, r2
 80029b4:	4618      	mov	r0, r3
 80029b6:	f7ff fdd7 	bl	8002568 <outputSerial>
    HAL_Delay(1);
 80029ba:	2001      	movs	r0, #1
 80029bc:	f001 fb1c 	bl	8003ff8 <HAL_Delay>

    // ADC samples
    if (fast)
 80029c0:	4b33      	ldr	r3, [pc, #204]	; (8002a90 <outputTek+0x244>)
 80029c2:	781b      	ldrb	r3, [r3, #0]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d01e      	beq.n	8002a06 <outputTek+0x1ba>
        for (int i = 0; i < BUFFER_LEN / 2; i++)
 80029c8:	2300      	movs	r3, #0
 80029ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80029cc:	e017      	b.n	80029fe <outputTek+0x1b2>
        {
            sprintf(buffer, "%d\n\r", adcBuf[i + trigPoint]);
 80029ce:	4b32      	ldr	r3, [pc, #200]	; (8002a98 <outputTek+0x24c>)
 80029d0:	681a      	ldr	r2, [r3, #0]
 80029d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029d4:	4413      	add	r3, r2
 80029d6:	4a33      	ldr	r2, [pc, #204]	; (8002aa4 <outputTek+0x258>)
 80029d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80029dc:	461a      	mov	r2, r3
 80029de:	f107 030c 	add.w	r3, r7, #12
 80029e2:	492c      	ldr	r1, [pc, #176]	; (8002a94 <outputTek+0x248>)
 80029e4:	4618      	mov	r0, r3
 80029e6:	f005 fd07 	bl	80083f8 <siprintf>
            outputSerial(buffer, o);
 80029ea:	79fa      	ldrb	r2, [r7, #7]
 80029ec:	f107 030c 	add.w	r3, r7, #12
 80029f0:	4611      	mov	r1, r2
 80029f2:	4618      	mov	r0, r3
 80029f4:	f7ff fdb8 	bl	8002568 <outputSerial>
        for (int i = 0; i < BUFFER_LEN / 2; i++)
 80029f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029fa:	3301      	adds	r3, #1
 80029fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80029fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a00:	2b7f      	cmp	r3, #127	; 0x7f
 8002a02:	dde4      	ble.n	80029ce <outputTek+0x182>
 8002a04:	e01a      	b.n	8002a3c <outputTek+0x1f0>
        }
    else
        for (int i = 0; i < BUFFER_LEN; i++)
 8002a06:	2300      	movs	r3, #0
 8002a08:	63bb      	str	r3, [r7, #56]	; 0x38
 8002a0a:	e014      	b.n	8002a36 <outputTek+0x1ea>
        {
            sprintf(buffer, "%d\n\r", adcBuf[i]);
 8002a0c:	4a25      	ldr	r2, [pc, #148]	; (8002aa4 <outputTek+0x258>)
 8002a0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a10:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002a14:	461a      	mov	r2, r3
 8002a16:	f107 030c 	add.w	r3, r7, #12
 8002a1a:	491e      	ldr	r1, [pc, #120]	; (8002a94 <outputTek+0x248>)
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f005 fceb 	bl	80083f8 <siprintf>
            outputSerial(buffer, o);
 8002a22:	79fa      	ldrb	r2, [r7, #7]
 8002a24:	f107 030c 	add.w	r3, r7, #12
 8002a28:	4611      	mov	r1, r2
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f7ff fd9c 	bl	8002568 <outputSerial>
        for (int i = 0; i < BUFFER_LEN; i++)
 8002a30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a32:	3301      	adds	r3, #1
 8002a34:	63bb      	str	r3, [r7, #56]	; 0x38
 8002a36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a38:	2bff      	cmp	r3, #255	; 0xff
 8002a3a:	dde7      	ble.n	8002a0c <outputTek+0x1c0>
        }
    // transmission end marker
    sprintf(buffer, "SendWaveComplete!\n\r");
 8002a3c:	f107 030c 	add.w	r3, r7, #12
 8002a40:	4919      	ldr	r1, [pc, #100]	; (8002aa8 <outputTek+0x25c>)
 8002a42:	4618      	mov	r0, r3
 8002a44:	f005 fcd8 	bl	80083f8 <siprintf>
    outputSerial(buffer, o);
 8002a48:	79fa      	ldrb	r2, [r7, #7]
 8002a4a:	f107 030c 	add.w	r3, r7, #12
 8002a4e:	4611      	mov	r1, r2
 8002a50:	4618      	mov	r0, r3
 8002a52:	f7ff fd89 	bl	8002568 <outputSerial>
    sprintf(buffer, "\n\r");
 8002a56:	f107 030c 	add.w	r3, r7, #12
 8002a5a:	4914      	ldr	r1, [pc, #80]	; (8002aac <outputTek+0x260>)
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	f005 fccb 	bl	80083f8 <siprintf>
    outputSerial(buffer, o);
 8002a62:	79fa      	ldrb	r2, [r7, #7]
 8002a64:	f107 030c 	add.w	r3, r7, #12
 8002a68:	4611      	mov	r1, r2
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f7ff fd7c 	bl	8002568 <outputSerial>
}
 8002a70:	bf00      	nop
 8002a72:	3740      	adds	r7, #64	; 0x40
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bdb0      	pop	{r4, r5, r7, pc}
 8002a78:	08009460 	.word	0x08009460
 8002a7c:	08009470 	.word	0x08009470
 8002a80:	0800947c 	.word	0x0800947c
 8002a84:	08009560 	.word	0x08009560
 8002a88:	200004a0 	.word	0x200004a0
 8002a8c:	08009570 	.word	0x08009570
 8002a90:	2000001c 	.word	0x2000001c
 8002a94:	08009578 	.word	0x08009578
 8002a98:	20000494 	.word	0x20000494
 8002a9c:	20000014 	.word	0x20000014
 8002aa0:	20000004 	.word	0x20000004
 8002aa4:	20000290 	.word	0x20000290
 8002aa8:	08009580 	.word	0x08009580
 8002aac:	08009594 	.word	0x08009594

08002ab0 <frontendVoltage>:

uint8_t topClip, bottomClip; // Whether or not we're clipping through the graticule

// Convert ADC sample to voltage at frontend input
float frontendVoltage(uint16_t samp)
{
 8002ab0:	b5b0      	push	{r4, r5, r7, lr}
 8002ab2:	b082      	sub	sp, #8
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	80fb      	strh	r3, [r7, #6]
    return 2 * (((3.3 * samp) / 4096.0) - offsetVoltage);
 8002aba:	88fb      	ldrh	r3, [r7, #6]
 8002abc:	4618      	mov	r0, r3
 8002abe:	f7fd fd31 	bl	8000524 <__aeabi_i2d>
 8002ac2:	a31b      	add	r3, pc, #108	; (adr r3, 8002b30 <frontendVoltage+0x80>)
 8002ac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ac8:	f7fd fd96 	bl	80005f8 <__aeabi_dmul>
 8002acc:	4602      	mov	r2, r0
 8002ace:	460b      	mov	r3, r1
 8002ad0:	4610      	mov	r0, r2
 8002ad2:	4619      	mov	r1, r3
 8002ad4:	f04f 0200 	mov.w	r2, #0
 8002ad8:	4b13      	ldr	r3, [pc, #76]	; (8002b28 <frontendVoltage+0x78>)
 8002ada:	f7fd feb7 	bl	800084c <__aeabi_ddiv>
 8002ade:	4602      	mov	r2, r0
 8002ae0:	460b      	mov	r3, r1
 8002ae2:	4614      	mov	r4, r2
 8002ae4:	461d      	mov	r5, r3
 8002ae6:	4b11      	ldr	r3, [pc, #68]	; (8002b2c <frontendVoltage+0x7c>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4618      	mov	r0, r3
 8002aec:	f7fd fd2c 	bl	8000548 <__aeabi_f2d>
 8002af0:	4602      	mov	r2, r0
 8002af2:	460b      	mov	r3, r1
 8002af4:	4620      	mov	r0, r4
 8002af6:	4629      	mov	r1, r5
 8002af8:	f7fd fbc6 	bl	8000288 <__aeabi_dsub>
 8002afc:	4602      	mov	r2, r0
 8002afe:	460b      	mov	r3, r1
 8002b00:	4610      	mov	r0, r2
 8002b02:	4619      	mov	r1, r3
 8002b04:	4602      	mov	r2, r0
 8002b06:	460b      	mov	r3, r1
 8002b08:	f7fd fbc0 	bl	800028c <__adddf3>
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	460b      	mov	r3, r1
 8002b10:	4610      	mov	r0, r2
 8002b12:	4619      	mov	r1, r3
 8002b14:	f7fd ffaa 	bl	8000a6c <__aeabi_d2f>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	ee07 3a90 	vmov	s15, r3
}
 8002b1e:	eeb0 0a67 	vmov.f32	s0, s15
 8002b22:	3708      	adds	r7, #8
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bdb0      	pop	{r4, r5, r7, pc}
 8002b28:	40b00000 	.word	0x40b00000
 8002b2c:	20000014 	.word	0x20000014
 8002b30:	66666666 	.word	0x66666666
 8002b34:	400a6666 	.word	0x400a6666

08002b38 <adcToVoltage>:

// Convert ADC sample to voltage at ADC input
float adcToVoltage(uint16_t samp)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b082      	sub	sp, #8
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	4603      	mov	r3, r0
 8002b40:	80fb      	strh	r3, [r7, #6]
    return (3.3 * samp) / 4096.0;
 8002b42:	88fb      	ldrh	r3, [r7, #6]
 8002b44:	4618      	mov	r0, r3
 8002b46:	f7fd fced 	bl	8000524 <__aeabi_i2d>
 8002b4a:	a310      	add	r3, pc, #64	; (adr r3, 8002b8c <adcToVoltage+0x54>)
 8002b4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b50:	f7fd fd52 	bl	80005f8 <__aeabi_dmul>
 8002b54:	4602      	mov	r2, r0
 8002b56:	460b      	mov	r3, r1
 8002b58:	4610      	mov	r0, r2
 8002b5a:	4619      	mov	r1, r3
 8002b5c:	f04f 0200 	mov.w	r2, #0
 8002b60:	4b09      	ldr	r3, [pc, #36]	; (8002b88 <adcToVoltage+0x50>)
 8002b62:	f7fd fe73 	bl	800084c <__aeabi_ddiv>
 8002b66:	4602      	mov	r2, r0
 8002b68:	460b      	mov	r3, r1
 8002b6a:	4610      	mov	r0, r2
 8002b6c:	4619      	mov	r1, r3
 8002b6e:	f7fd ff7d 	bl	8000a6c <__aeabi_d2f>
 8002b72:	4603      	mov	r3, r0
 8002b74:	ee07 3a90 	vmov	s15, r3
}
 8002b78:	eeb0 0a67 	vmov.f32	s0, s15
 8002b7c:	3708      	adds	r7, #8
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}
 8002b82:	bf00      	nop
 8002b84:	f3af 8000 	nop.w
 8002b88:	40b00000 	.word	0x40b00000
 8002b8c:	66666666 	.word	0x66666666
 8002b90:	400a6666 	.word	0x400a6666

08002b94 <drawGraticule>:

// This function draws the graticule onto the screen
void drawGraticule(uint16_t divx, uint16_t divy, uint16_t pix)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b086      	sub	sp, #24
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	80fb      	strh	r3, [r7, #6]
 8002b9e:	460b      	mov	r3, r1
 8002ba0:	80bb      	strh	r3, [r7, #4]
 8002ba2:	4613      	mov	r3, r2
 8002ba4:	807b      	strh	r3, [r7, #2]
    uint16_t wit = divx * pix;
 8002ba6:	88fa      	ldrh	r2, [r7, #6]
 8002ba8:	887b      	ldrh	r3, [r7, #2]
 8002baa:	fb12 f303 	smulbb	r3, r2, r3
 8002bae:	81fb      	strh	r3, [r7, #14]
    uint16_t hei = divy * pix;
 8002bb0:	88ba      	ldrh	r2, [r7, #4]
 8002bb2:	887b      	ldrh	r3, [r7, #2]
 8002bb4:	fb12 f303 	smulbb	r3, r2, r3
 8002bb8:	81bb      	strh	r3, [r7, #12]

    for (int i = 0; i <= wit; i += pix)
 8002bba:	2300      	movs	r3, #0
 8002bbc:	617b      	str	r3, [r7, #20]
 8002bbe:	e009      	b.n	8002bd4 <drawGraticule+0x40>
        dottedVLine(i, 0, hei);
 8002bc0:	89bb      	ldrh	r3, [r7, #12]
 8002bc2:	461a      	mov	r2, r3
 8002bc4:	2100      	movs	r1, #0
 8002bc6:	6978      	ldr	r0, [r7, #20]
 8002bc8:	f000 f854 	bl	8002c74 <dottedVLine>
    for (int i = 0; i <= wit; i += pix)
 8002bcc:	887b      	ldrh	r3, [r7, #2]
 8002bce:	697a      	ldr	r2, [r7, #20]
 8002bd0:	4413      	add	r3, r2
 8002bd2:	617b      	str	r3, [r7, #20]
 8002bd4:	89fb      	ldrh	r3, [r7, #14]
 8002bd6:	697a      	ldr	r2, [r7, #20]
 8002bd8:	429a      	cmp	r2, r3
 8002bda:	ddf1      	ble.n	8002bc0 <drawGraticule+0x2c>

    for (int i = 0; i <= hei; i += pix)
 8002bdc:	2300      	movs	r3, #0
 8002bde:	613b      	str	r3, [r7, #16]
 8002be0:	e009      	b.n	8002bf6 <drawGraticule+0x62>
        dottedHLine(0, i, wit);
 8002be2:	89fb      	ldrh	r3, [r7, #14]
 8002be4:	461a      	mov	r2, r3
 8002be6:	6939      	ldr	r1, [r7, #16]
 8002be8:	2000      	movs	r0, #0
 8002bea:	f000 f80d 	bl	8002c08 <dottedHLine>
    for (int i = 0; i <= hei; i += pix)
 8002bee:	887b      	ldrh	r3, [r7, #2]
 8002bf0:	693a      	ldr	r2, [r7, #16]
 8002bf2:	4413      	add	r3, r2
 8002bf4:	613b      	str	r3, [r7, #16]
 8002bf6:	89bb      	ldrh	r3, [r7, #12]
 8002bf8:	693a      	ldr	r2, [r7, #16]
 8002bfa:	429a      	cmp	r2, r3
 8002bfc:	ddf1      	ble.n	8002be2 <drawGraticule+0x4e>
}
 8002bfe:	bf00      	nop
 8002c00:	bf00      	nop
 8002c02:	3718      	adds	r7, #24
 8002c04:	46bd      	mov	sp, r7
 8002c06:	bd80      	pop	{r7, pc}

08002c08 <dottedHLine>:

// This function draws a dotted horizontal line, used for drawing the graticule
void dottedHLine(int x, int y, int l)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b086      	sub	sp, #24
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	60f8      	str	r0, [r7, #12]
 8002c10:	60b9      	str	r1, [r7, #8]
 8002c12:	607a      	str	r2, [r7, #4]
    for (int i = 0; i <= l; i++)
 8002c14:	2300      	movs	r3, #0
 8002c16:	617b      	str	r3, [r7, #20]
 8002c18:	e023      	b.n	8002c62 <dottedHLine+0x5a>
    {
        if (i % 2)
 8002c1a:	697b      	ldr	r3, [r7, #20]
 8002c1c:	f003 0301 	and.w	r3, r3, #1
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d00e      	beq.n	8002c42 <dottedHLine+0x3a>
            drawPixel(x + i, y, WHITE);
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	b29a      	uxth	r2, r3
 8002c28:	697b      	ldr	r3, [r7, #20]
 8002c2a:	b29b      	uxth	r3, r3
 8002c2c:	4413      	add	r3, r2
 8002c2e:	b29b      	uxth	r3, r3
 8002c30:	b21b      	sxth	r3, r3
 8002c32:	68ba      	ldr	r2, [r7, #8]
 8002c34:	b211      	sxth	r1, r2
 8002c36:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f001 f946 	bl	8003ecc <drawPixel>
 8002c40:	e00c      	b.n	8002c5c <dottedHLine+0x54>
        else
            drawPixel(x + i, y, BLACK);
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	b29a      	uxth	r2, r3
 8002c46:	697b      	ldr	r3, [r7, #20]
 8002c48:	b29b      	uxth	r3, r3
 8002c4a:	4413      	add	r3, r2
 8002c4c:	b29b      	uxth	r3, r3
 8002c4e:	b21b      	sxth	r3, r3
 8002c50:	68ba      	ldr	r2, [r7, #8]
 8002c52:	b211      	sxth	r1, r2
 8002c54:	2200      	movs	r2, #0
 8002c56:	4618      	mov	r0, r3
 8002c58:	f001 f938 	bl	8003ecc <drawPixel>
    for (int i = 0; i <= l; i++)
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	3301      	adds	r3, #1
 8002c60:	617b      	str	r3, [r7, #20]
 8002c62:	697a      	ldr	r2, [r7, #20]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	429a      	cmp	r2, r3
 8002c68:	ddd7      	ble.n	8002c1a <dottedHLine+0x12>
    }
}
 8002c6a:	bf00      	nop
 8002c6c:	bf00      	nop
 8002c6e:	3718      	adds	r7, #24
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bd80      	pop	{r7, pc}

08002c74 <dottedVLine>:

// This function draws a dotted vertical line, used for drawing the graticule
void dottedVLine(int x, int y, int l)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b086      	sub	sp, #24
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	60f8      	str	r0, [r7, #12]
 8002c7c:	60b9      	str	r1, [r7, #8]
 8002c7e:	607a      	str	r2, [r7, #4]
    for (int i = 0; i <= l; i++)
 8002c80:	2300      	movs	r3, #0
 8002c82:	617b      	str	r3, [r7, #20]
 8002c84:	e023      	b.n	8002cce <dottedVLine+0x5a>
    {
        if (i % 2)
 8002c86:	697b      	ldr	r3, [r7, #20]
 8002c88:	f003 0301 	and.w	r3, r3, #1
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d00e      	beq.n	8002cae <dottedVLine+0x3a>
            drawPixel(x, y + i, WHITE);
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	b218      	sxth	r0, r3
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	b29a      	uxth	r2, r3
 8002c98:	697b      	ldr	r3, [r7, #20]
 8002c9a:	b29b      	uxth	r3, r3
 8002c9c:	4413      	add	r3, r2
 8002c9e:	b29b      	uxth	r3, r3
 8002ca0:	b21b      	sxth	r3, r3
 8002ca2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002ca6:	4619      	mov	r1, r3
 8002ca8:	f001 f910 	bl	8003ecc <drawPixel>
 8002cac:	e00c      	b.n	8002cc8 <dottedVLine+0x54>
        else
            drawPixel(x, y + i, BLACK);
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	b218      	sxth	r0, r3
 8002cb2:	68bb      	ldr	r3, [r7, #8]
 8002cb4:	b29a      	uxth	r2, r3
 8002cb6:	697b      	ldr	r3, [r7, #20]
 8002cb8:	b29b      	uxth	r3, r3
 8002cba:	4413      	add	r3, r2
 8002cbc:	b29b      	uxth	r3, r3
 8002cbe:	b21b      	sxth	r3, r3
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	4619      	mov	r1, r3
 8002cc4:	f001 f902 	bl	8003ecc <drawPixel>
    for (int i = 0; i <= l; i++)
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	3301      	adds	r3, #1
 8002ccc:	617b      	str	r3, [r7, #20]
 8002cce:	697a      	ldr	r2, [r7, #20]
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	429a      	cmp	r2, r3
 8002cd4:	ddd7      	ble.n	8002c86 <dottedVLine+0x12>
    }
}
 8002cd6:	bf00      	nop
 8002cd8:	bf00      	nop
 8002cda:	3718      	adds	r7, #24
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bd80      	pop	{r7, pc}

08002ce0 <drawTrace>:

// Draw the waveform trace on the screen
void drawTrace(uint16_t buf[], uint16_t trigPoint, uint16_t col)
{
 8002ce0:	b590      	push	{r4, r7, lr}
 8002ce2:	ed2d 8b02 	vpush	{d8}
 8002ce6:	b089      	sub	sp, #36	; 0x24
 8002ce8:	af02      	add	r7, sp, #8
 8002cea:	6078      	str	r0, [r7, #4]
 8002cec:	460b      	mov	r3, r1
 8002cee:	807b      	strh	r3, [r7, #2]
 8002cf0:	4613      	mov	r3, r2
 8002cf2:	803b      	strh	r3, [r7, #0]

    maxVoltage = LOWER_VOLTAGE;
 8002cf4:	4b74      	ldr	r3, [pc, #464]	; (8002ec8 <drawTrace+0x1e8>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	f7fd fc13 	bl	8000524 <__aeabi_i2d>
 8002cfe:	a36e      	add	r3, pc, #440	; (adr r3, 8002eb8 <drawTrace+0x1d8>)
 8002d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d04:	f7fd fc78 	bl	80005f8 <__aeabi_dmul>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	460b      	mov	r3, r1
 8002d0c:	4610      	mov	r0, r2
 8002d0e:	4619      	mov	r1, r3
 8002d10:	f7fd feac 	bl	8000a6c <__aeabi_d2f>
 8002d14:	4603      	mov	r3, r0
 8002d16:	4a6d      	ldr	r2, [pc, #436]	; (8002ecc <drawTrace+0x1ec>)
 8002d18:	6013      	str	r3, [r2, #0]
    minVoltage = UPPER_VOLTAGE;
 8002d1a:	4b6b      	ldr	r3, [pc, #428]	; (8002ec8 <drawTrace+0x1e8>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f7fd fc00 	bl	8000524 <__aeabi_i2d>
 8002d24:	a366      	add	r3, pc, #408	; (adr r3, 8002ec0 <drawTrace+0x1e0>)
 8002d26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d2a:	f7fd fc65 	bl	80005f8 <__aeabi_dmul>
 8002d2e:	4602      	mov	r2, r0
 8002d30:	460b      	mov	r3, r1
 8002d32:	4610      	mov	r0, r2
 8002d34:	4619      	mov	r1, r3
 8002d36:	f7fd fe99 	bl	8000a6c <__aeabi_d2f>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	4a64      	ldr	r2, [pc, #400]	; (8002ed0 <drawTrace+0x1f0>)
 8002d3e:	6013      	str	r3, [r2, #0]

    for (int i = 0; i <= BUFFER_LEN / 2; i++)
 8002d40:	2300      	movs	r3, #0
 8002d42:	617b      	str	r3, [r7, #20]
 8002d44:	e0ab      	b.n	8002e9e <drawTrace+0x1be>
    {
        // If we're looping through the buffer, let's compute the minimum and maximum voltage values while we're at it
        float voltage1 = atten * frontendVoltage(buf[i + trigPoint]);
 8002d46:	4b60      	ldr	r3, [pc, #384]	; (8002ec8 <drawTrace+0x1e8>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	ee07 3a90 	vmov	s15, r3
 8002d4e:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8002d52:	887a      	ldrh	r2, [r7, #2]
 8002d54:	697b      	ldr	r3, [r7, #20]
 8002d56:	4413      	add	r3, r2
 8002d58:	005b      	lsls	r3, r3, #1
 8002d5a:	687a      	ldr	r2, [r7, #4]
 8002d5c:	4413      	add	r3, r2
 8002d5e:	881b      	ldrh	r3, [r3, #0]
 8002d60:	4618      	mov	r0, r3
 8002d62:	f7ff fea5 	bl	8002ab0 <frontendVoltage>
 8002d66:	eef0 7a40 	vmov.f32	s15, s0
 8002d6a:	ee68 7a27 	vmul.f32	s15, s16, s15
 8002d6e:	edc7 7a03 	vstr	s15, [r7, #12]
        float voltage2 = atten * frontendVoltage(buf[i + trigPoint + 1]);
 8002d72:	4b55      	ldr	r3, [pc, #340]	; (8002ec8 <drawTrace+0x1e8>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	ee07 3a90 	vmov	s15, r3
 8002d7a:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8002d7e:	887a      	ldrh	r2, [r7, #2]
 8002d80:	697b      	ldr	r3, [r7, #20]
 8002d82:	4413      	add	r3, r2
 8002d84:	3301      	adds	r3, #1
 8002d86:	005b      	lsls	r3, r3, #1
 8002d88:	687a      	ldr	r2, [r7, #4]
 8002d8a:	4413      	add	r3, r2
 8002d8c:	881b      	ldrh	r3, [r3, #0]
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f7ff fe8e 	bl	8002ab0 <frontendVoltage>
 8002d94:	eef0 7a40 	vmov.f32	s15, s0
 8002d98:	ee68 7a27 	vmul.f32	s15, s16, s15
 8002d9c:	edc7 7a02 	vstr	s15, [r7, #8]
        if (voltage2 > maxVoltage)
 8002da0:	4b4a      	ldr	r3, [pc, #296]	; (8002ecc <drawTrace+0x1ec>)
 8002da2:	edd3 7a00 	vldr	s15, [r3]
 8002da6:	ed97 7a02 	vldr	s14, [r7, #8]
 8002daa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002dae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002db2:	dd02      	ble.n	8002dba <drawTrace+0xda>
            maxVoltage = voltage2;
 8002db4:	4a45      	ldr	r2, [pc, #276]	; (8002ecc <drawTrace+0x1ec>)
 8002db6:	68bb      	ldr	r3, [r7, #8]
 8002db8:	6013      	str	r3, [r2, #0]
        if (voltage2 < minVoltage)
 8002dba:	4b45      	ldr	r3, [pc, #276]	; (8002ed0 <drawTrace+0x1f0>)
 8002dbc:	edd3 7a00 	vldr	s15, [r3]
 8002dc0:	ed97 7a02 	vldr	s14, [r7, #8]
 8002dc4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002dc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dcc:	d502      	bpl.n	8002dd4 <drawTrace+0xf4>
            minVoltage = voltage2;
 8002dce:	4a40      	ldr	r2, [pc, #256]	; (8002ed0 <drawTrace+0x1f0>)
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	6013      	str	r3, [r2, #0]

        // Draw lines between sample points
        topClip = 0;
 8002dd4:	4b3f      	ldr	r3, [pc, #252]	; (8002ed4 <drawTrace+0x1f4>)
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	701a      	strb	r2, [r3, #0]
        bottomClip = 0;
 8002dda:	4b3f      	ldr	r3, [pc, #252]	; (8002ed8 <drawTrace+0x1f8>)
 8002ddc:	2200      	movs	r2, #0
 8002dde:	701a      	strb	r2, [r3, #0]
        int16_t y1 = (PIXDIV * YDIV / 2 - 1) - (voltage1 * PIXDIV / vdiv);
 8002de0:	edd7 7a03 	vldr	s15, [r7, #12]
 8002de4:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8002de8:	ee67 6a87 	vmul.f32	s13, s15, s14
 8002dec:	4b3b      	ldr	r3, [pc, #236]	; (8002edc <drawTrace+0x1fc>)
 8002dee:	ed93 7a00 	vldr	s14, [r3]
 8002df2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002df6:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 8002ee0 <drawTrace+0x200>
 8002dfa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002dfe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002e02:	ee17 3a90 	vmov	r3, s15
 8002e06:	827b      	strh	r3, [r7, #18]
        int16_t y2 = (PIXDIV * YDIV / 2 - 1) - (voltage2 * PIXDIV / vdiv);
 8002e08:	edd7 7a02 	vldr	s15, [r7, #8]
 8002e0c:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8002e10:	ee67 6a87 	vmul.f32	s13, s15, s14
 8002e14:	4b31      	ldr	r3, [pc, #196]	; (8002edc <drawTrace+0x1fc>)
 8002e16:	ed93 7a00 	vldr	s14, [r3]
 8002e1a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002e1e:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8002ee0 <drawTrace+0x200>
 8002e22:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e26:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002e2a:	ee17 3a90 	vmov	r3, s15
 8002e2e:	823b      	strh	r3, [r7, #16]
        if (y1 > YDIV * PIXDIV)
 8002e30:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002e34:	2b60      	cmp	r3, #96	; 0x60
 8002e36:	dd04      	ble.n	8002e42 <drawTrace+0x162>
        {
            y1 = YDIV * PIXDIV;
 8002e38:	2360      	movs	r3, #96	; 0x60
 8002e3a:	827b      	strh	r3, [r7, #18]
            bottomClip = 1;
 8002e3c:	4b26      	ldr	r3, [pc, #152]	; (8002ed8 <drawTrace+0x1f8>)
 8002e3e:	2201      	movs	r2, #1
 8002e40:	701a      	strb	r2, [r3, #0]
        }
        if (y2 > YDIV * PIXDIV)
 8002e42:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002e46:	2b60      	cmp	r3, #96	; 0x60
 8002e48:	dd04      	ble.n	8002e54 <drawTrace+0x174>
        {
            y2 = YDIV * PIXDIV;
 8002e4a:	2360      	movs	r3, #96	; 0x60
 8002e4c:	823b      	strh	r3, [r7, #16]
            bottomClip = 1;
 8002e4e:	4b22      	ldr	r3, [pc, #136]	; (8002ed8 <drawTrace+0x1f8>)
 8002e50:	2201      	movs	r2, #1
 8002e52:	701a      	strb	r2, [r3, #0]
        }
        if (y1 < 0)
 8002e54:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	da04      	bge.n	8002e66 <drawTrace+0x186>
        {
            y1 = 0;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	827b      	strh	r3, [r7, #18]
            topClip = 1;
 8002e60:	4b1c      	ldr	r3, [pc, #112]	; (8002ed4 <drawTrace+0x1f4>)
 8002e62:	2201      	movs	r2, #1
 8002e64:	701a      	strb	r2, [r3, #0]
        }
        if (y2 < 0)
 8002e66:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	da04      	bge.n	8002e78 <drawTrace+0x198>
        {
            y2 = 0;
 8002e6e:	2300      	movs	r3, #0
 8002e70:	823b      	strh	r3, [r7, #16]
            topClip = 1;
 8002e72:	4b18      	ldr	r3, [pc, #96]	; (8002ed4 <drawTrace+0x1f4>)
 8002e74:	2201      	movs	r2, #1
 8002e76:	701a      	strb	r2, [r3, #0]
        }
        drawLine(i, y1, i + 1, y2, col);
 8002e78:	697b      	ldr	r3, [r7, #20]
 8002e7a:	b218      	sxth	r0, r3
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	b29b      	uxth	r3, r3
 8002e80:	3301      	adds	r3, #1
 8002e82:	b29b      	uxth	r3, r3
 8002e84:	b21a      	sxth	r2, r3
 8002e86:	f9b7 4010 	ldrsh.w	r4, [r7, #16]
 8002e8a:	f9b7 1012 	ldrsh.w	r1, [r7, #18]
 8002e8e:	883b      	ldrh	r3, [r7, #0]
 8002e90:	9300      	str	r3, [sp, #0]
 8002e92:	4623      	mov	r3, r4
 8002e94:	f000 fc13 	bl	80036be <drawLine>
    for (int i = 0; i <= BUFFER_LEN / 2; i++)
 8002e98:	697b      	ldr	r3, [r7, #20]
 8002e9a:	3301      	adds	r3, #1
 8002e9c:	617b      	str	r3, [r7, #20]
 8002e9e:	697b      	ldr	r3, [r7, #20]
 8002ea0:	2b80      	cmp	r3, #128	; 0x80
 8002ea2:	f77f af50 	ble.w	8002d46 <drawTrace+0x66>
    }
}
 8002ea6:	bf00      	nop
 8002ea8:	bf00      	nop
 8002eaa:	371c      	adds	r7, #28
 8002eac:	46bd      	mov	sp, r7
 8002eae:	ecbd 8b02 	vpop	{d8}
 8002eb2:	bd90      	pop	{r4, r7, pc}
 8002eb4:	f3af 8000 	nop.w
 8002eb8:	66666666 	.word	0x66666666
 8002ebc:	c00a6666 	.word	0xc00a6666
 8002ec0:	66666666 	.word	0x66666666
 8002ec4:	400a6666 	.word	0x400a6666
 8002ec8:	20000004 	.word	0x20000004
 8002ecc:	200004a4 	.word	0x200004a4
 8002ed0:	200004a8 	.word	0x200004a8
 8002ed4:	200004cb 	.word	0x200004cb
 8002ed8:	200004cc 	.word	0x200004cc
 8002edc:	20000008 	.word	0x20000008
 8002ee0:	423c0000 	.word	0x423c0000

08002ee4 <traceScreen>:

// Draw the trace and graticule on the screen
void traceScreen()
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	af00      	add	r7, sp, #0
    drawGraticule(XDIV, YDIV, PIXDIV); // Draw the graticule
 8002ee8:	2210      	movs	r2, #16
 8002eea:	2106      	movs	r1, #6
 8002eec:	2008      	movs	r0, #8
 8002eee:	f7ff fe51 	bl	8002b94 <drawGraticule>
    drawTrace(adcBuf, trigPoint, WAVE_COLOR);
 8002ef2:	4b05      	ldr	r3, [pc, #20]	; (8002f08 <traceScreen+0x24>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	b29b      	uxth	r3, r3
 8002ef8:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8002efc:	4619      	mov	r1, r3
 8002efe:	4803      	ldr	r0, [pc, #12]	; (8002f0c <traceScreen+0x28>)
 8002f00:	f7ff feee 	bl	8002ce0 <drawTrace>
}
 8002f04:	bf00      	nop
 8002f06:	bd80      	pop	{r7, pc}
 8002f08:	20000494 	.word	0x20000494
 8002f0c:	20000290 	.word	0x20000290

08002f10 <findTrigger>:

// This function finds the trigger point and also computes the frequency of thge signal
void findTrigger(uint16_t adcBuf[])
{
 8002f10:	b5b0      	push	{r4, r5, r7, lr}
 8002f12:	b086      	sub	sp, #24
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
    int trigLevel = (4096.0 * (trigVoltage / (2.0 * atten) + offsetVoltage)) / 3.3; // ADC level at which we should trigger
 8002f18:	4b5f      	ldr	r3, [pc, #380]	; (8003098 <findTrigger+0x188>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	f7fd fb13 	bl	8000548 <__aeabi_f2d>
 8002f22:	4604      	mov	r4, r0
 8002f24:	460d      	mov	r5, r1
 8002f26:	4b5d      	ldr	r3, [pc, #372]	; (800309c <findTrigger+0x18c>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f7fd fafa 	bl	8000524 <__aeabi_i2d>
 8002f30:	4602      	mov	r2, r0
 8002f32:	460b      	mov	r3, r1
 8002f34:	f7fd f9aa 	bl	800028c <__adddf3>
 8002f38:	4602      	mov	r2, r0
 8002f3a:	460b      	mov	r3, r1
 8002f3c:	4620      	mov	r0, r4
 8002f3e:	4629      	mov	r1, r5
 8002f40:	f7fd fc84 	bl	800084c <__aeabi_ddiv>
 8002f44:	4602      	mov	r2, r0
 8002f46:	460b      	mov	r3, r1
 8002f48:	4614      	mov	r4, r2
 8002f4a:	461d      	mov	r5, r3
 8002f4c:	4b54      	ldr	r3, [pc, #336]	; (80030a0 <findTrigger+0x190>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4618      	mov	r0, r3
 8002f52:	f7fd faf9 	bl	8000548 <__aeabi_f2d>
 8002f56:	4602      	mov	r2, r0
 8002f58:	460b      	mov	r3, r1
 8002f5a:	4620      	mov	r0, r4
 8002f5c:	4629      	mov	r1, r5
 8002f5e:	f7fd f995 	bl	800028c <__adddf3>
 8002f62:	4602      	mov	r2, r0
 8002f64:	460b      	mov	r3, r1
 8002f66:	4610      	mov	r0, r2
 8002f68:	4619      	mov	r1, r3
 8002f6a:	f04f 0200 	mov.w	r2, #0
 8002f6e:	4b4d      	ldr	r3, [pc, #308]	; (80030a4 <findTrigger+0x194>)
 8002f70:	f7fd fb42 	bl	80005f8 <__aeabi_dmul>
 8002f74:	4602      	mov	r2, r0
 8002f76:	460b      	mov	r3, r1
 8002f78:	4610      	mov	r0, r2
 8002f7a:	4619      	mov	r1, r3
 8002f7c:	a344      	add	r3, pc, #272	; (adr r3, 8003090 <findTrigger+0x180>)
 8002f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f82:	f7fd fc63 	bl	800084c <__aeabi_ddiv>
 8002f86:	4602      	mov	r2, r0
 8002f88:	460b      	mov	r3, r1
 8002f8a:	4610      	mov	r0, r2
 8002f8c:	4619      	mov	r1, r3
 8002f8e:	f7fd fd45 	bl	8000a1c <__aeabi_d2iz>
 8002f92:	4603      	mov	r3, r0
 8002f94:	60fb      	str	r3, [r7, #12]
    int trigPoint2;                                                                 // another trigger point, this will help us determine the period of the signal

    trigPoint = 0;
 8002f96:	4b44      	ldr	r3, [pc, #272]	; (80030a8 <findTrigger+0x198>)
 8002f98:	2200      	movs	r2, #0
 8002f9a:	601a      	str	r2, [r3, #0]
    trigged = 0;
 8002f9c:	4b43      	ldr	r3, [pc, #268]	; (80030ac <findTrigger+0x19c>)
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	701a      	strb	r2, [r3, #0]
    measuredFreq = 0;
 8002fa2:	4b43      	ldr	r3, [pc, #268]	; (80030b0 <findTrigger+0x1a0>)
 8002fa4:	f04f 0200 	mov.w	r2, #0
 8002fa8:	601a      	str	r2, [r3, #0]

    // The trigged variable will be 0 if we're not triggering, 1 if we only found 1 trigger point and 2 if we have at least two trigger points

    for (int i = 1; i < BUFFER_LEN / 2 && trigged != 2; i++) // we're looking for trigger points in the first half of the buffer
 8002faa:	2301      	movs	r3, #1
 8002fac:	613b      	str	r3, [r7, #16]
 8002fae:	e044      	b.n	800303a <findTrigger+0x12a>
        if ((trig == RISING && adcBuf[i] >= trigLevel && adcBuf[i - 1] < trigLevel) || (trig == FALLING && adcBuf[i] <= trigLevel && adcBuf[i - 1] > trigLevel))
 8002fb0:	4b40      	ldr	r3, [pc, #256]	; (80030b4 <findTrigger+0x1a4>)
 8002fb2:	781b      	ldrb	r3, [r3, #0]
 8002fb4:	2b01      	cmp	r3, #1
 8002fb6:	d114      	bne.n	8002fe2 <findTrigger+0xd2>
 8002fb8:	693b      	ldr	r3, [r7, #16]
 8002fba:	005b      	lsls	r3, r3, #1
 8002fbc:	687a      	ldr	r2, [r7, #4]
 8002fbe:	4413      	add	r3, r2
 8002fc0:	881b      	ldrh	r3, [r3, #0]
 8002fc2:	461a      	mov	r2, r3
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	dc0b      	bgt.n	8002fe2 <findTrigger+0xd2>
 8002fca:	693b      	ldr	r3, [r7, #16]
 8002fcc:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8002fd0:	3b01      	subs	r3, #1
 8002fd2:	005b      	lsls	r3, r3, #1
 8002fd4:	687a      	ldr	r2, [r7, #4]
 8002fd6:	4413      	add	r3, r2
 8002fd8:	881b      	ldrh	r3, [r3, #0]
 8002fda:	461a      	mov	r2, r3
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	dc18      	bgt.n	8003014 <findTrigger+0x104>
 8002fe2:	4b34      	ldr	r3, [pc, #208]	; (80030b4 <findTrigger+0x1a4>)
 8002fe4:	781b      	ldrb	r3, [r3, #0]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d124      	bne.n	8003034 <findTrigger+0x124>
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	005b      	lsls	r3, r3, #1
 8002fee:	687a      	ldr	r2, [r7, #4]
 8002ff0:	4413      	add	r3, r2
 8002ff2:	881b      	ldrh	r3, [r3, #0]
 8002ff4:	461a      	mov	r2, r3
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	db1b      	blt.n	8003034 <findTrigger+0x124>
 8002ffc:	693b      	ldr	r3, [r7, #16]
 8002ffe:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8003002:	3b01      	subs	r3, #1
 8003004:	005b      	lsls	r3, r3, #1
 8003006:	687a      	ldr	r2, [r7, #4]
 8003008:	4413      	add	r3, r2
 800300a:	881b      	ldrh	r3, [r3, #0]
 800300c:	461a      	mov	r2, r3
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	4293      	cmp	r3, r2
 8003012:	da0f      	bge.n	8003034 <findTrigger+0x124>
        {
            if (!trigged) // Looking for the first trigger point
 8003014:	4b25      	ldr	r3, [pc, #148]	; (80030ac <findTrigger+0x19c>)
 8003016:	781b      	ldrb	r3, [r3, #0]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d106      	bne.n	800302a <findTrigger+0x11a>
            {
                trigPoint = i;
 800301c:	4a22      	ldr	r2, [pc, #136]	; (80030a8 <findTrigger+0x198>)
 800301e:	693b      	ldr	r3, [r7, #16]
 8003020:	6013      	str	r3, [r2, #0]
                trigged = 1;
 8003022:	4b22      	ldr	r3, [pc, #136]	; (80030ac <findTrigger+0x19c>)
 8003024:	2201      	movs	r2, #1
 8003026:	701a      	strb	r2, [r3, #0]
 8003028:	e004      	b.n	8003034 <findTrigger+0x124>
            }
            else // Looking for the second one
            {
                trigPoint2 = i;
 800302a:	693b      	ldr	r3, [r7, #16]
 800302c:	617b      	str	r3, [r7, #20]
                trigged = 2;
 800302e:	4b1f      	ldr	r3, [pc, #124]	; (80030ac <findTrigger+0x19c>)
 8003030:	2202      	movs	r2, #2
 8003032:	701a      	strb	r2, [r3, #0]
    for (int i = 1; i < BUFFER_LEN / 2 && trigged != 2; i++) // we're looking for trigger points in the first half of the buffer
 8003034:	693b      	ldr	r3, [r7, #16]
 8003036:	3301      	adds	r3, #1
 8003038:	613b      	str	r3, [r7, #16]
 800303a:	693b      	ldr	r3, [r7, #16]
 800303c:	2b7f      	cmp	r3, #127	; 0x7f
 800303e:	dc03      	bgt.n	8003048 <findTrigger+0x138>
 8003040:	4b1a      	ldr	r3, [pc, #104]	; (80030ac <findTrigger+0x19c>)
 8003042:	781b      	ldrb	r3, [r3, #0]
 8003044:	2b02      	cmp	r3, #2
 8003046:	d1b3      	bne.n	8002fb0 <findTrigger+0xa0>
            }
        }

    if (trigged == 2) // If we found at least two trigger points
 8003048:	4b18      	ldr	r3, [pc, #96]	; (80030ac <findTrigger+0x19c>)
 800304a:	781b      	ldrb	r3, [r3, #0]
 800304c:	2b02      	cmp	r3, #2
 800304e:	d119      	bne.n	8003084 <findTrigger+0x174>
    {
        sigPer = sampPer * (trigPoint2 - trigPoint); // we compute the period of the signal in uS
 8003050:	4b15      	ldr	r3, [pc, #84]	; (80030a8 <findTrigger+0x198>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	697a      	ldr	r2, [r7, #20]
 8003056:	1ad3      	subs	r3, r2, r3
 8003058:	ee07 3a90 	vmov	s15, r3
 800305c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003060:	4b15      	ldr	r3, [pc, #84]	; (80030b8 <findTrigger+0x1a8>)
 8003062:	edd3 7a00 	vldr	s15, [r3]
 8003066:	ee67 7a27 	vmul.f32	s15, s14, s15
 800306a:	4b14      	ldr	r3, [pc, #80]	; (80030bc <findTrigger+0x1ac>)
 800306c:	edc3 7a00 	vstr	s15, [r3]
        measuredFreq = 1000000.0 / sigPer;           // and then we convert it into frequency, in Hz
 8003070:	4b12      	ldr	r3, [pc, #72]	; (80030bc <findTrigger+0x1ac>)
 8003072:	ed93 7a00 	vldr	s14, [r3]
 8003076:	eddf 6a12 	vldr	s13, [pc, #72]	; 80030c0 <findTrigger+0x1b0>
 800307a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800307e:	4b0c      	ldr	r3, [pc, #48]	; (80030b0 <findTrigger+0x1a0>)
 8003080:	edc3 7a00 	vstr	s15, [r3]
    }
}
 8003084:	bf00      	nop
 8003086:	3718      	adds	r7, #24
 8003088:	46bd      	mov	sp, r7
 800308a:	bdb0      	pop	{r4, r5, r7, pc}
 800308c:	f3af 8000 	nop.w
 8003090:	66666666 	.word	0x66666666
 8003094:	400a6666 	.word	0x400a6666
 8003098:	20000498 	.word	0x20000498
 800309c:	20000004 	.word	0x20000004
 80030a0:	20000014 	.word	0x20000014
 80030a4:	40b00000 	.word	0x40b00000
 80030a8:	20000494 	.word	0x20000494
 80030ac:	20000490 	.word	0x20000490
 80030b0:	200004ac 	.word	0x200004ac
 80030b4:	2000000c 	.word	0x2000000c
 80030b8:	200004a0 	.word	0x200004a0
 80030bc:	200004b0 	.word	0x200004b0
 80030c0:	49742400 	.word	0x49742400

080030c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80030c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80030fc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80030c8:	480d      	ldr	r0, [pc, #52]	; (8003100 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80030ca:	490e      	ldr	r1, [pc, #56]	; (8003104 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80030cc:	4a0e      	ldr	r2, [pc, #56]	; (8003108 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80030ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80030d0:	e002      	b.n	80030d8 <LoopCopyDataInit>

080030d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80030d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80030d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80030d6:	3304      	adds	r3, #4

080030d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80030d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80030da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80030dc:	d3f9      	bcc.n	80030d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80030de:	4a0b      	ldr	r2, [pc, #44]	; (800310c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80030e0:	4c0b      	ldr	r4, [pc, #44]	; (8003110 <LoopFillZerobss+0x26>)
  movs r3, #0
 80030e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80030e4:	e001      	b.n	80030ea <LoopFillZerobss>

080030e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80030e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80030e8:	3204      	adds	r2, #4

080030ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80030ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80030ec:	d3fb      	bcc.n	80030e6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80030ee:	f7fe fca3 	bl	8001a38 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80030f2:	f005 fadd 	bl	80086b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80030f6:	f7fd fe87 	bl	8000e08 <main>
  bx  lr    
 80030fa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80030fc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003100:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003104:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8003108:	08013ba4 	.word	0x08013ba4
  ldr r2, =_sbss
 800310c:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8003110:	20000684 	.word	0x20000684

08003114 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003114:	e7fe      	b.n	8003114 <ADC_IRQHandler>
	...

08003118 <drawBitmap>:
uint16_t textbgcolor = ST7735_BLACK; ///< 16-bit text color for print()
uint16_t textsize_x = 1;
uint16_t textsize_y = 1;

void drawBitmap(int16_t x0, int16_t y0, int16_t w, int16_t h, uint16_t bmap[])
{
 8003118:	b590      	push	{r4, r7, lr}
 800311a:	b085      	sub	sp, #20
 800311c:	af00      	add	r7, sp, #0
 800311e:	4604      	mov	r4, r0
 8003120:	4608      	mov	r0, r1
 8003122:	4611      	mov	r1, r2
 8003124:	461a      	mov	r2, r3
 8003126:	4623      	mov	r3, r4
 8003128:	80fb      	strh	r3, [r7, #6]
 800312a:	4603      	mov	r3, r0
 800312c:	80bb      	strh	r3, [r7, #4]
 800312e:	460b      	mov	r3, r1
 8003130:	807b      	strh	r3, [r7, #2]
 8003132:	4613      	mov	r3, r2
 8003134:	803b      	strh	r3, [r7, #0]
	for (int i = 0; i < w; i++)
 8003136:	2300      	movs	r3, #0
 8003138:	60fb      	str	r3, [r7, #12]
 800313a:	e028      	b.n	800318e <drawBitmap+0x76>
		for (int j = 0; j < h; j++)
 800313c:	2300      	movs	r3, #0
 800313e:	60bb      	str	r3, [r7, #8]
 8003140:	e01d      	b.n	800317e <drawBitmap+0x66>
		{
			drawPixel(x0 + i, y0+j, bmap[i + j * _width]);
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	b29a      	uxth	r2, r3
 8003146:	88fb      	ldrh	r3, [r7, #6]
 8003148:	4413      	add	r3, r2
 800314a:	b29b      	uxth	r3, r3
 800314c:	b218      	sxth	r0, r3
 800314e:	68bb      	ldr	r3, [r7, #8]
 8003150:	b29a      	uxth	r2, r3
 8003152:	88bb      	ldrh	r3, [r7, #4]
 8003154:	4413      	add	r3, r2
 8003156:	b29b      	uxth	r3, r3
 8003158:	b219      	sxth	r1, r3
 800315a:	4b12      	ldr	r3, [pc, #72]	; (80031a4 <drawBitmap+0x8c>)
 800315c:	881b      	ldrh	r3, [r3, #0]
 800315e:	461a      	mov	r2, r3
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	fb03 f202 	mul.w	r2, r3, r2
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	4413      	add	r3, r2
 800316a:	005b      	lsls	r3, r3, #1
 800316c:	6a3a      	ldr	r2, [r7, #32]
 800316e:	4413      	add	r3, r2
 8003170:	881b      	ldrh	r3, [r3, #0]
 8003172:	461a      	mov	r2, r3
 8003174:	f000 feaa 	bl	8003ecc <drawPixel>
		for (int j = 0; j < h; j++)
 8003178:	68bb      	ldr	r3, [r7, #8]
 800317a:	3301      	adds	r3, #1
 800317c:	60bb      	str	r3, [r7, #8]
 800317e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8003182:	68ba      	ldr	r2, [r7, #8]
 8003184:	429a      	cmp	r2, r3
 8003186:	dbdc      	blt.n	8003142 <drawBitmap+0x2a>
	for (int i = 0; i < w; i++)
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	3301      	adds	r3, #1
 800318c:	60fb      	str	r3, [r7, #12]
 800318e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003192:	68fa      	ldr	r2, [r7, #12]
 8003194:	429a      	cmp	r2, r3
 8003196:	dbd1      	blt.n	800313c <drawBitmap+0x24>
		}
}
 8003198:	bf00      	nop
 800319a:	bf00      	nop
 800319c:	3714      	adds	r7, #20
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd90      	pop	{r4, r7, pc}
 80031a2:	bf00      	nop
 80031a4:	200004dc 	.word	0x200004dc

080031a8 <fillRect>:
	drawFastVLine(x, y, h, color);
	drawFastVLine(x + w - 1, y, h, color);
}

void fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 80031a8:	b590      	push	{r4, r7, lr}
 80031aa:	b085      	sub	sp, #20
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	4604      	mov	r4, r0
 80031b0:	4608      	mov	r0, r1
 80031b2:	4611      	mov	r1, r2
 80031b4:	461a      	mov	r2, r3
 80031b6:	4623      	mov	r3, r4
 80031b8:	80fb      	strh	r3, [r7, #6]
 80031ba:	4603      	mov	r3, r0
 80031bc:	80bb      	strh	r3, [r7, #4]
 80031be:	460b      	mov	r3, r1
 80031c0:	807b      	strh	r3, [r7, #2]
 80031c2:	4613      	mov	r3, r2
 80031c4:	803b      	strh	r3, [r7, #0]
	for (int16_t i = x; i < x + w; i++)
 80031c6:	88fb      	ldrh	r3, [r7, #6]
 80031c8:	81fb      	strh	r3, [r7, #14]
 80031ca:	e00e      	b.n	80031ea <fillRect+0x42>
		drawFastVLine(i, y, h, color);
 80031cc:	8c3b      	ldrh	r3, [r7, #32]
 80031ce:	f9b7 2000 	ldrsh.w	r2, [r7]
 80031d2:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80031d6:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 80031da:	f000 fa1a 	bl	8003612 <drawFastVLine>
	for (int16_t i = x; i < x + w; i++)
 80031de:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80031e2:	b29b      	uxth	r3, r3
 80031e4:	3301      	adds	r3, #1
 80031e6:	b29b      	uxth	r3, r3
 80031e8:	81fb      	strh	r3, [r7, #14]
 80031ea:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80031ee:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 80031f2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80031f6:	440b      	add	r3, r1
 80031f8:	429a      	cmp	r2, r3
 80031fa:	dbe7      	blt.n	80031cc <fillRect+0x24>
}
 80031fc:	bf00      	nop
 80031fe:	bf00      	nop
 8003200:	3714      	adds	r7, #20
 8003202:	46bd      	mov	sp, r7
 8003204:	bd90      	pop	{r4, r7, pc}
	...

08003208 <clearDisplay>:

void clearDisplay()
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b082      	sub	sp, #8
 800320c:	af02      	add	r7, sp, #8
	fillRect(0, 0, _width, _height, ST7735_BLACK);
 800320e:	4b07      	ldr	r3, [pc, #28]	; (800322c <clearDisplay+0x24>)
 8003210:	881b      	ldrh	r3, [r3, #0]
 8003212:	b21a      	sxth	r2, r3
 8003214:	4b06      	ldr	r3, [pc, #24]	; (8003230 <clearDisplay+0x28>)
 8003216:	881b      	ldrh	r3, [r3, #0]
 8003218:	b21b      	sxth	r3, r3
 800321a:	2100      	movs	r1, #0
 800321c:	9100      	str	r1, [sp, #0]
 800321e:	2100      	movs	r1, #0
 8003220:	2000      	movs	r0, #0
 8003222:	f7ff ffc1 	bl	80031a8 <fillRect>
}
 8003226:	bf00      	nop
 8003228:	46bd      	mov	sp, r7
 800322a:	bd80      	pop	{r7, pc}
 800322c:	200004dc 	.word	0x200004dc
 8003230:	200004de 	.word	0x200004de

08003234 <drawChar>:

void drawChar(int16_t x, int16_t y, unsigned char c, uint16_t color,
			  uint16_t bg, uint8_t size_x, uint8_t size_y)
{
 8003234:	b590      	push	{r4, r7, lr}
 8003236:	b087      	sub	sp, #28
 8003238:	af02      	add	r7, sp, #8
 800323a:	4604      	mov	r4, r0
 800323c:	4608      	mov	r0, r1
 800323e:	4611      	mov	r1, r2
 8003240:	461a      	mov	r2, r3
 8003242:	4623      	mov	r3, r4
 8003244:	80fb      	strh	r3, [r7, #6]
 8003246:	4603      	mov	r3, r0
 8003248:	80bb      	strh	r3, [r7, #4]
 800324a:	460b      	mov	r3, r1
 800324c:	70fb      	strb	r3, [r7, #3]
 800324e:	4613      	mov	r3, r2
 8003250:	803b      	strh	r3, [r7, #0]
	if ((x >= _width) ||			  // Clip right
 8003252:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003256:	4a88      	ldr	r2, [pc, #544]	; (8003478 <drawChar+0x244>)
 8003258:	8812      	ldrh	r2, [r2, #0]
 800325a:	4293      	cmp	r3, r2
 800325c:	f280 8108 	bge.w	8003470 <drawChar+0x23c>
		(y >= _height) ||			  // Clip bottom
 8003260:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003264:	4a85      	ldr	r2, [pc, #532]	; (800347c <drawChar+0x248>)
 8003266:	8812      	ldrh	r2, [r2, #0]
	if ((x >= _width) ||			  // Clip right
 8003268:	4293      	cmp	r3, r2
 800326a:	f280 8101 	bge.w	8003470 <drawChar+0x23c>
		((x + 6 * size_x - 1) < 0) || // Clip left
 800326e:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8003272:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8003276:	4613      	mov	r3, r2
 8003278:	005b      	lsls	r3, r3, #1
 800327a:	4413      	add	r3, r2
 800327c:	005b      	lsls	r3, r3, #1
 800327e:	440b      	add	r3, r1
		(y >= _height) ||			  // Clip bottom
 8003280:	2b00      	cmp	r3, #0
 8003282:	f340 80f5 	ble.w	8003470 <drawChar+0x23c>
		((y + 8 * size_y - 1) < 0))	  // Clip top
 8003286:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800328a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800328e:	00db      	lsls	r3, r3, #3
 8003290:	4413      	add	r3, r2
		((x + 6 * size_x - 1) < 0) || // Clip left
 8003292:	2b00      	cmp	r3, #0
 8003294:	f340 80ec 	ble.w	8003470 <drawChar+0x23c>
		return;

	if (c >= 176)
 8003298:	78fb      	ldrb	r3, [r7, #3]
 800329a:	2baf      	cmp	r3, #175	; 0xaf
 800329c:	d902      	bls.n	80032a4 <drawChar+0x70>
		c++; // Handle 'classic' charset behavior
 800329e:	78fb      	ldrb	r3, [r7, #3]
 80032a0:	3301      	adds	r3, #1
 80032a2:	70fb      	strb	r3, [r7, #3]

	for (int8_t i = 0; i < 5; i++)
 80032a4:	2300      	movs	r3, #0
 80032a6:	73fb      	strb	r3, [r7, #15]
 80032a8:	e0aa      	b.n	8003400 <drawChar+0x1cc>
	{ // Char bitmap = 5 columns
		uint8_t line = font[c * 5 + i];
 80032aa:	78fa      	ldrb	r2, [r7, #3]
 80032ac:	4613      	mov	r3, r2
 80032ae:	009b      	lsls	r3, r3, #2
 80032b0:	441a      	add	r2, r3
 80032b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032b6:	4413      	add	r3, r2
 80032b8:	4a71      	ldr	r2, [pc, #452]	; (8003480 <drawChar+0x24c>)
 80032ba:	5cd3      	ldrb	r3, [r2, r3]
 80032bc:	73bb      	strb	r3, [r7, #14]
		for (int8_t j = 0; j < 8; j++, line >>= 1)
 80032be:	2300      	movs	r3, #0
 80032c0:	737b      	strb	r3, [r7, #13]
 80032c2:	e092      	b.n	80033ea <drawChar+0x1b6>
		{
			if (line & 1)
 80032c4:	7bbb      	ldrb	r3, [r7, #14]
 80032c6:	f003 0301 	and.w	r3, r3, #1
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d040      	beq.n	8003350 <drawChar+0x11c>
			{
				if (size_x == 1 && size_y == 1)
 80032ce:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80032d2:	2b01      	cmp	r3, #1
 80032d4:	d116      	bne.n	8003304 <drawChar+0xd0>
 80032d6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80032da:	2b01      	cmp	r3, #1
 80032dc:	d112      	bne.n	8003304 <drawChar+0xd0>
					drawPixel(x + i, y + j, color);
 80032de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032e2:	b29a      	uxth	r2, r3
 80032e4:	88fb      	ldrh	r3, [r7, #6]
 80032e6:	4413      	add	r3, r2
 80032e8:	b29b      	uxth	r3, r3
 80032ea:	b218      	sxth	r0, r3
 80032ec:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80032f0:	b29a      	uxth	r2, r3
 80032f2:	88bb      	ldrh	r3, [r7, #4]
 80032f4:	4413      	add	r3, r2
 80032f6:	b29b      	uxth	r3, r3
 80032f8:	b21b      	sxth	r3, r3
 80032fa:	883a      	ldrh	r2, [r7, #0]
 80032fc:	4619      	mov	r1, r3
 80032fe:	f000 fde5 	bl	8003ecc <drawPixel>
 8003302:	e069      	b.n	80033d8 <drawChar+0x1a4>
				else
					fillRect(x + i * size_x, y + j * size_y, size_x,
 8003304:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003308:	b29a      	uxth	r2, r3
 800330a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800330e:	b29b      	uxth	r3, r3
 8003310:	fb12 f303 	smulbb	r3, r2, r3
 8003314:	b29a      	uxth	r2, r3
 8003316:	88fb      	ldrh	r3, [r7, #6]
 8003318:	4413      	add	r3, r2
 800331a:	b29b      	uxth	r3, r3
 800331c:	b218      	sxth	r0, r3
 800331e:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8003322:	b29a      	uxth	r2, r3
 8003324:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003328:	b29b      	uxth	r3, r3
 800332a:	fb12 f303 	smulbb	r3, r2, r3
 800332e:	b29a      	uxth	r2, r3
 8003330:	88bb      	ldrh	r3, [r7, #4]
 8003332:	4413      	add	r3, r2
 8003334:	b29b      	uxth	r3, r3
 8003336:	b219      	sxth	r1, r3
 8003338:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800333c:	b21a      	sxth	r2, r3
 800333e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003342:	b21c      	sxth	r4, r3
 8003344:	883b      	ldrh	r3, [r7, #0]
 8003346:	9300      	str	r3, [sp, #0]
 8003348:	4623      	mov	r3, r4
 800334a:	f7ff ff2d 	bl	80031a8 <fillRect>
 800334e:	e043      	b.n	80033d8 <drawChar+0x1a4>
							 size_y, color);
			}
			else if (bg != color)
 8003350:	8c3a      	ldrh	r2, [r7, #32]
 8003352:	883b      	ldrh	r3, [r7, #0]
 8003354:	429a      	cmp	r2, r3
 8003356:	d03f      	beq.n	80033d8 <drawChar+0x1a4>
			{
				if (size_x == 1 && size_y == 1)
 8003358:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800335c:	2b01      	cmp	r3, #1
 800335e:	d116      	bne.n	800338e <drawChar+0x15a>
 8003360:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003364:	2b01      	cmp	r3, #1
 8003366:	d112      	bne.n	800338e <drawChar+0x15a>
					drawPixel(x + i, y + j, bg);
 8003368:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800336c:	b29a      	uxth	r2, r3
 800336e:	88fb      	ldrh	r3, [r7, #6]
 8003370:	4413      	add	r3, r2
 8003372:	b29b      	uxth	r3, r3
 8003374:	b218      	sxth	r0, r3
 8003376:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800337a:	b29a      	uxth	r2, r3
 800337c:	88bb      	ldrh	r3, [r7, #4]
 800337e:	4413      	add	r3, r2
 8003380:	b29b      	uxth	r3, r3
 8003382:	b21b      	sxth	r3, r3
 8003384:	8c3a      	ldrh	r2, [r7, #32]
 8003386:	4619      	mov	r1, r3
 8003388:	f000 fda0 	bl	8003ecc <drawPixel>
 800338c:	e024      	b.n	80033d8 <drawChar+0x1a4>
				else
					fillRect(x + i * size_x, y + j * size_y, size_x,
 800338e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003392:	b29a      	uxth	r2, r3
 8003394:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003398:	b29b      	uxth	r3, r3
 800339a:	fb12 f303 	smulbb	r3, r2, r3
 800339e:	b29a      	uxth	r2, r3
 80033a0:	88fb      	ldrh	r3, [r7, #6]
 80033a2:	4413      	add	r3, r2
 80033a4:	b29b      	uxth	r3, r3
 80033a6:	b218      	sxth	r0, r3
 80033a8:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80033ac:	b29a      	uxth	r2, r3
 80033ae:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80033b2:	b29b      	uxth	r3, r3
 80033b4:	fb12 f303 	smulbb	r3, r2, r3
 80033b8:	b29a      	uxth	r2, r3
 80033ba:	88bb      	ldrh	r3, [r7, #4]
 80033bc:	4413      	add	r3, r2
 80033be:	b29b      	uxth	r3, r3
 80033c0:	b219      	sxth	r1, r3
 80033c2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80033c6:	b21a      	sxth	r2, r3
 80033c8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80033cc:	b21c      	sxth	r4, r3
 80033ce:	8c3b      	ldrh	r3, [r7, #32]
 80033d0:	9300      	str	r3, [sp, #0]
 80033d2:	4623      	mov	r3, r4
 80033d4:	f7ff fee8 	bl	80031a8 <fillRect>
		for (int8_t j = 0; j < 8; j++, line >>= 1)
 80033d8:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80033dc:	b2db      	uxtb	r3, r3
 80033de:	3301      	adds	r3, #1
 80033e0:	b2db      	uxtb	r3, r3
 80033e2:	737b      	strb	r3, [r7, #13]
 80033e4:	7bbb      	ldrb	r3, [r7, #14]
 80033e6:	085b      	lsrs	r3, r3, #1
 80033e8:	73bb      	strb	r3, [r7, #14]
 80033ea:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80033ee:	2b07      	cmp	r3, #7
 80033f0:	f77f af68 	ble.w	80032c4 <drawChar+0x90>
	for (int8_t i = 0; i < 5; i++)
 80033f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033f8:	b2db      	uxtb	r3, r3
 80033fa:	3301      	adds	r3, #1
 80033fc:	b2db      	uxtb	r3, r3
 80033fe:	73fb      	strb	r3, [r7, #15]
 8003400:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003404:	2b04      	cmp	r3, #4
 8003406:	f77f af50 	ble.w	80032aa <drawChar+0x76>
							 size_y, bg);
			}
		}
	}
	if (bg != color)
 800340a:	8c3a      	ldrh	r2, [r7, #32]
 800340c:	883b      	ldrh	r3, [r7, #0]
 800340e:	429a      	cmp	r2, r3
 8003410:	d02f      	beq.n	8003472 <drawChar+0x23e>
	{ // If opaque, draw vertical line for last column
		if (size_x == 1 && size_y == 1)
 8003412:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003416:	2b01      	cmp	r3, #1
 8003418:	d10e      	bne.n	8003438 <drawChar+0x204>
 800341a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800341e:	2b01      	cmp	r3, #1
 8003420:	d10a      	bne.n	8003438 <drawChar+0x204>
			drawFastVLine(x + 5, y, 7, bg);
 8003422:	88fb      	ldrh	r3, [r7, #6]
 8003424:	3305      	adds	r3, #5
 8003426:	b29b      	uxth	r3, r3
 8003428:	b218      	sxth	r0, r3
 800342a:	8c3b      	ldrh	r3, [r7, #32]
 800342c:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8003430:	2207      	movs	r2, #7
 8003432:	f000 f8ee 	bl	8003612 <drawFastVLine>
 8003436:	e01c      	b.n	8003472 <drawChar+0x23e>
		else
			fillRect(x + 5 * size_x, y, size_x, 8 * size_y, bg);
 8003438:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800343c:	b29b      	uxth	r3, r3
 800343e:	461a      	mov	r2, r3
 8003440:	0092      	lsls	r2, r2, #2
 8003442:	4413      	add	r3, r2
 8003444:	b29a      	uxth	r2, r3
 8003446:	88fb      	ldrh	r3, [r7, #6]
 8003448:	4413      	add	r3, r2
 800344a:	b29b      	uxth	r3, r3
 800344c:	b218      	sxth	r0, r3
 800344e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003452:	b21a      	sxth	r2, r3
 8003454:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003458:	b29b      	uxth	r3, r3
 800345a:	00db      	lsls	r3, r3, #3
 800345c:	b29b      	uxth	r3, r3
 800345e:	b21c      	sxth	r4, r3
 8003460:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8003464:	8c3b      	ldrh	r3, [r7, #32]
 8003466:	9300      	str	r3, [sp, #0]
 8003468:	4623      	mov	r3, r4
 800346a:	f7ff fe9d 	bl	80031a8 <fillRect>
 800346e:	e000      	b.n	8003472 <drawChar+0x23e>
		return;
 8003470:	bf00      	nop
	}
}
 8003472:	3714      	adds	r7, #20
 8003474:	46bd      	mov	sp, r7
 8003476:	bd90      	pop	{r4, r7, pc}
 8003478:	200004dc 	.word	0x200004dc
 800347c:	200004de 	.word	0x200004de
 8003480:	080135b0 	.word	0x080135b0

08003484 <setCursor>:

void setCursor(int16_t x, int16_t y)
{
 8003484:	b480      	push	{r7}
 8003486:	b083      	sub	sp, #12
 8003488:	af00      	add	r7, sp, #0
 800348a:	4603      	mov	r3, r0
 800348c:	460a      	mov	r2, r1
 800348e:	80fb      	strh	r3, [r7, #6]
 8003490:	4613      	mov	r3, r2
 8003492:	80bb      	strh	r3, [r7, #4]
	cursor_x = x;
 8003494:	4a05      	ldr	r2, [pc, #20]	; (80034ac <setCursor+0x28>)
 8003496:	88fb      	ldrh	r3, [r7, #6]
 8003498:	8013      	strh	r3, [r2, #0]
	cursor_y = y;
 800349a:	4a05      	ldr	r2, [pc, #20]	; (80034b0 <setCursor+0x2c>)
 800349c:	88bb      	ldrh	r3, [r7, #4]
 800349e:	8013      	strh	r3, [r2, #0]
}
 80034a0:	bf00      	nop
 80034a2:	370c      	adds	r7, #12
 80034a4:	46bd      	mov	sp, r7
 80034a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034aa:	4770      	bx	lr
 80034ac:	200004ce 	.word	0x200004ce
 80034b0:	200004d0 	.word	0x200004d0

080034b4 <setTextColor>:

void setTextColor(uint16_t c, uint16_t bg)
{
 80034b4:	b480      	push	{r7}
 80034b6:	b083      	sub	sp, #12
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	4603      	mov	r3, r0
 80034bc:	460a      	mov	r2, r1
 80034be:	80fb      	strh	r3, [r7, #6]
 80034c0:	4613      	mov	r3, r2
 80034c2:	80bb      	strh	r3, [r7, #4]
	textcolor = c;
 80034c4:	4a05      	ldr	r2, [pc, #20]	; (80034dc <setTextColor+0x28>)
 80034c6:	88fb      	ldrh	r3, [r7, #6]
 80034c8:	8013      	strh	r3, [r2, #0]
	textbgcolor = bg;
 80034ca:	4a05      	ldr	r2, [pc, #20]	; (80034e0 <setTextColor+0x2c>)
 80034cc:	88bb      	ldrh	r3, [r7, #4]
 80034ce:	8013      	strh	r3, [r2, #0]
}
 80034d0:	bf00      	nop
 80034d2:	370c      	adds	r7, #12
 80034d4:	46bd      	mov	sp, r7
 80034d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034da:	4770      	bx	lr
 80034dc:	2000001e 	.word	0x2000001e
 80034e0:	200004d2 	.word	0x200004d2

080034e4 <writeChar>:
	textsize_x = s;
	textsize_y = s;
}

void writeChar(char c)
{
 80034e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034e6:	b087      	sub	sp, #28
 80034e8:	af04      	add	r7, sp, #16
 80034ea:	4603      	mov	r3, r0
 80034ec:	71fb      	strb	r3, [r7, #7]
	if (c == '\n')
 80034ee:	79fb      	ldrb	r3, [r7, #7]
 80034f0:	2b0a      	cmp	r3, #10
 80034f2:	d110      	bne.n	8003516 <writeChar+0x32>
	{								// Newline?
		cursor_x = 0;				// Reset x to zero,
 80034f4:	4b30      	ldr	r3, [pc, #192]	; (80035b8 <writeChar+0xd4>)
 80034f6:	2200      	movs	r2, #0
 80034f8:	801a      	strh	r2, [r3, #0]
		cursor_y += textsize_y * 8; // advance y one line
 80034fa:	4b30      	ldr	r3, [pc, #192]	; (80035bc <writeChar+0xd8>)
 80034fc:	881b      	ldrh	r3, [r3, #0]
 80034fe:	00db      	lsls	r3, r3, #3
 8003500:	b29a      	uxth	r2, r3
 8003502:	4b2f      	ldr	r3, [pc, #188]	; (80035c0 <writeChar+0xdc>)
 8003504:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003508:	b29b      	uxth	r3, r3
 800350a:	4413      	add	r3, r2
 800350c:	b29b      	uxth	r3, r3
 800350e:	b21a      	sxth	r2, r3
 8003510:	4b2b      	ldr	r3, [pc, #172]	; (80035c0 <writeChar+0xdc>)
 8003512:	801a      	strh	r2, [r3, #0]
		}
		drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor,
				 textsize_x, textsize_y);
		cursor_x += textsize_x * 6; // Advance x one char
	}
}
 8003514:	e04b      	b.n	80035ae <writeChar+0xca>
	else if (c != '\r')
 8003516:	79fb      	ldrb	r3, [r7, #7]
 8003518:	2b0d      	cmp	r3, #13
 800351a:	d048      	beq.n	80035ae <writeChar+0xca>
		if ((cursor_x + textsize_x * 6) > _width)
 800351c:	4b26      	ldr	r3, [pc, #152]	; (80035b8 <writeChar+0xd4>)
 800351e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003522:	4619      	mov	r1, r3
 8003524:	4b27      	ldr	r3, [pc, #156]	; (80035c4 <writeChar+0xe0>)
 8003526:	881b      	ldrh	r3, [r3, #0]
 8003528:	461a      	mov	r2, r3
 800352a:	4613      	mov	r3, r2
 800352c:	005b      	lsls	r3, r3, #1
 800352e:	4413      	add	r3, r2
 8003530:	005b      	lsls	r3, r3, #1
 8003532:	440b      	add	r3, r1
 8003534:	4a24      	ldr	r2, [pc, #144]	; (80035c8 <writeChar+0xe4>)
 8003536:	8812      	ldrh	r2, [r2, #0]
 8003538:	4293      	cmp	r3, r2
 800353a:	dd0f      	ble.n	800355c <writeChar+0x78>
			cursor_x = 0;				// Reset x to zero,
 800353c:	4b1e      	ldr	r3, [pc, #120]	; (80035b8 <writeChar+0xd4>)
 800353e:	2200      	movs	r2, #0
 8003540:	801a      	strh	r2, [r3, #0]
			cursor_y += textsize_y * 8; // advance y one line
 8003542:	4b1e      	ldr	r3, [pc, #120]	; (80035bc <writeChar+0xd8>)
 8003544:	881b      	ldrh	r3, [r3, #0]
 8003546:	00db      	lsls	r3, r3, #3
 8003548:	b29a      	uxth	r2, r3
 800354a:	4b1d      	ldr	r3, [pc, #116]	; (80035c0 <writeChar+0xdc>)
 800354c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003550:	b29b      	uxth	r3, r3
 8003552:	4413      	add	r3, r2
 8003554:	b29b      	uxth	r3, r3
 8003556:	b21a      	sxth	r2, r3
 8003558:	4b19      	ldr	r3, [pc, #100]	; (80035c0 <writeChar+0xdc>)
 800355a:	801a      	strh	r2, [r3, #0]
		drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor,
 800355c:	4b16      	ldr	r3, [pc, #88]	; (80035b8 <writeChar+0xd4>)
 800355e:	f9b3 0000 	ldrsh.w	r0, [r3]
 8003562:	4b17      	ldr	r3, [pc, #92]	; (80035c0 <writeChar+0xdc>)
 8003564:	f9b3 4000 	ldrsh.w	r4, [r3]
 8003568:	4b18      	ldr	r3, [pc, #96]	; (80035cc <writeChar+0xe8>)
 800356a:	881e      	ldrh	r6, [r3, #0]
 800356c:	4b18      	ldr	r3, [pc, #96]	; (80035d0 <writeChar+0xec>)
 800356e:	881b      	ldrh	r3, [r3, #0]
 8003570:	4a14      	ldr	r2, [pc, #80]	; (80035c4 <writeChar+0xe0>)
 8003572:	8812      	ldrh	r2, [r2, #0]
 8003574:	b2d2      	uxtb	r2, r2
 8003576:	4911      	ldr	r1, [pc, #68]	; (80035bc <writeChar+0xd8>)
 8003578:	8809      	ldrh	r1, [r1, #0]
 800357a:	b2c9      	uxtb	r1, r1
 800357c:	79fd      	ldrb	r5, [r7, #7]
 800357e:	9102      	str	r1, [sp, #8]
 8003580:	9201      	str	r2, [sp, #4]
 8003582:	9300      	str	r3, [sp, #0]
 8003584:	4633      	mov	r3, r6
 8003586:	462a      	mov	r2, r5
 8003588:	4621      	mov	r1, r4
 800358a:	f7ff fe53 	bl	8003234 <drawChar>
		cursor_x += textsize_x * 6; // Advance x one char
 800358e:	4b0d      	ldr	r3, [pc, #52]	; (80035c4 <writeChar+0xe0>)
 8003590:	881b      	ldrh	r3, [r3, #0]
 8003592:	461a      	mov	r2, r3
 8003594:	0052      	lsls	r2, r2, #1
 8003596:	4413      	add	r3, r2
 8003598:	005b      	lsls	r3, r3, #1
 800359a:	b29a      	uxth	r2, r3
 800359c:	4b06      	ldr	r3, [pc, #24]	; (80035b8 <writeChar+0xd4>)
 800359e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80035a2:	b29b      	uxth	r3, r3
 80035a4:	4413      	add	r3, r2
 80035a6:	b29b      	uxth	r3, r3
 80035a8:	b21a      	sxth	r2, r3
 80035aa:	4b03      	ldr	r3, [pc, #12]	; (80035b8 <writeChar+0xd4>)
 80035ac:	801a      	strh	r2, [r3, #0]
}
 80035ae:	bf00      	nop
 80035b0:	370c      	adds	r7, #12
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80035b6:	bf00      	nop
 80035b8:	200004ce 	.word	0x200004ce
 80035bc:	20000022 	.word	0x20000022
 80035c0:	200004d0 	.word	0x200004d0
 80035c4:	20000020 	.word	0x20000020
 80035c8:	200004dc 	.word	0x200004dc
 80035cc:	2000001e 	.word	0x2000001e
 80035d0:	200004d2 	.word	0x200004d2

080035d4 <printString>:

void printString(char s[])
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b084      	sub	sp, #16
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
	uint8_t n = strlen(s);
 80035dc:	6878      	ldr	r0, [r7, #4]
 80035de:	f7fc fdf7 	bl	80001d0 <strlen>
 80035e2:	4603      	mov	r3, r0
 80035e4:	72fb      	strb	r3, [r7, #11]
	for (int i = 0; i < n; i++)
 80035e6:	2300      	movs	r3, #0
 80035e8:	60fb      	str	r3, [r7, #12]
 80035ea:	e009      	b.n	8003600 <printString+0x2c>
		writeChar(s[i]);
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	687a      	ldr	r2, [r7, #4]
 80035f0:	4413      	add	r3, r2
 80035f2:	781b      	ldrb	r3, [r3, #0]
 80035f4:	4618      	mov	r0, r3
 80035f6:	f7ff ff75 	bl	80034e4 <writeChar>
	for (int i = 0; i < n; i++)
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	3301      	adds	r3, #1
 80035fe:	60fb      	str	r3, [r7, #12]
 8003600:	7afb      	ldrb	r3, [r7, #11]
 8003602:	68fa      	ldr	r2, [r7, #12]
 8003604:	429a      	cmp	r2, r3
 8003606:	dbf1      	blt.n	80035ec <printString+0x18>
}
 8003608:	bf00      	nop
 800360a:	bf00      	nop
 800360c:	3710      	adds	r7, #16
 800360e:	46bd      	mov	sp, r7
 8003610:	bd80      	pop	{r7, pc}

08003612 <drawFastVLine>:
		b = t;              \
	}
#endif

void drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color)
{
 8003612:	b590      	push	{r4, r7, lr}
 8003614:	b085      	sub	sp, #20
 8003616:	af00      	add	r7, sp, #0
 8003618:	4604      	mov	r4, r0
 800361a:	4608      	mov	r0, r1
 800361c:	4611      	mov	r1, r2
 800361e:	461a      	mov	r2, r3
 8003620:	4623      	mov	r3, r4
 8003622:	80fb      	strh	r3, [r7, #6]
 8003624:	4603      	mov	r3, r0
 8003626:	80bb      	strh	r3, [r7, #4]
 8003628:	460b      	mov	r3, r1
 800362a:	807b      	strh	r3, [r7, #2]
 800362c:	4613      	mov	r3, r2
 800362e:	803b      	strh	r3, [r7, #0]
	for (int i = y; i <= y + h; i++)
 8003630:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003634:	60fb      	str	r3, [r7, #12]
 8003636:	e00a      	b.n	800364e <drawFastVLine+0x3c>
		drawPixel(x, i, color);
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	b219      	sxth	r1, r3
 800363c:	883a      	ldrh	r2, [r7, #0]
 800363e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003642:	4618      	mov	r0, r3
 8003644:	f000 fc42 	bl	8003ecc <drawPixel>
	for (int i = y; i <= y + h; i++)
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	3301      	adds	r3, #1
 800364c:	60fb      	str	r3, [r7, #12]
 800364e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8003652:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003656:	4413      	add	r3, r2
 8003658:	68fa      	ldr	r2, [r7, #12]
 800365a:	429a      	cmp	r2, r3
 800365c:	ddec      	ble.n	8003638 <drawFastVLine+0x26>
}
 800365e:	bf00      	nop
 8003660:	bf00      	nop
 8003662:	3714      	adds	r7, #20
 8003664:	46bd      	mov	sp, r7
 8003666:	bd90      	pop	{r4, r7, pc}

08003668 <drawFastHLine>:

void drawFastHLine(int16_t x, int16_t y, int16_t l, uint16_t color)
{
 8003668:	b590      	push	{r4, r7, lr}
 800366a:	b085      	sub	sp, #20
 800366c:	af00      	add	r7, sp, #0
 800366e:	4604      	mov	r4, r0
 8003670:	4608      	mov	r0, r1
 8003672:	4611      	mov	r1, r2
 8003674:	461a      	mov	r2, r3
 8003676:	4623      	mov	r3, r4
 8003678:	80fb      	strh	r3, [r7, #6]
 800367a:	4603      	mov	r3, r0
 800367c:	80bb      	strh	r3, [r7, #4]
 800367e:	460b      	mov	r3, r1
 8003680:	807b      	strh	r3, [r7, #2]
 8003682:	4613      	mov	r3, r2
 8003684:	803b      	strh	r3, [r7, #0]
	for (int i = x; i <= x + l; i++)
 8003686:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800368a:	60fb      	str	r3, [r7, #12]
 800368c:	e00a      	b.n	80036a4 <drawFastHLine+0x3c>
		drawPixel(i, y, color);
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	b21b      	sxth	r3, r3
 8003692:	883a      	ldrh	r2, [r7, #0]
 8003694:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8003698:	4618      	mov	r0, r3
 800369a:	f000 fc17 	bl	8003ecc <drawPixel>
	for (int i = x; i <= x + l; i++)
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	3301      	adds	r3, #1
 80036a2:	60fb      	str	r3, [r7, #12]
 80036a4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80036a8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80036ac:	4413      	add	r3, r2
 80036ae:	68fa      	ldr	r2, [r7, #12]
 80036b0:	429a      	cmp	r2, r3
 80036b2:	ddec      	ble.n	800368e <drawFastHLine+0x26>
}
 80036b4:	bf00      	nop
 80036b6:	bf00      	nop
 80036b8:	3714      	adds	r7, #20
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd90      	pop	{r4, r7, pc}

080036be <drawLine>:

void drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
			  uint16_t color)
{
 80036be:	b590      	push	{r4, r7, lr}
 80036c0:	b089      	sub	sp, #36	; 0x24
 80036c2:	af00      	add	r7, sp, #0
 80036c4:	4604      	mov	r4, r0
 80036c6:	4608      	mov	r0, r1
 80036c8:	4611      	mov	r1, r2
 80036ca:	461a      	mov	r2, r3
 80036cc:	4623      	mov	r3, r4
 80036ce:	80fb      	strh	r3, [r7, #6]
 80036d0:	4603      	mov	r3, r0
 80036d2:	80bb      	strh	r3, [r7, #4]
 80036d4:	460b      	mov	r3, r1
 80036d6:	807b      	strh	r3, [r7, #2]
 80036d8:	4613      	mov	r3, r2
 80036da:	803b      	strh	r3, [r7, #0]

	int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 80036dc:	f9b7 2000 	ldrsh.w	r2, [r7]
 80036e0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80036e4:	1ad3      	subs	r3, r2, r3
 80036e6:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80036ea:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80036ee:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 80036f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80036f6:	1acb      	subs	r3, r1, r3
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	bfb8      	it	lt
 80036fc:	425b      	neglt	r3, r3
 80036fe:	429a      	cmp	r2, r3
 8003700:	bfcc      	ite	gt
 8003702:	2301      	movgt	r3, #1
 8003704:	2300      	movle	r3, #0
 8003706:	b2db      	uxtb	r3, r3
 8003708:	837b      	strh	r3, [r7, #26]
	if (steep)
 800370a:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d00b      	beq.n	800372a <drawLine+0x6c>
	{
		_swap_int16_t(x0, y0);
 8003712:	88fb      	ldrh	r3, [r7, #6]
 8003714:	833b      	strh	r3, [r7, #24]
 8003716:	88bb      	ldrh	r3, [r7, #4]
 8003718:	80fb      	strh	r3, [r7, #6]
 800371a:	8b3b      	ldrh	r3, [r7, #24]
 800371c:	80bb      	strh	r3, [r7, #4]
		_swap_int16_t(x1, y1);
 800371e:	887b      	ldrh	r3, [r7, #2]
 8003720:	82fb      	strh	r3, [r7, #22]
 8003722:	883b      	ldrh	r3, [r7, #0]
 8003724:	807b      	strh	r3, [r7, #2]
 8003726:	8afb      	ldrh	r3, [r7, #22]
 8003728:	803b      	strh	r3, [r7, #0]
	}

	if (x0 > x1)
 800372a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800372e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003732:	429a      	cmp	r2, r3
 8003734:	dd0b      	ble.n	800374e <drawLine+0x90>
	{
		_swap_int16_t(x0, x1);
 8003736:	88fb      	ldrh	r3, [r7, #6]
 8003738:	82bb      	strh	r3, [r7, #20]
 800373a:	887b      	ldrh	r3, [r7, #2]
 800373c:	80fb      	strh	r3, [r7, #6]
 800373e:	8abb      	ldrh	r3, [r7, #20]
 8003740:	807b      	strh	r3, [r7, #2]
		_swap_int16_t(y0, y1);
 8003742:	88bb      	ldrh	r3, [r7, #4]
 8003744:	827b      	strh	r3, [r7, #18]
 8003746:	883b      	ldrh	r3, [r7, #0]
 8003748:	80bb      	strh	r3, [r7, #4]
 800374a:	8a7b      	ldrh	r3, [r7, #18]
 800374c:	803b      	strh	r3, [r7, #0]
	}

	int16_t dx, dy;
	dx = x1 - x0;
 800374e:	887a      	ldrh	r2, [r7, #2]
 8003750:	88fb      	ldrh	r3, [r7, #6]
 8003752:	1ad3      	subs	r3, r2, r3
 8003754:	b29b      	uxth	r3, r3
 8003756:	823b      	strh	r3, [r7, #16]
	dy = abs(y1 - y0);
 8003758:	f9b7 2000 	ldrsh.w	r2, [r7]
 800375c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003760:	1ad3      	subs	r3, r2, r3
 8003762:	2b00      	cmp	r3, #0
 8003764:	bfb8      	it	lt
 8003766:	425b      	neglt	r3, r3
 8003768:	81fb      	strh	r3, [r7, #14]

	int16_t err = dx / 2;
 800376a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800376e:	0fda      	lsrs	r2, r3, #31
 8003770:	4413      	add	r3, r2
 8003772:	105b      	asrs	r3, r3, #1
 8003774:	83fb      	strh	r3, [r7, #30]
	int16_t ystep;

	if (y0 < y1)
 8003776:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800377a:	f9b7 3000 	ldrsh.w	r3, [r7]
 800377e:	429a      	cmp	r2, r3
 8003780:	da02      	bge.n	8003788 <drawLine+0xca>
	{
		ystep = 1;
 8003782:	2301      	movs	r3, #1
 8003784:	83bb      	strh	r3, [r7, #28]
 8003786:	e031      	b.n	80037ec <drawLine+0x12e>
	}
	else
	{
		ystep = -1;
 8003788:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800378c:	83bb      	strh	r3, [r7, #28]
	}

	for (; x0 <= x1; x0++)
 800378e:	e02d      	b.n	80037ec <drawLine+0x12e>
	{
		if (steep)
 8003790:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d008      	beq.n	80037aa <drawLine+0xec>
		{
			drawPixel(y0, x0, color);
 8003798:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 800379a:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 800379e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80037a2:	4618      	mov	r0, r3
 80037a4:	f000 fb92 	bl	8003ecc <drawPixel>
 80037a8:	e007      	b.n	80037ba <drawLine+0xfc>
		}
		else
		{
			drawPixel(x0, y0, color);
 80037aa:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 80037ac:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80037b0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80037b4:	4618      	mov	r0, r3
 80037b6:	f000 fb89 	bl	8003ecc <drawPixel>
		}
		err -= dy;
 80037ba:	8bfa      	ldrh	r2, [r7, #30]
 80037bc:	89fb      	ldrh	r3, [r7, #14]
 80037be:	1ad3      	subs	r3, r2, r3
 80037c0:	b29b      	uxth	r3, r3
 80037c2:	83fb      	strh	r3, [r7, #30]
		if (err < 0)
 80037c4:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	da09      	bge.n	80037e0 <drawLine+0x122>
		{
			y0 += ystep;
 80037cc:	88ba      	ldrh	r2, [r7, #4]
 80037ce:	8bbb      	ldrh	r3, [r7, #28]
 80037d0:	4413      	add	r3, r2
 80037d2:	b29b      	uxth	r3, r3
 80037d4:	80bb      	strh	r3, [r7, #4]
			err += dx;
 80037d6:	8bfa      	ldrh	r2, [r7, #30]
 80037d8:	8a3b      	ldrh	r3, [r7, #16]
 80037da:	4413      	add	r3, r2
 80037dc:	b29b      	uxth	r3, r3
 80037de:	83fb      	strh	r3, [r7, #30]
	for (; x0 <= x1; x0++)
 80037e0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80037e4:	b29b      	uxth	r3, r3
 80037e6:	3301      	adds	r3, #1
 80037e8:	b29b      	uxth	r3, r3
 80037ea:	80fb      	strh	r3, [r7, #6]
 80037ec:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80037f0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80037f4:	429a      	cmp	r2, r3
 80037f6:	ddcb      	ble.n	8003790 <drawLine+0xd2>
		}
	}
}
 80037f8:	bf00      	nop
 80037fa:	bf00      	nop
 80037fc:	3724      	adds	r7, #36	; 0x24
 80037fe:	46bd      	mov	sp, r7
 8003800:	bd90      	pop	{r4, r7, pc}
	...

08003804 <createFramebuf>:
uint8_t rotation;

uint16_t *frameBuffer = NULL;

void createFramebuf()
{
 8003804:	b580      	push	{r7, lr}
 8003806:	af00      	add	r7, sp, #0
	frameBuffer = malloc(_width * _height * sizeof(uint16_t));
 8003808:	4b09      	ldr	r3, [pc, #36]	; (8003830 <createFramebuf+0x2c>)
 800380a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800380e:	461a      	mov	r2, r3
 8003810:	4b08      	ldr	r3, [pc, #32]	; (8003834 <createFramebuf+0x30>)
 8003812:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003816:	fb02 f303 	mul.w	r3, r2, r3
 800381a:	005b      	lsls	r3, r3, #1
 800381c:	4618      	mov	r0, r3
 800381e:	f004 fc19 	bl	8008054 <malloc>
 8003822:	4603      	mov	r3, r0
 8003824:	461a      	mov	r2, r3
 8003826:	4b04      	ldr	r3, [pc, #16]	; (8003838 <createFramebuf+0x34>)
 8003828:	601a      	str	r2, [r3, #0]
}
 800382a:	bf00      	nop
 800382c:	bd80      	pop	{r7, pc}
 800382e:	bf00      	nop
 8003830:	200004dc 	.word	0x200004dc
 8003834:	200004de 	.word	0x200004de
 8003838:	200004e8 	.word	0x200004e8

0800383c <flushDisplay>:
	free(frameBuffer);
	frameBuffer = NULL;
}

void flushDisplay()
{
 800383c:	b580      	push	{r7, lr}
 800383e:	af00      	add	r7, sp, #0
	if (frameBuffer != NULL)
 8003840:	4b15      	ldr	r3, [pc, #84]	; (8003898 <flushDisplay+0x5c>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d025      	beq.n	8003894 <flushDisplay+0x58>
	{
		ST7735_Select();
 8003848:	f000 f844 	bl	80038d4 <ST7735_Select>
		ST7735_setAddrWindow(0, 0, _width, _height); // Clipped area
 800384c:	4b13      	ldr	r3, [pc, #76]	; (800389c <flushDisplay+0x60>)
 800384e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003852:	461a      	mov	r2, r3
 8003854:	4b12      	ldr	r3, [pc, #72]	; (80038a0 <flushDisplay+0x64>)
 8003856:	f9b3 3000 	ldrsh.w	r3, [r3]
 800385a:	2100      	movs	r1, #0
 800385c:	2000      	movs	r0, #0
 800385e:	f000 fa93 	bl	8003d88 <ST7735_setAddrWindow>
		ST7735_RegData();
 8003862:	f000 f85b 	bl	800391c <ST7735_RegData>
		HAL_SPI_Transmit(spiPort, frameBuffer, 2 * _width * _height, HAL_MAX_DELAY);
 8003866:	4b0f      	ldr	r3, [pc, #60]	; (80038a4 <flushDisplay+0x68>)
 8003868:	6818      	ldr	r0, [r3, #0]
 800386a:	4b0b      	ldr	r3, [pc, #44]	; (8003898 <flushDisplay+0x5c>)
 800386c:	6819      	ldr	r1, [r3, #0]
 800386e:	4b0b      	ldr	r3, [pc, #44]	; (800389c <flushDisplay+0x60>)
 8003870:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003874:	b29a      	uxth	r2, r3
 8003876:	4b0a      	ldr	r3, [pc, #40]	; (80038a0 <flushDisplay+0x64>)
 8003878:	f9b3 3000 	ldrsh.w	r3, [r3]
 800387c:	b29b      	uxth	r3, r3
 800387e:	fb12 f303 	smulbb	r3, r2, r3
 8003882:	b29b      	uxth	r3, r3
 8003884:	005b      	lsls	r3, r3, #1
 8003886:	b29a      	uxth	r2, r3
 8003888:	f04f 33ff 	mov.w	r3, #4294967295
 800388c:	f002 fbc1 	bl	8006012 <HAL_SPI_Transmit>
		ST7735_DeSelect();
 8003890:	f000 f82c 	bl	80038ec <ST7735_DeSelect>
	}
}
 8003894:	bf00      	nop
 8003896:	bd80      	pop	{r7, pc}
 8003898:	200004e8 	.word	0x200004e8
 800389c:	200004dc 	.word	0x200004dc
 80038a0:	200004de 	.word	0x200004de
 80038a4:	200004d4 	.word	0x200004d4

080038a8 <ST7735_Reset>:
		10,																			//     10 ms delay
		ST77XX_DISPON, ST_CMD_DELAY,												//  4: Main screen turn on, no args w/delay
		100};																		//     100 ms delay

void ST7735_Reset()
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_RESET);
 80038ac:	2200      	movs	r2, #0
 80038ae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80038b2:	4807      	ldr	r0, [pc, #28]	; (80038d0 <ST7735_Reset+0x28>)
 80038b4:	f001 fe80 	bl	80055b8 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 80038b8:	2005      	movs	r0, #5
 80038ba:	f000 fb9d 	bl	8003ff8 <HAL_Delay>
	HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_SET);
 80038be:	2201      	movs	r2, #1
 80038c0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80038c4:	4802      	ldr	r0, [pc, #8]	; (80038d0 <ST7735_Reset+0x28>)
 80038c6:	f001 fe77 	bl	80055b8 <HAL_GPIO_WritePin>
}
 80038ca:	bf00      	nop
 80038cc:	bd80      	pop	{r7, pc}
 80038ce:	bf00      	nop
 80038d0:	40020400 	.word	0x40020400

080038d4 <ST7735_Select>:

void ST7735_Select()
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_RESET);
 80038d8:	2200      	movs	r2, #0
 80038da:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80038de:	4802      	ldr	r0, [pc, #8]	; (80038e8 <ST7735_Select+0x14>)
 80038e0:	f001 fe6a 	bl	80055b8 <HAL_GPIO_WritePin>
}
 80038e4:	bf00      	nop
 80038e6:	bd80      	pop	{r7, pc}
 80038e8:	40020400 	.word	0x40020400

080038ec <ST7735_DeSelect>:

void ST7735_DeSelect()
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_SET);
 80038f0:	2201      	movs	r2, #1
 80038f2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80038f6:	4802      	ldr	r0, [pc, #8]	; (8003900 <ST7735_DeSelect+0x14>)
 80038f8:	f001 fe5e 	bl	80055b8 <HAL_GPIO_WritePin>
}
 80038fc:	bf00      	nop
 80038fe:	bd80      	pop	{r7, pc}
 8003900:	40020400 	.word	0x40020400

08003904 <ST7735_RegCommand>:

void ST7735_RegCommand()
{
 8003904:	b580      	push	{r7, lr}
 8003906:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_RESET);
 8003908:	2200      	movs	r2, #0
 800390a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800390e:	4802      	ldr	r0, [pc, #8]	; (8003918 <ST7735_RegCommand+0x14>)
 8003910:	f001 fe52 	bl	80055b8 <HAL_GPIO_WritePin>
}
 8003914:	bf00      	nop
 8003916:	bd80      	pop	{r7, pc}
 8003918:	40020400 	.word	0x40020400

0800391c <ST7735_RegData>:

void ST7735_RegData()
{
 800391c:	b580      	push	{r7, lr}
 800391e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 8003920:	2201      	movs	r2, #1
 8003922:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003926:	4802      	ldr	r0, [pc, #8]	; (8003930 <ST7735_RegData+0x14>)
 8003928:	f001 fe46 	bl	80055b8 <HAL_GPIO_WritePin>
}
 800392c:	bf00      	nop
 800392e:	bd80      	pop	{r7, pc}
 8003930:	40020400 	.word	0x40020400

08003934 <ST7735_WriteCommand>:

void ST7735_WriteCommand(uint8_t cmd)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b082      	sub	sp, #8
 8003938:	af00      	add	r7, sp, #0
 800393a:	4603      	mov	r3, r0
 800393c:	71fb      	strb	r3, [r7, #7]
	ST7735_RegCommand();
 800393e:	f7ff ffe1 	bl	8003904 <ST7735_RegCommand>
	HAL_SPI_Transmit(spiPort, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8003942:	4b06      	ldr	r3, [pc, #24]	; (800395c <ST7735_WriteCommand+0x28>)
 8003944:	6818      	ldr	r0, [r3, #0]
 8003946:	1df9      	adds	r1, r7, #7
 8003948:	f04f 33ff 	mov.w	r3, #4294967295
 800394c:	2201      	movs	r2, #1
 800394e:	f002 fb60 	bl	8006012 <HAL_SPI_Transmit>
}
 8003952:	bf00      	nop
 8003954:	3708      	adds	r7, #8
 8003956:	46bd      	mov	sp, r7
 8003958:	bd80      	pop	{r7, pc}
 800395a:	bf00      	nop
 800395c:	200004d4 	.word	0x200004d4

08003960 <ST7735_WriteData>:

void ST7735_WriteData(uint8_t *buff, size_t buff_size)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b082      	sub	sp, #8
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
 8003968:	6039      	str	r1, [r7, #0]
	ST7735_RegData();
 800396a:	f7ff ffd7 	bl	800391c <ST7735_RegData>
	HAL_SPI_Transmit(spiPort, buff, buff_size, HAL_MAX_DELAY);
 800396e:	4b06      	ldr	r3, [pc, #24]	; (8003988 <ST7735_WriteData+0x28>)
 8003970:	6818      	ldr	r0, [r3, #0]
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	b29a      	uxth	r2, r3
 8003976:	f04f 33ff 	mov.w	r3, #4294967295
 800397a:	6879      	ldr	r1, [r7, #4]
 800397c:	f002 fb49 	bl	8006012 <HAL_SPI_Transmit>
}
 8003980:	bf00      	nop
 8003982:	3708      	adds	r7, #8
 8003984:	46bd      	mov	sp, r7
 8003986:	bd80      	pop	{r7, pc}
 8003988:	200004d4 	.word	0x200004d4

0800398c <ST7735_SendCommand>:

void ST7735_SendCommand(uint8_t commandByte, uint8_t *dataBytes,
						uint8_t numDataBytes)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b082      	sub	sp, #8
 8003990:	af00      	add	r7, sp, #0
 8003992:	4603      	mov	r3, r0
 8003994:	6039      	str	r1, [r7, #0]
 8003996:	71fb      	strb	r3, [r7, #7]
 8003998:	4613      	mov	r3, r2
 800399a:	71bb      	strb	r3, [r7, #6]
	ST7735_Select();
 800399c:	f7ff ff9a 	bl	80038d4 <ST7735_Select>

	ST7735_WriteCommand(commandByte);
 80039a0:	79fb      	ldrb	r3, [r7, #7]
 80039a2:	4618      	mov	r0, r3
 80039a4:	f7ff ffc6 	bl	8003934 <ST7735_WriteCommand>
	ST7735_WriteData(dataBytes, numDataBytes);
 80039a8:	79bb      	ldrb	r3, [r7, #6]
 80039aa:	4619      	mov	r1, r3
 80039ac:	6838      	ldr	r0, [r7, #0]
 80039ae:	f7ff ffd7 	bl	8003960 <ST7735_WriteData>

	ST7735_DeSelect();
 80039b2:	f7ff ff9b 	bl	80038ec <ST7735_DeSelect>
}
 80039b6:	bf00      	nop
 80039b8:	3708      	adds	r7, #8
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bd80      	pop	{r7, pc}

080039be <ST7735_displayInit>:

void ST7735_displayInit(const uint8_t *addr)
{
 80039be:	b580      	push	{r7, lr}
 80039c0:	b084      	sub	sp, #16
 80039c2:	af00      	add	r7, sp, #0
 80039c4:	6078      	str	r0, [r7, #4]

	uint8_t numCommands, cmd, numArgs;
	uint16_t ms;

	numCommands = *(addr++); // Number of commands to follow
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	1c5a      	adds	r2, r3, #1
 80039ca:	607a      	str	r2, [r7, #4]
 80039cc:	781b      	ldrb	r3, [r3, #0]
 80039ce:	73fb      	strb	r3, [r7, #15]
	while (numCommands--)
 80039d0:	e02e      	b.n	8003a30 <ST7735_displayInit+0x72>
	{								 // For each command...
		cmd = *(addr++);			 // Read command
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	1c5a      	adds	r2, r3, #1
 80039d6:	607a      	str	r2, [r7, #4]
 80039d8:	781b      	ldrb	r3, [r3, #0]
 80039da:	72fb      	strb	r3, [r7, #11]
		numArgs = *(addr++);		 // Number of args to follow
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	1c5a      	adds	r2, r3, #1
 80039e0:	607a      	str	r2, [r7, #4]
 80039e2:	781b      	ldrb	r3, [r3, #0]
 80039e4:	72bb      	strb	r3, [r7, #10]
		ms = numArgs & ST_CMD_DELAY; // If hibit set, delay follows args
 80039e6:	7abb      	ldrb	r3, [r7, #10]
 80039e8:	b29b      	uxth	r3, r3
 80039ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039ee:	81bb      	strh	r3, [r7, #12]
		numArgs &= ~ST_CMD_DELAY;	 // Mask out delay bit
 80039f0:	7abb      	ldrb	r3, [r7, #10]
 80039f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80039f6:	72bb      	strb	r3, [r7, #10]
		ST7735_SendCommand(cmd, addr, numArgs);
 80039f8:	7aba      	ldrb	r2, [r7, #10]
 80039fa:	7afb      	ldrb	r3, [r7, #11]
 80039fc:	6879      	ldr	r1, [r7, #4]
 80039fe:	4618      	mov	r0, r3
 8003a00:	f7ff ffc4 	bl	800398c <ST7735_SendCommand>
		addr += numArgs;
 8003a04:	7abb      	ldrb	r3, [r7, #10]
 8003a06:	687a      	ldr	r2, [r7, #4]
 8003a08:	4413      	add	r3, r2
 8003a0a:	607b      	str	r3, [r7, #4]

		if (ms)
 8003a0c:	89bb      	ldrh	r3, [r7, #12]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d00e      	beq.n	8003a30 <ST7735_displayInit+0x72>
		{
			ms = *(addr++); // Read post-command delay time (ms)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	1c5a      	adds	r2, r3, #1
 8003a16:	607a      	str	r2, [r7, #4]
 8003a18:	781b      	ldrb	r3, [r3, #0]
 8003a1a:	81bb      	strh	r3, [r7, #12]
			if (ms == 255)
 8003a1c:	89bb      	ldrh	r3, [r7, #12]
 8003a1e:	2bff      	cmp	r3, #255	; 0xff
 8003a20:	d102      	bne.n	8003a28 <ST7735_displayInit+0x6a>
				ms = 500; // If 255, delay for 500 ms
 8003a22:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8003a26:	81bb      	strh	r3, [r7, #12]
			HAL_Delay(ms);
 8003a28:	89bb      	ldrh	r3, [r7, #12]
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	f000 fae4 	bl	8003ff8 <HAL_Delay>
	while (numCommands--)
 8003a30:	7bfb      	ldrb	r3, [r7, #15]
 8003a32:	1e5a      	subs	r2, r3, #1
 8003a34:	73fa      	strb	r2, [r7, #15]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d1cb      	bne.n	80039d2 <ST7735_displayInit+0x14>
		}
	}
}
 8003a3a:	bf00      	nop
 8003a3c:	bf00      	nop
 8003a3e:	3710      	adds	r7, #16
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bd80      	pop	{r7, pc}

08003a44 <setRotation>:

void setRotation(uint8_t m)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b084      	sub	sp, #16
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	71fb      	strb	r3, [r7, #7]
	uint8_t madctl = 0;
 8003a4e:	2300      	movs	r3, #0
 8003a50:	73fb      	strb	r3, [r7, #15]

	rotation = m & 3; // can't be higher than 3
 8003a52:	79fb      	ldrb	r3, [r7, #7]
 8003a54:	f003 0303 	and.w	r3, r3, #3
 8003a58:	b2da      	uxtb	r2, r3
 8003a5a:	4b7f      	ldr	r3, [pc, #508]	; (8003c58 <setRotation+0x214>)
 8003a5c:	701a      	strb	r2, [r3, #0]

	// For ST7735 with GREEN TAB (including HalloWing)...
	if ((tabcolor == INITR_144GREENTAB) || (tabcolor == INITR_HALLOWING))
 8003a5e:	4b7f      	ldr	r3, [pc, #508]	; (8003c5c <setRotation+0x218>)
 8003a60:	781b      	ldrb	r3, [r3, #0]
 8003a62:	2b01      	cmp	r3, #1
 8003a64:	d003      	beq.n	8003a6e <setRotation+0x2a>
 8003a66:	4b7d      	ldr	r3, [pc, #500]	; (8003c5c <setRotation+0x218>)
 8003a68:	781b      	ldrb	r3, [r3, #0]
 8003a6a:	2b05      	cmp	r3, #5
 8003a6c:	d108      	bne.n	8003a80 <setRotation+0x3c>
	{
		// ..._rowstart is 3 for rotations 0&1, 1 for rotations 2&3
		_rowstart = (rotation < 2) ? 3 : 1;
 8003a6e:	4b7a      	ldr	r3, [pc, #488]	; (8003c58 <setRotation+0x214>)
 8003a70:	781b      	ldrb	r3, [r3, #0]
 8003a72:	2b01      	cmp	r3, #1
 8003a74:	d801      	bhi.n	8003a7a <setRotation+0x36>
 8003a76:	2203      	movs	r2, #3
 8003a78:	e000      	b.n	8003a7c <setRotation+0x38>
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	4b78      	ldr	r3, [pc, #480]	; (8003c60 <setRotation+0x21c>)
 8003a7e:	701a      	strb	r2, [r3, #0]
	}

	switch (rotation)
 8003a80:	4b75      	ldr	r3, [pc, #468]	; (8003c58 <setRotation+0x214>)
 8003a82:	781b      	ldrb	r3, [r3, #0]
 8003a84:	2b03      	cmp	r3, #3
 8003a86:	f200 80db 	bhi.w	8003c40 <setRotation+0x1fc>
 8003a8a:	a201      	add	r2, pc, #4	; (adr r2, 8003a90 <setRotation+0x4c>)
 8003a8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a90:	08003aa1 	.word	0x08003aa1
 8003a94:	08003b09 	.word	0x08003b09
 8003a98:	08003b71 	.word	0x08003b71
 8003a9c:	08003bd9 	.word	0x08003bd9
	{
	case 0:
		if ((tabcolor == INITR_BLACKTAB) || (tabcolor == INITR_MINI160x80))
 8003aa0:	4b6e      	ldr	r3, [pc, #440]	; (8003c5c <setRotation+0x218>)
 8003aa2:	781b      	ldrb	r3, [r3, #0]
 8003aa4:	2b02      	cmp	r3, #2
 8003aa6:	d003      	beq.n	8003ab0 <setRotation+0x6c>
 8003aa8:	4b6c      	ldr	r3, [pc, #432]	; (8003c5c <setRotation+0x218>)
 8003aaa:	781b      	ldrb	r3, [r3, #0]
 8003aac:	2b04      	cmp	r3, #4
 8003aae:	d102      	bne.n	8003ab6 <setRotation+0x72>
		{
			madctl = ST77XX_MADCTL_MX | ST77XX_MADCTL_MY | ST77XX_MADCTL_RGB;
 8003ab0:	23c0      	movs	r3, #192	; 0xc0
 8003ab2:	73fb      	strb	r3, [r7, #15]
 8003ab4:	e001      	b.n	8003aba <setRotation+0x76>
		}
		else
		{
			madctl = ST77XX_MADCTL_MX | ST77XX_MADCTL_MY | ST7735_MADCTL_BGR;
 8003ab6:	23c8      	movs	r3, #200	; 0xc8
 8003ab8:	73fb      	strb	r3, [r7, #15]
		}

		if (tabcolor == INITR_144GREENTAB)
 8003aba:	4b68      	ldr	r3, [pc, #416]	; (8003c5c <setRotation+0x218>)
 8003abc:	781b      	ldrb	r3, [r3, #0]
 8003abe:	2b01      	cmp	r3, #1
 8003ac0:	d106      	bne.n	8003ad0 <setRotation+0x8c>
		{
			_height = ST7735_TFTHEIGHT_128;
 8003ac2:	4b68      	ldr	r3, [pc, #416]	; (8003c64 <setRotation+0x220>)
 8003ac4:	2280      	movs	r2, #128	; 0x80
 8003ac6:	801a      	strh	r2, [r3, #0]
			_width = ST7735_TFTWIDTH_128;
 8003ac8:	4b67      	ldr	r3, [pc, #412]	; (8003c68 <setRotation+0x224>)
 8003aca:	2280      	movs	r2, #128	; 0x80
 8003acc:	801a      	strh	r2, [r3, #0]
 8003ace:	e010      	b.n	8003af2 <setRotation+0xae>
		}
		else if (tabcolor == INITR_MINI160x80)
 8003ad0:	4b62      	ldr	r3, [pc, #392]	; (8003c5c <setRotation+0x218>)
 8003ad2:	781b      	ldrb	r3, [r3, #0]
 8003ad4:	2b04      	cmp	r3, #4
 8003ad6:	d106      	bne.n	8003ae6 <setRotation+0xa2>
		{
			_height = ST7735_TFTHEIGHT_160;
 8003ad8:	4b62      	ldr	r3, [pc, #392]	; (8003c64 <setRotation+0x220>)
 8003ada:	22a0      	movs	r2, #160	; 0xa0
 8003adc:	801a      	strh	r2, [r3, #0]
			_width = ST7735_TFTWIDTH_80;
 8003ade:	4b62      	ldr	r3, [pc, #392]	; (8003c68 <setRotation+0x224>)
 8003ae0:	2250      	movs	r2, #80	; 0x50
 8003ae2:	801a      	strh	r2, [r3, #0]
 8003ae4:	e005      	b.n	8003af2 <setRotation+0xae>
		}
		else
		{
			_height = ST7735_TFTHEIGHT_160;
 8003ae6:	4b5f      	ldr	r3, [pc, #380]	; (8003c64 <setRotation+0x220>)
 8003ae8:	22a0      	movs	r2, #160	; 0xa0
 8003aea:	801a      	strh	r2, [r3, #0]
			_width = ST7735_TFTWIDTH_128;
 8003aec:	4b5e      	ldr	r3, [pc, #376]	; (8003c68 <setRotation+0x224>)
 8003aee:	2280      	movs	r2, #128	; 0x80
 8003af0:	801a      	strh	r2, [r3, #0]
		}
		_xstart = _colstart;
 8003af2:	4b5e      	ldr	r3, [pc, #376]	; (8003c6c <setRotation+0x228>)
 8003af4:	781b      	ldrb	r3, [r3, #0]
 8003af6:	b21a      	sxth	r2, r3
 8003af8:	4b5d      	ldr	r3, [pc, #372]	; (8003c70 <setRotation+0x22c>)
 8003afa:	801a      	strh	r2, [r3, #0]
		_ystart = _rowstart;
 8003afc:	4b58      	ldr	r3, [pc, #352]	; (8003c60 <setRotation+0x21c>)
 8003afe:	781b      	ldrb	r3, [r3, #0]
 8003b00:	b21a      	sxth	r2, r3
 8003b02:	4b5c      	ldr	r3, [pc, #368]	; (8003c74 <setRotation+0x230>)
 8003b04:	801a      	strh	r2, [r3, #0]
		break;
 8003b06:	e09b      	b.n	8003c40 <setRotation+0x1fc>
	case 1:
		if ((tabcolor == INITR_BLACKTAB) || (tabcolor == INITR_MINI160x80))
 8003b08:	4b54      	ldr	r3, [pc, #336]	; (8003c5c <setRotation+0x218>)
 8003b0a:	781b      	ldrb	r3, [r3, #0]
 8003b0c:	2b02      	cmp	r3, #2
 8003b0e:	d003      	beq.n	8003b18 <setRotation+0xd4>
 8003b10:	4b52      	ldr	r3, [pc, #328]	; (8003c5c <setRotation+0x218>)
 8003b12:	781b      	ldrb	r3, [r3, #0]
 8003b14:	2b04      	cmp	r3, #4
 8003b16:	d102      	bne.n	8003b1e <setRotation+0xda>
		{
			madctl = ST77XX_MADCTL_MY | ST77XX_MADCTL_MV | ST77XX_MADCTL_RGB;
 8003b18:	23a0      	movs	r3, #160	; 0xa0
 8003b1a:	73fb      	strb	r3, [r7, #15]
 8003b1c:	e001      	b.n	8003b22 <setRotation+0xde>
		}
		else
		{
			madctl = ST77XX_MADCTL_MY | ST77XX_MADCTL_MV | ST7735_MADCTL_BGR;
 8003b1e:	23a8      	movs	r3, #168	; 0xa8
 8003b20:	73fb      	strb	r3, [r7, #15]
		}

		if (tabcolor == INITR_144GREENTAB)
 8003b22:	4b4e      	ldr	r3, [pc, #312]	; (8003c5c <setRotation+0x218>)
 8003b24:	781b      	ldrb	r3, [r3, #0]
 8003b26:	2b01      	cmp	r3, #1
 8003b28:	d106      	bne.n	8003b38 <setRotation+0xf4>
		{
			_width = ST7735_TFTHEIGHT_128;
 8003b2a:	4b4f      	ldr	r3, [pc, #316]	; (8003c68 <setRotation+0x224>)
 8003b2c:	2280      	movs	r2, #128	; 0x80
 8003b2e:	801a      	strh	r2, [r3, #0]
			_height = ST7735_TFTWIDTH_128;
 8003b30:	4b4c      	ldr	r3, [pc, #304]	; (8003c64 <setRotation+0x220>)
 8003b32:	2280      	movs	r2, #128	; 0x80
 8003b34:	801a      	strh	r2, [r3, #0]
 8003b36:	e010      	b.n	8003b5a <setRotation+0x116>
		}
		else if (tabcolor == INITR_MINI160x80)
 8003b38:	4b48      	ldr	r3, [pc, #288]	; (8003c5c <setRotation+0x218>)
 8003b3a:	781b      	ldrb	r3, [r3, #0]
 8003b3c:	2b04      	cmp	r3, #4
 8003b3e:	d106      	bne.n	8003b4e <setRotation+0x10a>
		{
			_width = ST7735_TFTHEIGHT_160;
 8003b40:	4b49      	ldr	r3, [pc, #292]	; (8003c68 <setRotation+0x224>)
 8003b42:	22a0      	movs	r2, #160	; 0xa0
 8003b44:	801a      	strh	r2, [r3, #0]
			_height = ST7735_TFTWIDTH_80;
 8003b46:	4b47      	ldr	r3, [pc, #284]	; (8003c64 <setRotation+0x220>)
 8003b48:	2250      	movs	r2, #80	; 0x50
 8003b4a:	801a      	strh	r2, [r3, #0]
 8003b4c:	e005      	b.n	8003b5a <setRotation+0x116>
		}
		else
		{
			_width = ST7735_TFTHEIGHT_160;
 8003b4e:	4b46      	ldr	r3, [pc, #280]	; (8003c68 <setRotation+0x224>)
 8003b50:	22a0      	movs	r2, #160	; 0xa0
 8003b52:	801a      	strh	r2, [r3, #0]
			_height = ST7735_TFTWIDTH_128;
 8003b54:	4b43      	ldr	r3, [pc, #268]	; (8003c64 <setRotation+0x220>)
 8003b56:	2280      	movs	r2, #128	; 0x80
 8003b58:	801a      	strh	r2, [r3, #0]
		}
		_ystart = _colstart;
 8003b5a:	4b44      	ldr	r3, [pc, #272]	; (8003c6c <setRotation+0x228>)
 8003b5c:	781b      	ldrb	r3, [r3, #0]
 8003b5e:	b21a      	sxth	r2, r3
 8003b60:	4b44      	ldr	r3, [pc, #272]	; (8003c74 <setRotation+0x230>)
 8003b62:	801a      	strh	r2, [r3, #0]
		_xstart = _rowstart;
 8003b64:	4b3e      	ldr	r3, [pc, #248]	; (8003c60 <setRotation+0x21c>)
 8003b66:	781b      	ldrb	r3, [r3, #0]
 8003b68:	b21a      	sxth	r2, r3
 8003b6a:	4b41      	ldr	r3, [pc, #260]	; (8003c70 <setRotation+0x22c>)
 8003b6c:	801a      	strh	r2, [r3, #0]
		break;
 8003b6e:	e067      	b.n	8003c40 <setRotation+0x1fc>
	case 2:
		if ((tabcolor == INITR_BLACKTAB) || (tabcolor == INITR_MINI160x80))
 8003b70:	4b3a      	ldr	r3, [pc, #232]	; (8003c5c <setRotation+0x218>)
 8003b72:	781b      	ldrb	r3, [r3, #0]
 8003b74:	2b02      	cmp	r3, #2
 8003b76:	d003      	beq.n	8003b80 <setRotation+0x13c>
 8003b78:	4b38      	ldr	r3, [pc, #224]	; (8003c5c <setRotation+0x218>)
 8003b7a:	781b      	ldrb	r3, [r3, #0]
 8003b7c:	2b04      	cmp	r3, #4
 8003b7e:	d102      	bne.n	8003b86 <setRotation+0x142>
		{
			madctl = ST77XX_MADCTL_RGB;
 8003b80:	2300      	movs	r3, #0
 8003b82:	73fb      	strb	r3, [r7, #15]
 8003b84:	e001      	b.n	8003b8a <setRotation+0x146>
		}
		else
		{
			madctl = ST7735_MADCTL_BGR;
 8003b86:	2308      	movs	r3, #8
 8003b88:	73fb      	strb	r3, [r7, #15]
		}

		if (tabcolor == INITR_144GREENTAB)
 8003b8a:	4b34      	ldr	r3, [pc, #208]	; (8003c5c <setRotation+0x218>)
 8003b8c:	781b      	ldrb	r3, [r3, #0]
 8003b8e:	2b01      	cmp	r3, #1
 8003b90:	d106      	bne.n	8003ba0 <setRotation+0x15c>
		{
			_height = ST7735_TFTHEIGHT_128;
 8003b92:	4b34      	ldr	r3, [pc, #208]	; (8003c64 <setRotation+0x220>)
 8003b94:	2280      	movs	r2, #128	; 0x80
 8003b96:	801a      	strh	r2, [r3, #0]
			_width = ST7735_TFTWIDTH_128;
 8003b98:	4b33      	ldr	r3, [pc, #204]	; (8003c68 <setRotation+0x224>)
 8003b9a:	2280      	movs	r2, #128	; 0x80
 8003b9c:	801a      	strh	r2, [r3, #0]
 8003b9e:	e010      	b.n	8003bc2 <setRotation+0x17e>
		}
		else if (tabcolor == INITR_MINI160x80)
 8003ba0:	4b2e      	ldr	r3, [pc, #184]	; (8003c5c <setRotation+0x218>)
 8003ba2:	781b      	ldrb	r3, [r3, #0]
 8003ba4:	2b04      	cmp	r3, #4
 8003ba6:	d106      	bne.n	8003bb6 <setRotation+0x172>
		{
			_height = ST7735_TFTHEIGHT_160;
 8003ba8:	4b2e      	ldr	r3, [pc, #184]	; (8003c64 <setRotation+0x220>)
 8003baa:	22a0      	movs	r2, #160	; 0xa0
 8003bac:	801a      	strh	r2, [r3, #0]
			_width = ST7735_TFTWIDTH_80;
 8003bae:	4b2e      	ldr	r3, [pc, #184]	; (8003c68 <setRotation+0x224>)
 8003bb0:	2250      	movs	r2, #80	; 0x50
 8003bb2:	801a      	strh	r2, [r3, #0]
 8003bb4:	e005      	b.n	8003bc2 <setRotation+0x17e>
		}
		else
		{
			_height = ST7735_TFTHEIGHT_160;
 8003bb6:	4b2b      	ldr	r3, [pc, #172]	; (8003c64 <setRotation+0x220>)
 8003bb8:	22a0      	movs	r2, #160	; 0xa0
 8003bba:	801a      	strh	r2, [r3, #0]
			_width = ST7735_TFTWIDTH_128;
 8003bbc:	4b2a      	ldr	r3, [pc, #168]	; (8003c68 <setRotation+0x224>)
 8003bbe:	2280      	movs	r2, #128	; 0x80
 8003bc0:	801a      	strh	r2, [r3, #0]
		}
		_xstart = _colstart;
 8003bc2:	4b2a      	ldr	r3, [pc, #168]	; (8003c6c <setRotation+0x228>)
 8003bc4:	781b      	ldrb	r3, [r3, #0]
 8003bc6:	b21a      	sxth	r2, r3
 8003bc8:	4b29      	ldr	r3, [pc, #164]	; (8003c70 <setRotation+0x22c>)
 8003bca:	801a      	strh	r2, [r3, #0]
		_ystart = _rowstart;
 8003bcc:	4b24      	ldr	r3, [pc, #144]	; (8003c60 <setRotation+0x21c>)
 8003bce:	781b      	ldrb	r3, [r3, #0]
 8003bd0:	b21a      	sxth	r2, r3
 8003bd2:	4b28      	ldr	r3, [pc, #160]	; (8003c74 <setRotation+0x230>)
 8003bd4:	801a      	strh	r2, [r3, #0]
		break;
 8003bd6:	e033      	b.n	8003c40 <setRotation+0x1fc>
	case 3:
		if ((tabcolor == INITR_BLACKTAB) || (tabcolor == INITR_MINI160x80))
 8003bd8:	4b20      	ldr	r3, [pc, #128]	; (8003c5c <setRotation+0x218>)
 8003bda:	781b      	ldrb	r3, [r3, #0]
 8003bdc:	2b02      	cmp	r3, #2
 8003bde:	d003      	beq.n	8003be8 <setRotation+0x1a4>
 8003be0:	4b1e      	ldr	r3, [pc, #120]	; (8003c5c <setRotation+0x218>)
 8003be2:	781b      	ldrb	r3, [r3, #0]
 8003be4:	2b04      	cmp	r3, #4
 8003be6:	d102      	bne.n	8003bee <setRotation+0x1aa>
		{
			madctl = ST77XX_MADCTL_MX | ST77XX_MADCTL_MV | ST77XX_MADCTL_RGB;
 8003be8:	2360      	movs	r3, #96	; 0x60
 8003bea:	73fb      	strb	r3, [r7, #15]
 8003bec:	e001      	b.n	8003bf2 <setRotation+0x1ae>
		}
		else
		{
			madctl = ST77XX_MADCTL_MX | ST77XX_MADCTL_MV | ST7735_MADCTL_BGR;
 8003bee:	2368      	movs	r3, #104	; 0x68
 8003bf0:	73fb      	strb	r3, [r7, #15]
		}

		if (tabcolor == INITR_144GREENTAB)
 8003bf2:	4b1a      	ldr	r3, [pc, #104]	; (8003c5c <setRotation+0x218>)
 8003bf4:	781b      	ldrb	r3, [r3, #0]
 8003bf6:	2b01      	cmp	r3, #1
 8003bf8:	d106      	bne.n	8003c08 <setRotation+0x1c4>
		{
			_width = ST7735_TFTHEIGHT_128;
 8003bfa:	4b1b      	ldr	r3, [pc, #108]	; (8003c68 <setRotation+0x224>)
 8003bfc:	2280      	movs	r2, #128	; 0x80
 8003bfe:	801a      	strh	r2, [r3, #0]
			_height = ST7735_TFTWIDTH_128;
 8003c00:	4b18      	ldr	r3, [pc, #96]	; (8003c64 <setRotation+0x220>)
 8003c02:	2280      	movs	r2, #128	; 0x80
 8003c04:	801a      	strh	r2, [r3, #0]
 8003c06:	e010      	b.n	8003c2a <setRotation+0x1e6>
		}
		else if (tabcolor == INITR_MINI160x80)
 8003c08:	4b14      	ldr	r3, [pc, #80]	; (8003c5c <setRotation+0x218>)
 8003c0a:	781b      	ldrb	r3, [r3, #0]
 8003c0c:	2b04      	cmp	r3, #4
 8003c0e:	d106      	bne.n	8003c1e <setRotation+0x1da>
		{
			_width = ST7735_TFTHEIGHT_160;
 8003c10:	4b15      	ldr	r3, [pc, #84]	; (8003c68 <setRotation+0x224>)
 8003c12:	22a0      	movs	r2, #160	; 0xa0
 8003c14:	801a      	strh	r2, [r3, #0]
			_height = ST7735_TFTWIDTH_80;
 8003c16:	4b13      	ldr	r3, [pc, #76]	; (8003c64 <setRotation+0x220>)
 8003c18:	2250      	movs	r2, #80	; 0x50
 8003c1a:	801a      	strh	r2, [r3, #0]
 8003c1c:	e005      	b.n	8003c2a <setRotation+0x1e6>
		}
		else
		{
			_width = ST7735_TFTHEIGHT_160;
 8003c1e:	4b12      	ldr	r3, [pc, #72]	; (8003c68 <setRotation+0x224>)
 8003c20:	22a0      	movs	r2, #160	; 0xa0
 8003c22:	801a      	strh	r2, [r3, #0]
			_height = ST7735_TFTWIDTH_128;
 8003c24:	4b0f      	ldr	r3, [pc, #60]	; (8003c64 <setRotation+0x220>)
 8003c26:	2280      	movs	r2, #128	; 0x80
 8003c28:	801a      	strh	r2, [r3, #0]
		}
		_ystart = _colstart;
 8003c2a:	4b10      	ldr	r3, [pc, #64]	; (8003c6c <setRotation+0x228>)
 8003c2c:	781b      	ldrb	r3, [r3, #0]
 8003c2e:	b21a      	sxth	r2, r3
 8003c30:	4b10      	ldr	r3, [pc, #64]	; (8003c74 <setRotation+0x230>)
 8003c32:	801a      	strh	r2, [r3, #0]
		_xstart = _rowstart;
 8003c34:	4b0a      	ldr	r3, [pc, #40]	; (8003c60 <setRotation+0x21c>)
 8003c36:	781b      	ldrb	r3, [r3, #0]
 8003c38:	b21a      	sxth	r2, r3
 8003c3a:	4b0d      	ldr	r3, [pc, #52]	; (8003c70 <setRotation+0x22c>)
 8003c3c:	801a      	strh	r2, [r3, #0]
		break;
 8003c3e:	bf00      	nop
	}

	ST7735_SendCommand(ST77XX_MADCTL, &madctl, 1);
 8003c40:	f107 030f 	add.w	r3, r7, #15
 8003c44:	2201      	movs	r2, #1
 8003c46:	4619      	mov	r1, r3
 8003c48:	2036      	movs	r0, #54	; 0x36
 8003c4a:	f7ff fe9f 	bl	800398c <ST7735_SendCommand>
}
 8003c4e:	bf00      	nop
 8003c50:	3710      	adds	r7, #16
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd80      	pop	{r7, pc}
 8003c56:	bf00      	nop
 8003c58:	200004e4 	.word	0x200004e4
 8003c5c:	200004da 	.word	0x200004da
 8003c60:	200004d9 	.word	0x200004d9
 8003c64:	200004de 	.word	0x200004de
 8003c68:	200004dc 	.word	0x200004dc
 8003c6c:	200004d8 	.word	0x200004d8
 8003c70:	200004e0 	.word	0x200004e0
 8003c74:	200004e2 	.word	0x200004e2

08003c78 <ST7735_initR>:

void ST7735_initR(uint8_t options, SPI_HandleTypeDef *port)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b084      	sub	sp, #16
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	4603      	mov	r3, r0
 8003c80:	6039      	str	r1, [r7, #0]
 8003c82:	71fb      	strb	r3, [r7, #7]

	spiPort = port;
 8003c84:	4a34      	ldr	r2, [pc, #208]	; (8003d58 <ST7735_initR+0xe0>)
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	6013      	str	r3, [r2, #0]
	ST7735_Select();
 8003c8a:	f7ff fe23 	bl	80038d4 <ST7735_Select>
	ST7735_Reset();
 8003c8e:	f7ff fe0b 	bl	80038a8 <ST7735_Reset>
	ST7735_displayInit(Rcmd1);
 8003c92:	4832      	ldr	r0, [pc, #200]	; (8003d5c <ST7735_initR+0xe4>)
 8003c94:	f7ff fe93 	bl	80039be <ST7735_displayInit>
	if (options == INITR_GREENTAB)
 8003c98:	79fb      	ldrb	r3, [r7, #7]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d109      	bne.n	8003cb2 <ST7735_initR+0x3a>
	{
		ST7735_displayInit(Rcmd2green);
 8003c9e:	4830      	ldr	r0, [pc, #192]	; (8003d60 <ST7735_initR+0xe8>)
 8003ca0:	f7ff fe8d 	bl	80039be <ST7735_displayInit>
		_colstart = 2;
 8003ca4:	4b2f      	ldr	r3, [pc, #188]	; (8003d64 <ST7735_initR+0xec>)
 8003ca6:	2202      	movs	r2, #2
 8003ca8:	701a      	strb	r2, [r3, #0]
		_rowstart = 1;
 8003caa:	4b2f      	ldr	r3, [pc, #188]	; (8003d68 <ST7735_initR+0xf0>)
 8003cac:	2201      	movs	r2, #1
 8003cae:	701a      	strb	r2, [r3, #0]
 8003cb0:	e02b      	b.n	8003d0a <ST7735_initR+0x92>
	}
	else if ((options == INITR_144GREENTAB) || (options == INITR_HALLOWING))
 8003cb2:	79fb      	ldrb	r3, [r7, #7]
 8003cb4:	2b01      	cmp	r3, #1
 8003cb6:	d002      	beq.n	8003cbe <ST7735_initR+0x46>
 8003cb8:	79fb      	ldrb	r3, [r7, #7]
 8003cba:	2b05      	cmp	r3, #5
 8003cbc:	d10f      	bne.n	8003cde <ST7735_initR+0x66>
	{
		_height = ST7735_TFTHEIGHT_128;
 8003cbe:	4b2b      	ldr	r3, [pc, #172]	; (8003d6c <ST7735_initR+0xf4>)
 8003cc0:	2280      	movs	r2, #128	; 0x80
 8003cc2:	801a      	strh	r2, [r3, #0]
		_width = ST7735_TFTWIDTH_128;
 8003cc4:	4b2a      	ldr	r3, [pc, #168]	; (8003d70 <ST7735_initR+0xf8>)
 8003cc6:	2280      	movs	r2, #128	; 0x80
 8003cc8:	801a      	strh	r2, [r3, #0]
		ST7735_displayInit(Rcmd2green144);
 8003cca:	482a      	ldr	r0, [pc, #168]	; (8003d74 <ST7735_initR+0xfc>)
 8003ccc:	f7ff fe77 	bl	80039be <ST7735_displayInit>
		_colstart = 2;
 8003cd0:	4b24      	ldr	r3, [pc, #144]	; (8003d64 <ST7735_initR+0xec>)
 8003cd2:	2202      	movs	r2, #2
 8003cd4:	701a      	strb	r2, [r3, #0]
		_rowstart = 3; // For default rotation 0
 8003cd6:	4b24      	ldr	r3, [pc, #144]	; (8003d68 <ST7735_initR+0xf0>)
 8003cd8:	2203      	movs	r2, #3
 8003cda:	701a      	strb	r2, [r3, #0]
 8003cdc:	e015      	b.n	8003d0a <ST7735_initR+0x92>
	}
	else if (options == INITR_MINI160x80)
 8003cde:	79fb      	ldrb	r3, [r7, #7]
 8003ce0:	2b04      	cmp	r3, #4
 8003ce2:	d10f      	bne.n	8003d04 <ST7735_initR+0x8c>
	{
		_height = ST7735_TFTWIDTH_80;
 8003ce4:	4b21      	ldr	r3, [pc, #132]	; (8003d6c <ST7735_initR+0xf4>)
 8003ce6:	2250      	movs	r2, #80	; 0x50
 8003ce8:	801a      	strh	r2, [r3, #0]
		_width = ST7735_TFTHEIGHT_160;
 8003cea:	4b21      	ldr	r3, [pc, #132]	; (8003d70 <ST7735_initR+0xf8>)
 8003cec:	22a0      	movs	r2, #160	; 0xa0
 8003cee:	801a      	strh	r2, [r3, #0]
		ST7735_displayInit(Rcmd2green160x80);
 8003cf0:	4821      	ldr	r0, [pc, #132]	; (8003d78 <ST7735_initR+0x100>)
 8003cf2:	f7ff fe64 	bl	80039be <ST7735_displayInit>
		_colstart = 24;
 8003cf6:	4b1b      	ldr	r3, [pc, #108]	; (8003d64 <ST7735_initR+0xec>)
 8003cf8:	2218      	movs	r2, #24
 8003cfa:	701a      	strb	r2, [r3, #0]
		_rowstart = 0;
 8003cfc:	4b1a      	ldr	r3, [pc, #104]	; (8003d68 <ST7735_initR+0xf0>)
 8003cfe:	2200      	movs	r2, #0
 8003d00:	701a      	strb	r2, [r3, #0]
 8003d02:	e002      	b.n	8003d0a <ST7735_initR+0x92>
	}
	else
	{
		// colstart, rowstart left at default '0' values
		ST7735_displayInit(Rcmd2red);
 8003d04:	481d      	ldr	r0, [pc, #116]	; (8003d7c <ST7735_initR+0x104>)
 8003d06:	f7ff fe5a 	bl	80039be <ST7735_displayInit>
	}
	ST7735_displayInit(Rcmd3);
 8003d0a:	481d      	ldr	r0, [pc, #116]	; (8003d80 <ST7735_initR+0x108>)
 8003d0c:	f7ff fe57 	bl	80039be <ST7735_displayInit>

	// Black tab, change MADCTL color filter
	if ((options == INITR_BLACKTAB) || (options == INITR_MINI160x80))
 8003d10:	79fb      	ldrb	r3, [r7, #7]
 8003d12:	2b02      	cmp	r3, #2
 8003d14:	d002      	beq.n	8003d1c <ST7735_initR+0xa4>
 8003d16:	79fb      	ldrb	r3, [r7, #7]
 8003d18:	2b04      	cmp	r3, #4
 8003d1a:	d108      	bne.n	8003d2e <ST7735_initR+0xb6>
	{
		uint8_t data = 0xC0;
 8003d1c:	23c0      	movs	r3, #192	; 0xc0
 8003d1e:	73fb      	strb	r3, [r7, #15]
		ST7735_SendCommand(ST77XX_MADCTL, &data, 1);
 8003d20:	f107 030f 	add.w	r3, r7, #15
 8003d24:	2201      	movs	r2, #1
 8003d26:	4619      	mov	r1, r3
 8003d28:	2036      	movs	r0, #54	; 0x36
 8003d2a:	f7ff fe2f 	bl	800398c <ST7735_SendCommand>
	}

	if (options == INITR_HALLOWING)
 8003d2e:	79fb      	ldrb	r3, [r7, #7]
 8003d30:	2b05      	cmp	r3, #5
 8003d32:	d106      	bne.n	8003d42 <ST7735_initR+0xca>
	{
		// Hallowing is simply a 1.44" green tab upside-down:
		tabcolor = INITR_144GREENTAB;
 8003d34:	4b13      	ldr	r3, [pc, #76]	; (8003d84 <ST7735_initR+0x10c>)
 8003d36:	2201      	movs	r2, #1
 8003d38:	701a      	strb	r2, [r3, #0]
		setRotation(2);
 8003d3a:	2002      	movs	r0, #2
 8003d3c:	f7ff fe82 	bl	8003a44 <setRotation>
	else
	{
		tabcolor = options;
		setRotation(0);
	}
}
 8003d40:	e005      	b.n	8003d4e <ST7735_initR+0xd6>
		tabcolor = options;
 8003d42:	4a10      	ldr	r2, [pc, #64]	; (8003d84 <ST7735_initR+0x10c>)
 8003d44:	79fb      	ldrb	r3, [r7, #7]
 8003d46:	7013      	strb	r3, [r2, #0]
		setRotation(0);
 8003d48:	2000      	movs	r0, #0
 8003d4a:	f7ff fe7b 	bl	8003a44 <setRotation>
}
 8003d4e:	bf00      	nop
 8003d50:	3710      	adds	r7, #16
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bd80      	pop	{r7, pc}
 8003d56:	bf00      	nop
 8003d58:	200004d4 	.word	0x200004d4
 8003d5c:	08013ab0 	.word	0x08013ab0
 8003d60:	08013aec 	.word	0x08013aec
 8003d64:	200004d8 	.word	0x200004d8
 8003d68:	200004d9 	.word	0x200004d9
 8003d6c:	200004de 	.word	0x200004de
 8003d70:	200004dc 	.word	0x200004dc
 8003d74:	08013b0c 	.word	0x08013b0c
 8003d78:	08013b1c 	.word	0x08013b1c
 8003d7c:	08013afc 	.word	0x08013afc
 8003d80:	08013b2c 	.word	0x08013b2c
 8003d84:	200004da 	.word	0x200004da

08003d88 <ST7735_setAddrWindow>:

void ST7735_setAddrWindow(uint8_t x, uint8_t y, uint8_t w, uint8_t h)
{
 8003d88:	b590      	push	{r4, r7, lr}
 8003d8a:	b085      	sub	sp, #20
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	4604      	mov	r4, r0
 8003d90:	4608      	mov	r0, r1
 8003d92:	4611      	mov	r1, r2
 8003d94:	461a      	mov	r2, r3
 8003d96:	4623      	mov	r3, r4
 8003d98:	71fb      	strb	r3, [r7, #7]
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	71bb      	strb	r3, [r7, #6]
 8003d9e:	460b      	mov	r3, r1
 8003da0:	717b      	strb	r3, [r7, #5]
 8003da2:	4613      	mov	r3, r2
 8003da4:	713b      	strb	r3, [r7, #4]

	x += _xstart;
 8003da6:	4b1e      	ldr	r3, [pc, #120]	; (8003e20 <ST7735_setAddrWindow+0x98>)
 8003da8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003dac:	b2da      	uxtb	r2, r3
 8003dae:	79fb      	ldrb	r3, [r7, #7]
 8003db0:	4413      	add	r3, r2
 8003db2:	71fb      	strb	r3, [r7, #7]
	y += _ystart;
 8003db4:	4b1b      	ldr	r3, [pc, #108]	; (8003e24 <ST7735_setAddrWindow+0x9c>)
 8003db6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003dba:	b2da      	uxtb	r2, r3
 8003dbc:	79bb      	ldrb	r3, [r7, #6]
 8003dbe:	4413      	add	r3, r2
 8003dc0:	71bb      	strb	r3, [r7, #6]

	uint32_t xa = ((uint32_t)x << 16) | (x + w - 1);
 8003dc2:	79fb      	ldrb	r3, [r7, #7]
 8003dc4:	041b      	lsls	r3, r3, #16
 8003dc6:	79f9      	ldrb	r1, [r7, #7]
 8003dc8:	797a      	ldrb	r2, [r7, #5]
 8003dca:	440a      	add	r2, r1
 8003dcc:	3a01      	subs	r2, #1
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	60fb      	str	r3, [r7, #12]
	uint32_t ya = ((uint32_t)y << 16) | (y + h - 1);
 8003dd2:	79bb      	ldrb	r3, [r7, #6]
 8003dd4:	041b      	lsls	r3, r3, #16
 8003dd6:	79b9      	ldrb	r1, [r7, #6]
 8003dd8:	793a      	ldrb	r2, [r7, #4]
 8003dda:	440a      	add	r2, r1
 8003ddc:	3a01      	subs	r2, #1
 8003dde:	4313      	orrs	r3, r2
 8003de0:	60bb      	str	r3, [r7, #8]

	xa = __builtin_bswap32(xa);
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	ba1b      	rev	r3, r3
 8003de6:	60fb      	str	r3, [r7, #12]
	ya = __builtin_bswap32(ya);
 8003de8:	68bb      	ldr	r3, [r7, #8]
 8003dea:	ba1b      	rev	r3, r3
 8003dec:	60bb      	str	r3, [r7, #8]

	ST7735_WriteCommand(ST77XX_CASET);
 8003dee:	202a      	movs	r0, #42	; 0x2a
 8003df0:	f7ff fda0 	bl	8003934 <ST7735_WriteCommand>
	ST7735_WriteData(&xa, sizeof(xa));
 8003df4:	f107 030c 	add.w	r3, r7, #12
 8003df8:	2104      	movs	r1, #4
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	f7ff fdb0 	bl	8003960 <ST7735_WriteData>

	// row address set
	ST7735_WriteCommand(ST77XX_RASET);
 8003e00:	202b      	movs	r0, #43	; 0x2b
 8003e02:	f7ff fd97 	bl	8003934 <ST7735_WriteCommand>
	ST7735_WriteData(&ya, sizeof(ya));
 8003e06:	f107 0308 	add.w	r3, r7, #8
 8003e0a:	2104      	movs	r1, #4
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	f7ff fda7 	bl	8003960 <ST7735_WriteData>

	// write to RAM
	ST7735_WriteCommand(ST77XX_RAMWR);
 8003e12:	202c      	movs	r0, #44	; 0x2c
 8003e14:	f7ff fd8e 	bl	8003934 <ST7735_WriteCommand>
}
 8003e18:	bf00      	nop
 8003e1a:	3714      	adds	r7, #20
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	bd90      	pop	{r4, r7, pc}
 8003e20:	200004e0 	.word	0x200004e0
 8003e24:	200004e2 	.word	0x200004e2

08003e28 <SPI_WRITE16>:

void SPI_WRITE16(uint16_t d)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b084      	sub	sp, #16
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	4603      	mov	r3, r0
 8003e30:	80fb      	strh	r3, [r7, #6]
	uint8_t data[] = {d >> 8, d & 0xFF};
 8003e32:	88fb      	ldrh	r3, [r7, #6]
 8003e34:	0a1b      	lsrs	r3, r3, #8
 8003e36:	b29b      	uxth	r3, r3
 8003e38:	b2db      	uxtb	r3, r3
 8003e3a:	733b      	strb	r3, [r7, #12]
 8003e3c:	88fb      	ldrh	r3, [r7, #6]
 8003e3e:	b2db      	uxtb	r3, r3
 8003e40:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(spiPort, data, sizeof(data), HAL_MAX_DELAY);
 8003e42:	4b06      	ldr	r3, [pc, #24]	; (8003e5c <SPI_WRITE16+0x34>)
 8003e44:	6818      	ldr	r0, [r3, #0]
 8003e46:	f107 010c 	add.w	r1, r7, #12
 8003e4a:	f04f 33ff 	mov.w	r3, #4294967295
 8003e4e:	2202      	movs	r2, #2
 8003e50:	f002 f8df 	bl	8006012 <HAL_SPI_Transmit>
}
 8003e54:	bf00      	nop
 8003e56:	3710      	adds	r7, #16
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	bd80      	pop	{r7, pc}
 8003e5c:	200004d4 	.word	0x200004d4

08003e60 <ST7735_writePixel>:

void ST7735_writePixel(int16_t x, int16_t y, uint16_t color)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b082      	sub	sp, #8
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	4603      	mov	r3, r0
 8003e68:	80fb      	strh	r3, [r7, #6]
 8003e6a:	460b      	mov	r3, r1
 8003e6c:	80bb      	strh	r3, [r7, #4]
 8003e6e:	4613      	mov	r3, r2
 8003e70:	807b      	strh	r3, [r7, #2]
	if ((x >= 0) && (x < _width) && (y >= 0) && (y < _height))
 8003e72:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	db1f      	blt.n	8003eba <ST7735_writePixel+0x5a>
 8003e7a:	4b12      	ldr	r3, [pc, #72]	; (8003ec4 <ST7735_writePixel+0x64>)
 8003e7c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003e80:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003e84:	429a      	cmp	r2, r3
 8003e86:	da18      	bge.n	8003eba <ST7735_writePixel+0x5a>
 8003e88:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	db14      	blt.n	8003eba <ST7735_writePixel+0x5a>
 8003e90:	4b0d      	ldr	r3, [pc, #52]	; (8003ec8 <ST7735_writePixel+0x68>)
 8003e92:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003e96:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8003e9a:	429a      	cmp	r2, r3
 8003e9c:	da0d      	bge.n	8003eba <ST7735_writePixel+0x5a>
	{
		// THEN set up transaction (if needed) and draw...
		// ST7735_Select();
		ST7735_setAddrWindow(x, y, 1, 1);
 8003e9e:	88fb      	ldrh	r3, [r7, #6]
 8003ea0:	b2d8      	uxtb	r0, r3
 8003ea2:	88bb      	ldrh	r3, [r7, #4]
 8003ea4:	b2d9      	uxtb	r1, r3
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	2201      	movs	r2, #1
 8003eaa:	f7ff ff6d 	bl	8003d88 <ST7735_setAddrWindow>
		ST7735_RegData();
 8003eae:	f7ff fd35 	bl	800391c <ST7735_RegData>
		SPI_WRITE16(color);
 8003eb2:	887b      	ldrh	r3, [r7, #2]
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	f7ff ffb7 	bl	8003e28 <SPI_WRITE16>
		// ST7735_DeSelect();
	}
}
 8003eba:	bf00      	nop
 8003ebc:	3708      	adds	r7, #8
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bd80      	pop	{r7, pc}
 8003ec2:	bf00      	nop
 8003ec4:	200004dc 	.word	0x200004dc
 8003ec8:	200004de 	.word	0x200004de

08003ecc <drawPixel>:

void drawPixel(int16_t x, int16_t y, uint16_t color)
{
 8003ecc:	b590      	push	{r4, r7, lr}
 8003ece:	b083      	sub	sp, #12
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	80fb      	strh	r3, [r7, #6]
 8003ed6:	460b      	mov	r3, r1
 8003ed8:	80bb      	strh	r3, [r7, #4]
 8003eda:	4613      	mov	r3, r2
 8003edc:	807b      	strh	r3, [r7, #2]
	if ((x >= 0) && (x < _width) && (y >= 0) && (y < _height))
 8003ede:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	db3b      	blt.n	8003f5e <drawPixel+0x92>
 8003ee6:	4b20      	ldr	r3, [pc, #128]	; (8003f68 <drawPixel+0x9c>)
 8003ee8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003eec:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003ef0:	429a      	cmp	r2, r3
 8003ef2:	da34      	bge.n	8003f5e <drawPixel+0x92>
 8003ef4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	db30      	blt.n	8003f5e <drawPixel+0x92>
 8003efc:	4b1b      	ldr	r3, [pc, #108]	; (8003f6c <drawPixel+0xa0>)
 8003efe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003f02:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8003f06:	429a      	cmp	r2, r3
 8003f08:	da29      	bge.n	8003f5e <drawPixel+0x92>
	{
		if (frameBuffer != NULL)
 8003f0a:	4b19      	ldr	r3, [pc, #100]	; (8003f70 <drawPixel+0xa4>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d019      	beq.n	8003f46 <drawPixel+0x7a>
		{
			frameBuffer[x + y * _width] = (color >> 8) | (color << 8);
 8003f12:	887b      	ldrh	r3, [r7, #2]
 8003f14:	0a1b      	lsrs	r3, r3, #8
 8003f16:	b29b      	uxth	r3, r3
 8003f18:	b21a      	sxth	r2, r3
 8003f1a:	887b      	ldrh	r3, [r7, #2]
 8003f1c:	021b      	lsls	r3, r3, #8
 8003f1e:	b21b      	sxth	r3, r3
 8003f20:	4313      	orrs	r3, r2
 8003f22:	b21c      	sxth	r4, r3
 8003f24:	4b12      	ldr	r3, [pc, #72]	; (8003f70 <drawPixel+0xa4>)
 8003f26:	681a      	ldr	r2, [r3, #0]
 8003f28:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8003f2c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003f30:	480d      	ldr	r0, [pc, #52]	; (8003f68 <drawPixel+0x9c>)
 8003f32:	f9b0 0000 	ldrsh.w	r0, [r0]
 8003f36:	fb00 f303 	mul.w	r3, r0, r3
 8003f3a:	440b      	add	r3, r1
 8003f3c:	005b      	lsls	r3, r3, #1
 8003f3e:	4413      	add	r3, r2
 8003f40:	b2a2      	uxth	r2, r4
 8003f42:	801a      	strh	r2, [r3, #0]
			ST7735_Select();
			ST7735_writePixel(x, y, color);
			ST7735_DeSelect();
		}
	}
}
 8003f44:	e00b      	b.n	8003f5e <drawPixel+0x92>
			ST7735_Select();
 8003f46:	f7ff fcc5 	bl	80038d4 <ST7735_Select>
			ST7735_writePixel(x, y, color);
 8003f4a:	887a      	ldrh	r2, [r7, #2]
 8003f4c:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8003f50:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003f54:	4618      	mov	r0, r3
 8003f56:	f7ff ff83 	bl	8003e60 <ST7735_writePixel>
			ST7735_DeSelect();
 8003f5a:	f7ff fcc7 	bl	80038ec <ST7735_DeSelect>
}
 8003f5e:	bf00      	nop
 8003f60:	370c      	adds	r7, #12
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bd90      	pop	{r4, r7, pc}
 8003f66:	bf00      	nop
 8003f68:	200004dc 	.word	0x200004dc
 8003f6c:	200004de 	.word	0x200004de
 8003f70:	200004e8 	.word	0x200004e8

08003f74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003f78:	4b0e      	ldr	r3, [pc, #56]	; (8003fb4 <HAL_Init+0x40>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4a0d      	ldr	r2, [pc, #52]	; (8003fb4 <HAL_Init+0x40>)
 8003f7e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003f82:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003f84:	4b0b      	ldr	r3, [pc, #44]	; (8003fb4 <HAL_Init+0x40>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a0a      	ldr	r2, [pc, #40]	; (8003fb4 <HAL_Init+0x40>)
 8003f8a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003f8e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003f90:	4b08      	ldr	r3, [pc, #32]	; (8003fb4 <HAL_Init+0x40>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4a07      	ldr	r2, [pc, #28]	; (8003fb4 <HAL_Init+0x40>)
 8003f96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f9a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003f9c:	2003      	movs	r0, #3
 8003f9e:	f000 fd1b 	bl	80049d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003fa2:	200f      	movs	r0, #15
 8003fa4:	f002 ff4e 	bl	8006e44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003fa8:	f7fd faf8 	bl	800159c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003fac:	2300      	movs	r3, #0
}
 8003fae:	4618      	mov	r0, r3
 8003fb0:	bd80      	pop	{r7, pc}
 8003fb2:	bf00      	nop
 8003fb4:	40023c00 	.word	0x40023c00

08003fb8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003fb8:	b480      	push	{r7}
 8003fba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003fbc:	4b06      	ldr	r3, [pc, #24]	; (8003fd8 <HAL_IncTick+0x20>)
 8003fbe:	781b      	ldrb	r3, [r3, #0]
 8003fc0:	461a      	mov	r2, r3
 8003fc2:	4b06      	ldr	r3, [pc, #24]	; (8003fdc <HAL_IncTick+0x24>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4413      	add	r3, r2
 8003fc8:	4a04      	ldr	r2, [pc, #16]	; (8003fdc <HAL_IncTick+0x24>)
 8003fca:	6013      	str	r3, [r2, #0]
}
 8003fcc:	bf00      	nop
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd4:	4770      	bx	lr
 8003fd6:	bf00      	nop
 8003fd8:	20000028 	.word	0x20000028
 8003fdc:	200004ec 	.word	0x200004ec

08003fe0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	af00      	add	r7, sp, #0
  return uwTick;
 8003fe4:	4b03      	ldr	r3, [pc, #12]	; (8003ff4 <HAL_GetTick+0x14>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
}
 8003fe8:	4618      	mov	r0, r3
 8003fea:	46bd      	mov	sp, r7
 8003fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff0:	4770      	bx	lr
 8003ff2:	bf00      	nop
 8003ff4:	200004ec 	.word	0x200004ec

08003ff8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b084      	sub	sp, #16
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004000:	f7ff ffee 	bl	8003fe0 <HAL_GetTick>
 8004004:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004010:	d005      	beq.n	800401e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004012:	4b0a      	ldr	r3, [pc, #40]	; (800403c <HAL_Delay+0x44>)
 8004014:	781b      	ldrb	r3, [r3, #0]
 8004016:	461a      	mov	r2, r3
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	4413      	add	r3, r2
 800401c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800401e:	bf00      	nop
 8004020:	f7ff ffde 	bl	8003fe0 <HAL_GetTick>
 8004024:	4602      	mov	r2, r0
 8004026:	68bb      	ldr	r3, [r7, #8]
 8004028:	1ad3      	subs	r3, r2, r3
 800402a:	68fa      	ldr	r2, [r7, #12]
 800402c:	429a      	cmp	r2, r3
 800402e:	d8f7      	bhi.n	8004020 <HAL_Delay+0x28>
  {
  }
}
 8004030:	bf00      	nop
 8004032:	bf00      	nop
 8004034:	3710      	adds	r7, #16
 8004036:	46bd      	mov	sp, r7
 8004038:	bd80      	pop	{r7, pc}
 800403a:	bf00      	nop
 800403c:	20000028 	.word	0x20000028

08004040 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b084      	sub	sp, #16
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004048:	2300      	movs	r3, #0
 800404a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d101      	bne.n	8004056 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004052:	2301      	movs	r3, #1
 8004054:	e033      	b.n	80040be <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800405a:	2b00      	cmp	r3, #0
 800405c:	d109      	bne.n	8004072 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800405e:	6878      	ldr	r0, [r7, #4]
 8004060:	f7fd fac4 	bl	80015ec <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2200      	movs	r2, #0
 8004068:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2200      	movs	r2, #0
 800406e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004076:	f003 0310 	and.w	r3, r3, #16
 800407a:	2b00      	cmp	r3, #0
 800407c:	d118      	bne.n	80040b0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004082:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004086:	f023 0302 	bic.w	r3, r3, #2
 800408a:	f043 0202 	orr.w	r2, r3, #2
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8004092:	6878      	ldr	r0, [r7, #4]
 8004094:	f000 fa5e 	bl	8004554 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2200      	movs	r2, #0
 800409c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040a2:	f023 0303 	bic.w	r3, r3, #3
 80040a6:	f043 0201 	orr.w	r2, r3, #1
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	641a      	str	r2, [r3, #64]	; 0x40
 80040ae:	e001      	b.n	80040b4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80040b0:	2301      	movs	r3, #1
 80040b2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2200      	movs	r2, #0
 80040b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80040bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80040be:	4618      	mov	r0, r3
 80040c0:	3710      	adds	r7, #16
 80040c2:	46bd      	mov	sp, r7
 80040c4:	bd80      	pop	{r7, pc}
	...

080040c8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b086      	sub	sp, #24
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	60f8      	str	r0, [r7, #12]
 80040d0:	60b9      	str	r1, [r7, #8]
 80040d2:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80040d4:	2300      	movs	r3, #0
 80040d6:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040de:	2b01      	cmp	r3, #1
 80040e0:	d101      	bne.n	80040e6 <HAL_ADC_Start_DMA+0x1e>
 80040e2:	2302      	movs	r3, #2
 80040e4:	e0e9      	b.n	80042ba <HAL_ADC_Start_DMA+0x1f2>
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	2201      	movs	r2, #1
 80040ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	689b      	ldr	r3, [r3, #8]
 80040f4:	f003 0301 	and.w	r3, r3, #1
 80040f8:	2b01      	cmp	r3, #1
 80040fa:	d018      	beq.n	800412e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	689a      	ldr	r2, [r3, #8]
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f042 0201 	orr.w	r2, r2, #1
 800410a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800410c:	4b6d      	ldr	r3, [pc, #436]	; (80042c4 <HAL_ADC_Start_DMA+0x1fc>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4a6d      	ldr	r2, [pc, #436]	; (80042c8 <HAL_ADC_Start_DMA+0x200>)
 8004112:	fba2 2303 	umull	r2, r3, r2, r3
 8004116:	0c9a      	lsrs	r2, r3, #18
 8004118:	4613      	mov	r3, r2
 800411a:	005b      	lsls	r3, r3, #1
 800411c:	4413      	add	r3, r2
 800411e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8004120:	e002      	b.n	8004128 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8004122:	693b      	ldr	r3, [r7, #16]
 8004124:	3b01      	subs	r3, #1
 8004126:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8004128:	693b      	ldr	r3, [r7, #16]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d1f9      	bne.n	8004122 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	689b      	ldr	r3, [r3, #8]
 8004134:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004138:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800413c:	d107      	bne.n	800414e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	689a      	ldr	r2, [r3, #8]
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800414c:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	689b      	ldr	r3, [r3, #8]
 8004154:	f003 0301 	and.w	r3, r3, #1
 8004158:	2b01      	cmp	r3, #1
 800415a:	f040 80a1 	bne.w	80042a0 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004162:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004166:	f023 0301 	bic.w	r3, r3, #1
 800416a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800417c:	2b00      	cmp	r3, #0
 800417e:	d007      	beq.n	8004190 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004184:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004188:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004194:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004198:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800419c:	d106      	bne.n	80041ac <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041a2:	f023 0206 	bic.w	r2, r3, #6
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	645a      	str	r2, [r3, #68]	; 0x44
 80041aa:	e002      	b.n	80041b2 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	2200      	movs	r2, #0
 80041b0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	2200      	movs	r2, #0
 80041b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80041ba:	4b44      	ldr	r3, [pc, #272]	; (80042cc <HAL_ADC_Start_DMA+0x204>)
 80041bc:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041c2:	4a43      	ldr	r2, [pc, #268]	; (80042d0 <HAL_ADC_Start_DMA+0x208>)
 80041c4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041ca:	4a42      	ldr	r2, [pc, #264]	; (80042d4 <HAL_ADC_Start_DMA+0x20c>)
 80041cc:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041d2:	4a41      	ldr	r2, [pc, #260]	; (80042d8 <HAL_ADC_Start_DMA+0x210>)
 80041d4:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80041de:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	685a      	ldr	r2, [r3, #4]
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80041ee:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	689a      	ldr	r2, [r3, #8]
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80041fe:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	334c      	adds	r3, #76	; 0x4c
 800420a:	4619      	mov	r1, r3
 800420c:	68ba      	ldr	r2, [r7, #8]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	f000 fcca 	bl	8004ba8 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8004214:	697b      	ldr	r3, [r7, #20]
 8004216:	685b      	ldr	r3, [r3, #4]
 8004218:	f003 031f 	and.w	r3, r3, #31
 800421c:	2b00      	cmp	r3, #0
 800421e:	d12a      	bne.n	8004276 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4a2d      	ldr	r2, [pc, #180]	; (80042dc <HAL_ADC_Start_DMA+0x214>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d015      	beq.n	8004256 <HAL_ADC_Start_DMA+0x18e>
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4a2c      	ldr	r2, [pc, #176]	; (80042e0 <HAL_ADC_Start_DMA+0x218>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d105      	bne.n	8004240 <HAL_ADC_Start_DMA+0x178>
 8004234:	4b25      	ldr	r3, [pc, #148]	; (80042cc <HAL_ADC_Start_DMA+0x204>)
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	f003 031f 	and.w	r3, r3, #31
 800423c:	2b00      	cmp	r3, #0
 800423e:	d00a      	beq.n	8004256 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a27      	ldr	r2, [pc, #156]	; (80042e4 <HAL_ADC_Start_DMA+0x21c>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d136      	bne.n	80042b8 <HAL_ADC_Start_DMA+0x1f0>
 800424a:	4b20      	ldr	r3, [pc, #128]	; (80042cc <HAL_ADC_Start_DMA+0x204>)
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	f003 0310 	and.w	r3, r3, #16
 8004252:	2b00      	cmp	r3, #0
 8004254:	d130      	bne.n	80042b8 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	689b      	ldr	r3, [r3, #8]
 800425c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004260:	2b00      	cmp	r3, #0
 8004262:	d129      	bne.n	80042b8 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	689a      	ldr	r2, [r3, #8]
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004272:	609a      	str	r2, [r3, #8]
 8004274:	e020      	b.n	80042b8 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4a18      	ldr	r2, [pc, #96]	; (80042dc <HAL_ADC_Start_DMA+0x214>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d11b      	bne.n	80042b8 <HAL_ADC_Start_DMA+0x1f0>
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	689b      	ldr	r3, [r3, #8]
 8004286:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800428a:	2b00      	cmp	r3, #0
 800428c:	d114      	bne.n	80042b8 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	689a      	ldr	r2, [r3, #8]
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800429c:	609a      	str	r2, [r3, #8]
 800429e:	e00b      	b.n	80042b8 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042a4:	f043 0210 	orr.w	r2, r3, #16
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042b0:	f043 0201 	orr.w	r2, r3, #1
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80042b8:	2300      	movs	r3, #0
}
 80042ba:	4618      	mov	r0, r3
 80042bc:	3718      	adds	r7, #24
 80042be:	46bd      	mov	sp, r7
 80042c0:	bd80      	pop	{r7, pc}
 80042c2:	bf00      	nop
 80042c4:	20000018 	.word	0x20000018
 80042c8:	431bde83 	.word	0x431bde83
 80042cc:	40012300 	.word	0x40012300
 80042d0:	0800474d 	.word	0x0800474d
 80042d4:	08004807 	.word	0x08004807
 80042d8:	08004823 	.word	0x08004823
 80042dc:	40012000 	.word	0x40012000
 80042e0:	40012100 	.word	0x40012100
 80042e4:	40012200 	.word	0x40012200

080042e8 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80042e8:	b480      	push	{r7}
 80042ea:	b083      	sub	sp, #12
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80042f0:	bf00      	nop
 80042f2:	370c      	adds	r7, #12
 80042f4:	46bd      	mov	sp, r7
 80042f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fa:	4770      	bx	lr

080042fc <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80042fc:	b480      	push	{r7}
 80042fe:	b083      	sub	sp, #12
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8004304:	bf00      	nop
 8004306:	370c      	adds	r7, #12
 8004308:	46bd      	mov	sp, r7
 800430a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430e:	4770      	bx	lr

08004310 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004310:	b480      	push	{r7}
 8004312:	b085      	sub	sp, #20
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
 8004318:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800431a:	2300      	movs	r3, #0
 800431c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004324:	2b01      	cmp	r3, #1
 8004326:	d101      	bne.n	800432c <HAL_ADC_ConfigChannel+0x1c>
 8004328:	2302      	movs	r3, #2
 800432a:	e105      	b.n	8004538 <HAL_ADC_ConfigChannel+0x228>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2201      	movs	r2, #1
 8004330:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	2b09      	cmp	r3, #9
 800433a:	d925      	bls.n	8004388 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	68d9      	ldr	r1, [r3, #12]
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	b29b      	uxth	r3, r3
 8004348:	461a      	mov	r2, r3
 800434a:	4613      	mov	r3, r2
 800434c:	005b      	lsls	r3, r3, #1
 800434e:	4413      	add	r3, r2
 8004350:	3b1e      	subs	r3, #30
 8004352:	2207      	movs	r2, #7
 8004354:	fa02 f303 	lsl.w	r3, r2, r3
 8004358:	43da      	mvns	r2, r3
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	400a      	ands	r2, r1
 8004360:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	68d9      	ldr	r1, [r3, #12]
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	689a      	ldr	r2, [r3, #8]
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	b29b      	uxth	r3, r3
 8004372:	4618      	mov	r0, r3
 8004374:	4603      	mov	r3, r0
 8004376:	005b      	lsls	r3, r3, #1
 8004378:	4403      	add	r3, r0
 800437a:	3b1e      	subs	r3, #30
 800437c:	409a      	lsls	r2, r3
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	430a      	orrs	r2, r1
 8004384:	60da      	str	r2, [r3, #12]
 8004386:	e022      	b.n	80043ce <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	6919      	ldr	r1, [r3, #16]
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	b29b      	uxth	r3, r3
 8004394:	461a      	mov	r2, r3
 8004396:	4613      	mov	r3, r2
 8004398:	005b      	lsls	r3, r3, #1
 800439a:	4413      	add	r3, r2
 800439c:	2207      	movs	r2, #7
 800439e:	fa02 f303 	lsl.w	r3, r2, r3
 80043a2:	43da      	mvns	r2, r3
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	400a      	ands	r2, r1
 80043aa:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	6919      	ldr	r1, [r3, #16]
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	689a      	ldr	r2, [r3, #8]
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	b29b      	uxth	r3, r3
 80043bc:	4618      	mov	r0, r3
 80043be:	4603      	mov	r3, r0
 80043c0:	005b      	lsls	r3, r3, #1
 80043c2:	4403      	add	r3, r0
 80043c4:	409a      	lsls	r2, r3
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	430a      	orrs	r2, r1
 80043cc:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	685b      	ldr	r3, [r3, #4]
 80043d2:	2b06      	cmp	r3, #6
 80043d4:	d824      	bhi.n	8004420 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	685a      	ldr	r2, [r3, #4]
 80043e0:	4613      	mov	r3, r2
 80043e2:	009b      	lsls	r3, r3, #2
 80043e4:	4413      	add	r3, r2
 80043e6:	3b05      	subs	r3, #5
 80043e8:	221f      	movs	r2, #31
 80043ea:	fa02 f303 	lsl.w	r3, r2, r3
 80043ee:	43da      	mvns	r2, r3
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	400a      	ands	r2, r1
 80043f6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	b29b      	uxth	r3, r3
 8004404:	4618      	mov	r0, r3
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	685a      	ldr	r2, [r3, #4]
 800440a:	4613      	mov	r3, r2
 800440c:	009b      	lsls	r3, r3, #2
 800440e:	4413      	add	r3, r2
 8004410:	3b05      	subs	r3, #5
 8004412:	fa00 f203 	lsl.w	r2, r0, r3
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	430a      	orrs	r2, r1
 800441c:	635a      	str	r2, [r3, #52]	; 0x34
 800441e:	e04c      	b.n	80044ba <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	685b      	ldr	r3, [r3, #4]
 8004424:	2b0c      	cmp	r3, #12
 8004426:	d824      	bhi.n	8004472 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	685a      	ldr	r2, [r3, #4]
 8004432:	4613      	mov	r3, r2
 8004434:	009b      	lsls	r3, r3, #2
 8004436:	4413      	add	r3, r2
 8004438:	3b23      	subs	r3, #35	; 0x23
 800443a:	221f      	movs	r2, #31
 800443c:	fa02 f303 	lsl.w	r3, r2, r3
 8004440:	43da      	mvns	r2, r3
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	400a      	ands	r2, r1
 8004448:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	b29b      	uxth	r3, r3
 8004456:	4618      	mov	r0, r3
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	685a      	ldr	r2, [r3, #4]
 800445c:	4613      	mov	r3, r2
 800445e:	009b      	lsls	r3, r3, #2
 8004460:	4413      	add	r3, r2
 8004462:	3b23      	subs	r3, #35	; 0x23
 8004464:	fa00 f203 	lsl.w	r2, r0, r3
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	430a      	orrs	r2, r1
 800446e:	631a      	str	r2, [r3, #48]	; 0x30
 8004470:	e023      	b.n	80044ba <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	685a      	ldr	r2, [r3, #4]
 800447c:	4613      	mov	r3, r2
 800447e:	009b      	lsls	r3, r3, #2
 8004480:	4413      	add	r3, r2
 8004482:	3b41      	subs	r3, #65	; 0x41
 8004484:	221f      	movs	r2, #31
 8004486:	fa02 f303 	lsl.w	r3, r2, r3
 800448a:	43da      	mvns	r2, r3
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	400a      	ands	r2, r1
 8004492:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	b29b      	uxth	r3, r3
 80044a0:	4618      	mov	r0, r3
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	685a      	ldr	r2, [r3, #4]
 80044a6:	4613      	mov	r3, r2
 80044a8:	009b      	lsls	r3, r3, #2
 80044aa:	4413      	add	r3, r2
 80044ac:	3b41      	subs	r3, #65	; 0x41
 80044ae:	fa00 f203 	lsl.w	r2, r0, r3
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	430a      	orrs	r2, r1
 80044b8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80044ba:	4b22      	ldr	r3, [pc, #136]	; (8004544 <HAL_ADC_ConfigChannel+0x234>)
 80044bc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a21      	ldr	r2, [pc, #132]	; (8004548 <HAL_ADC_ConfigChannel+0x238>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d109      	bne.n	80044dc <HAL_ADC_ConfigChannel+0x1cc>
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	2b12      	cmp	r3, #18
 80044ce:	d105      	bne.n	80044dc <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a19      	ldr	r2, [pc, #100]	; (8004548 <HAL_ADC_ConfigChannel+0x238>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d123      	bne.n	800452e <HAL_ADC_ConfigChannel+0x21e>
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	2b10      	cmp	r3, #16
 80044ec:	d003      	beq.n	80044f6 <HAL_ADC_ConfigChannel+0x1e6>
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	2b11      	cmp	r3, #17
 80044f4:	d11b      	bne.n	800452e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	2b10      	cmp	r3, #16
 8004508:	d111      	bne.n	800452e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800450a:	4b10      	ldr	r3, [pc, #64]	; (800454c <HAL_ADC_ConfigChannel+0x23c>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4a10      	ldr	r2, [pc, #64]	; (8004550 <HAL_ADC_ConfigChannel+0x240>)
 8004510:	fba2 2303 	umull	r2, r3, r2, r3
 8004514:	0c9a      	lsrs	r2, r3, #18
 8004516:	4613      	mov	r3, r2
 8004518:	009b      	lsls	r3, r3, #2
 800451a:	4413      	add	r3, r2
 800451c:	005b      	lsls	r3, r3, #1
 800451e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004520:	e002      	b.n	8004528 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8004522:	68bb      	ldr	r3, [r7, #8]
 8004524:	3b01      	subs	r3, #1
 8004526:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d1f9      	bne.n	8004522 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2200      	movs	r2, #0
 8004532:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004536:	2300      	movs	r3, #0
}
 8004538:	4618      	mov	r0, r3
 800453a:	3714      	adds	r7, #20
 800453c:	46bd      	mov	sp, r7
 800453e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004542:	4770      	bx	lr
 8004544:	40012300 	.word	0x40012300
 8004548:	40012000 	.word	0x40012000
 800454c:	20000018 	.word	0x20000018
 8004550:	431bde83 	.word	0x431bde83

08004554 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004554:	b480      	push	{r7}
 8004556:	b085      	sub	sp, #20
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800455c:	4b79      	ldr	r3, [pc, #484]	; (8004744 <ADC_Init+0x1f0>)
 800455e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	685a      	ldr	r2, [r3, #4]
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	685b      	ldr	r3, [r3, #4]
 8004574:	431a      	orrs	r2, r3
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	685a      	ldr	r2, [r3, #4]
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004588:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	6859      	ldr	r1, [r3, #4]
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	691b      	ldr	r3, [r3, #16]
 8004594:	021a      	lsls	r2, r3, #8
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	430a      	orrs	r2, r1
 800459c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	685a      	ldr	r2, [r3, #4]
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80045ac:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	6859      	ldr	r1, [r3, #4]
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	689a      	ldr	r2, [r3, #8]
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	430a      	orrs	r2, r1
 80045be:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	689a      	ldr	r2, [r3, #8]
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80045ce:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	6899      	ldr	r1, [r3, #8]
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	68da      	ldr	r2, [r3, #12]
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	430a      	orrs	r2, r1
 80045e0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045e6:	4a58      	ldr	r2, [pc, #352]	; (8004748 <ADC_Init+0x1f4>)
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d022      	beq.n	8004632 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	689a      	ldr	r2, [r3, #8]
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80045fa:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	6899      	ldr	r1, [r3, #8]
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	430a      	orrs	r2, r1
 800460c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	689a      	ldr	r2, [r3, #8]
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800461c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	6899      	ldr	r1, [r3, #8]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	430a      	orrs	r2, r1
 800462e:	609a      	str	r2, [r3, #8]
 8004630:	e00f      	b.n	8004652 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	689a      	ldr	r2, [r3, #8]
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004640:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	689a      	ldr	r2, [r3, #8]
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004650:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	689a      	ldr	r2, [r3, #8]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f022 0202 	bic.w	r2, r2, #2
 8004660:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	6899      	ldr	r1, [r3, #8]
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	7e1b      	ldrb	r3, [r3, #24]
 800466c:	005a      	lsls	r2, r3, #1
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	430a      	orrs	r2, r1
 8004674:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	f893 3020 	ldrb.w	r3, [r3, #32]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d01b      	beq.n	80046b8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	685a      	ldr	r2, [r3, #4]
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800468e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	685a      	ldr	r2, [r3, #4]
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800469e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	6859      	ldr	r1, [r3, #4]
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046aa:	3b01      	subs	r3, #1
 80046ac:	035a      	lsls	r2, r3, #13
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	430a      	orrs	r2, r1
 80046b4:	605a      	str	r2, [r3, #4]
 80046b6:	e007      	b.n	80046c8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	685a      	ldr	r2, [r3, #4]
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80046c6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80046d6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	69db      	ldr	r3, [r3, #28]
 80046e2:	3b01      	subs	r3, #1
 80046e4:	051a      	lsls	r2, r3, #20
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	430a      	orrs	r2, r1
 80046ec:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	689a      	ldr	r2, [r3, #8]
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80046fc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	6899      	ldr	r1, [r3, #8]
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800470a:	025a      	lsls	r2, r3, #9
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	430a      	orrs	r2, r1
 8004712:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	689a      	ldr	r2, [r3, #8]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004722:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	6899      	ldr	r1, [r3, #8]
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	695b      	ldr	r3, [r3, #20]
 800472e:	029a      	lsls	r2, r3, #10
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	430a      	orrs	r2, r1
 8004736:	609a      	str	r2, [r3, #8]
}
 8004738:	bf00      	nop
 800473a:	3714      	adds	r7, #20
 800473c:	46bd      	mov	sp, r7
 800473e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004742:	4770      	bx	lr
 8004744:	40012300 	.word	0x40012300
 8004748:	0f000001 	.word	0x0f000001

0800474c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b084      	sub	sp, #16
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004758:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800475e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004762:	2b00      	cmp	r3, #0
 8004764:	d13c      	bne.n	80047e0 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800476a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	689b      	ldr	r3, [r3, #8]
 8004778:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800477c:	2b00      	cmp	r3, #0
 800477e:	d12b      	bne.n	80047d8 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004784:	2b00      	cmp	r3, #0
 8004786:	d127      	bne.n	80047d8 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800478e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004792:	2b00      	cmp	r3, #0
 8004794:	d006      	beq.n	80047a4 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	689b      	ldr	r3, [r3, #8]
 800479c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d119      	bne.n	80047d8 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	685a      	ldr	r2, [r3, #4]
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f022 0220 	bic.w	r2, r2, #32
 80047b2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047b8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d105      	bne.n	80047d8 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047d0:	f043 0201 	orr.w	r2, r3, #1
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80047d8:	68f8      	ldr	r0, [r7, #12]
 80047da:	f7fc fe9d 	bl	8001518 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80047de:	e00e      	b.n	80047fe <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047e4:	f003 0310 	and.w	r3, r3, #16
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d003      	beq.n	80047f4 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80047ec:	68f8      	ldr	r0, [r7, #12]
 80047ee:	f7ff fd85 	bl	80042fc <HAL_ADC_ErrorCallback>
}
 80047f2:	e004      	b.n	80047fe <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047fa:	6878      	ldr	r0, [r7, #4]
 80047fc:	4798      	blx	r3
}
 80047fe:	bf00      	nop
 8004800:	3710      	adds	r7, #16
 8004802:	46bd      	mov	sp, r7
 8004804:	bd80      	pop	{r7, pc}

08004806 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004806:	b580      	push	{r7, lr}
 8004808:	b084      	sub	sp, #16
 800480a:	af00      	add	r7, sp, #0
 800480c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004812:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004814:	68f8      	ldr	r0, [r7, #12]
 8004816:	f7ff fd67 	bl	80042e8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800481a:	bf00      	nop
 800481c:	3710      	adds	r7, #16
 800481e:	46bd      	mov	sp, r7
 8004820:	bd80      	pop	{r7, pc}

08004822 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8004822:	b580      	push	{r7, lr}
 8004824:	b084      	sub	sp, #16
 8004826:	af00      	add	r7, sp, #0
 8004828:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800482e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	2240      	movs	r2, #64	; 0x40
 8004834:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800483a:	f043 0204 	orr.w	r2, r3, #4
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004842:	68f8      	ldr	r0, [r7, #12]
 8004844:	f7ff fd5a 	bl	80042fc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004848:	bf00      	nop
 800484a:	3710      	adds	r7, #16
 800484c:	46bd      	mov	sp, r7
 800484e:	bd80      	pop	{r7, pc}

08004850 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004850:	b480      	push	{r7}
 8004852:	b085      	sub	sp, #20
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	f003 0307 	and.w	r3, r3, #7
 800485e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004860:	4b0c      	ldr	r3, [pc, #48]	; (8004894 <__NVIC_SetPriorityGrouping+0x44>)
 8004862:	68db      	ldr	r3, [r3, #12]
 8004864:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004866:	68ba      	ldr	r2, [r7, #8]
 8004868:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800486c:	4013      	ands	r3, r2
 800486e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004874:	68bb      	ldr	r3, [r7, #8]
 8004876:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004878:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800487c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004880:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004882:	4a04      	ldr	r2, [pc, #16]	; (8004894 <__NVIC_SetPriorityGrouping+0x44>)
 8004884:	68bb      	ldr	r3, [r7, #8]
 8004886:	60d3      	str	r3, [r2, #12]
}
 8004888:	bf00      	nop
 800488a:	3714      	adds	r7, #20
 800488c:	46bd      	mov	sp, r7
 800488e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004892:	4770      	bx	lr
 8004894:	e000ed00 	.word	0xe000ed00

08004898 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004898:	b480      	push	{r7}
 800489a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800489c:	4b04      	ldr	r3, [pc, #16]	; (80048b0 <__NVIC_GetPriorityGrouping+0x18>)
 800489e:	68db      	ldr	r3, [r3, #12]
 80048a0:	0a1b      	lsrs	r3, r3, #8
 80048a2:	f003 0307 	and.w	r3, r3, #7
}
 80048a6:	4618      	mov	r0, r3
 80048a8:	46bd      	mov	sp, r7
 80048aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ae:	4770      	bx	lr
 80048b0:	e000ed00 	.word	0xe000ed00

080048b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80048b4:	b480      	push	{r7}
 80048b6:	b083      	sub	sp, #12
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	4603      	mov	r3, r0
 80048bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80048be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	db0b      	blt.n	80048de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80048c6:	79fb      	ldrb	r3, [r7, #7]
 80048c8:	f003 021f 	and.w	r2, r3, #31
 80048cc:	4907      	ldr	r1, [pc, #28]	; (80048ec <__NVIC_EnableIRQ+0x38>)
 80048ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048d2:	095b      	lsrs	r3, r3, #5
 80048d4:	2001      	movs	r0, #1
 80048d6:	fa00 f202 	lsl.w	r2, r0, r2
 80048da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80048de:	bf00      	nop
 80048e0:	370c      	adds	r7, #12
 80048e2:	46bd      	mov	sp, r7
 80048e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e8:	4770      	bx	lr
 80048ea:	bf00      	nop
 80048ec:	e000e100 	.word	0xe000e100

080048f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80048f0:	b480      	push	{r7}
 80048f2:	b083      	sub	sp, #12
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	4603      	mov	r3, r0
 80048f8:	6039      	str	r1, [r7, #0]
 80048fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80048fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004900:	2b00      	cmp	r3, #0
 8004902:	db0a      	blt.n	800491a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	b2da      	uxtb	r2, r3
 8004908:	490c      	ldr	r1, [pc, #48]	; (800493c <__NVIC_SetPriority+0x4c>)
 800490a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800490e:	0112      	lsls	r2, r2, #4
 8004910:	b2d2      	uxtb	r2, r2
 8004912:	440b      	add	r3, r1
 8004914:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004918:	e00a      	b.n	8004930 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	b2da      	uxtb	r2, r3
 800491e:	4908      	ldr	r1, [pc, #32]	; (8004940 <__NVIC_SetPriority+0x50>)
 8004920:	79fb      	ldrb	r3, [r7, #7]
 8004922:	f003 030f 	and.w	r3, r3, #15
 8004926:	3b04      	subs	r3, #4
 8004928:	0112      	lsls	r2, r2, #4
 800492a:	b2d2      	uxtb	r2, r2
 800492c:	440b      	add	r3, r1
 800492e:	761a      	strb	r2, [r3, #24]
}
 8004930:	bf00      	nop
 8004932:	370c      	adds	r7, #12
 8004934:	46bd      	mov	sp, r7
 8004936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493a:	4770      	bx	lr
 800493c:	e000e100 	.word	0xe000e100
 8004940:	e000ed00 	.word	0xe000ed00

08004944 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004944:	b480      	push	{r7}
 8004946:	b089      	sub	sp, #36	; 0x24
 8004948:	af00      	add	r7, sp, #0
 800494a:	60f8      	str	r0, [r7, #12]
 800494c:	60b9      	str	r1, [r7, #8]
 800494e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	f003 0307 	and.w	r3, r3, #7
 8004956:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004958:	69fb      	ldr	r3, [r7, #28]
 800495a:	f1c3 0307 	rsb	r3, r3, #7
 800495e:	2b04      	cmp	r3, #4
 8004960:	bf28      	it	cs
 8004962:	2304      	movcs	r3, #4
 8004964:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004966:	69fb      	ldr	r3, [r7, #28]
 8004968:	3304      	adds	r3, #4
 800496a:	2b06      	cmp	r3, #6
 800496c:	d902      	bls.n	8004974 <NVIC_EncodePriority+0x30>
 800496e:	69fb      	ldr	r3, [r7, #28]
 8004970:	3b03      	subs	r3, #3
 8004972:	e000      	b.n	8004976 <NVIC_EncodePriority+0x32>
 8004974:	2300      	movs	r3, #0
 8004976:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004978:	f04f 32ff 	mov.w	r2, #4294967295
 800497c:	69bb      	ldr	r3, [r7, #24]
 800497e:	fa02 f303 	lsl.w	r3, r2, r3
 8004982:	43da      	mvns	r2, r3
 8004984:	68bb      	ldr	r3, [r7, #8]
 8004986:	401a      	ands	r2, r3
 8004988:	697b      	ldr	r3, [r7, #20]
 800498a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800498c:	f04f 31ff 	mov.w	r1, #4294967295
 8004990:	697b      	ldr	r3, [r7, #20]
 8004992:	fa01 f303 	lsl.w	r3, r1, r3
 8004996:	43d9      	mvns	r1, r3
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800499c:	4313      	orrs	r3, r2
         );
}
 800499e:	4618      	mov	r0, r3
 80049a0:	3724      	adds	r7, #36	; 0x24
 80049a2:	46bd      	mov	sp, r7
 80049a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a8:	4770      	bx	lr
	...

080049ac <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80049ac:	b480      	push	{r7}
 80049ae:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80049b0:	f3bf 8f4f 	dsb	sy
}
 80049b4:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80049b6:	4b06      	ldr	r3, [pc, #24]	; (80049d0 <__NVIC_SystemReset+0x24>)
 80049b8:	68db      	ldr	r3, [r3, #12]
 80049ba:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80049be:	4904      	ldr	r1, [pc, #16]	; (80049d0 <__NVIC_SystemReset+0x24>)
 80049c0:	4b04      	ldr	r3, [pc, #16]	; (80049d4 <__NVIC_SystemReset+0x28>)
 80049c2:	4313      	orrs	r3, r2
 80049c4:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80049c6:	f3bf 8f4f 	dsb	sy
}
 80049ca:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80049cc:	bf00      	nop
 80049ce:	e7fd      	b.n	80049cc <__NVIC_SystemReset+0x20>
 80049d0:	e000ed00 	.word	0xe000ed00
 80049d4:	05fa0004 	.word	0x05fa0004

080049d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b082      	sub	sp, #8
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80049e0:	6878      	ldr	r0, [r7, #4]
 80049e2:	f7ff ff35 	bl	8004850 <__NVIC_SetPriorityGrouping>
}
 80049e6:	bf00      	nop
 80049e8:	3708      	adds	r7, #8
 80049ea:	46bd      	mov	sp, r7
 80049ec:	bd80      	pop	{r7, pc}

080049ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80049ee:	b580      	push	{r7, lr}
 80049f0:	b086      	sub	sp, #24
 80049f2:	af00      	add	r7, sp, #0
 80049f4:	4603      	mov	r3, r0
 80049f6:	60b9      	str	r1, [r7, #8]
 80049f8:	607a      	str	r2, [r7, #4]
 80049fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80049fc:	2300      	movs	r3, #0
 80049fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004a00:	f7ff ff4a 	bl	8004898 <__NVIC_GetPriorityGrouping>
 8004a04:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004a06:	687a      	ldr	r2, [r7, #4]
 8004a08:	68b9      	ldr	r1, [r7, #8]
 8004a0a:	6978      	ldr	r0, [r7, #20]
 8004a0c:	f7ff ff9a 	bl	8004944 <NVIC_EncodePriority>
 8004a10:	4602      	mov	r2, r0
 8004a12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a16:	4611      	mov	r1, r2
 8004a18:	4618      	mov	r0, r3
 8004a1a:	f7ff ff69 	bl	80048f0 <__NVIC_SetPriority>
}
 8004a1e:	bf00      	nop
 8004a20:	3718      	adds	r7, #24
 8004a22:	46bd      	mov	sp, r7
 8004a24:	bd80      	pop	{r7, pc}

08004a26 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004a26:	b580      	push	{r7, lr}
 8004a28:	b082      	sub	sp, #8
 8004a2a:	af00      	add	r7, sp, #0
 8004a2c:	4603      	mov	r3, r0
 8004a2e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004a30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a34:	4618      	mov	r0, r3
 8004a36:	f7ff ff3d 	bl	80048b4 <__NVIC_EnableIRQ>
}
 8004a3a:	bf00      	nop
 8004a3c:	3708      	adds	r7, #8
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	bd80      	pop	{r7, pc}

08004a42 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8004a42:	b580      	push	{r7, lr}
 8004a44:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8004a46:	f7ff ffb1 	bl	80049ac <__NVIC_SystemReset>
	...

08004a4c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b086      	sub	sp, #24
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004a54:	2300      	movs	r3, #0
 8004a56:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004a58:	f7ff fac2 	bl	8003fe0 <HAL_GetTick>
 8004a5c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d101      	bne.n	8004a68 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004a64:	2301      	movs	r3, #1
 8004a66:	e099      	b.n	8004b9c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2202      	movs	r2, #2
 8004a6c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2200      	movs	r2, #0
 8004a74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	681a      	ldr	r2, [r3, #0]
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f022 0201 	bic.w	r2, r2, #1
 8004a86:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004a88:	e00f      	b.n	8004aaa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004a8a:	f7ff faa9 	bl	8003fe0 <HAL_GetTick>
 8004a8e:	4602      	mov	r2, r0
 8004a90:	693b      	ldr	r3, [r7, #16]
 8004a92:	1ad3      	subs	r3, r2, r3
 8004a94:	2b05      	cmp	r3, #5
 8004a96:	d908      	bls.n	8004aaa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2220      	movs	r2, #32
 8004a9c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2203      	movs	r2, #3
 8004aa2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004aa6:	2303      	movs	r3, #3
 8004aa8:	e078      	b.n	8004b9c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f003 0301 	and.w	r3, r3, #1
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d1e8      	bne.n	8004a8a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004ac0:	697a      	ldr	r2, [r7, #20]
 8004ac2:	4b38      	ldr	r3, [pc, #224]	; (8004ba4 <HAL_DMA_Init+0x158>)
 8004ac4:	4013      	ands	r3, r2
 8004ac6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	685a      	ldr	r2, [r3, #4]
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	689b      	ldr	r3, [r3, #8]
 8004ad0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004ad6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	691b      	ldr	r3, [r3, #16]
 8004adc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004ae2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	699b      	ldr	r3, [r3, #24]
 8004ae8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004aee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6a1b      	ldr	r3, [r3, #32]
 8004af4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004af6:	697a      	ldr	r2, [r7, #20]
 8004af8:	4313      	orrs	r3, r2
 8004afa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b00:	2b04      	cmp	r3, #4
 8004b02:	d107      	bne.n	8004b14 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b0c:	4313      	orrs	r3, r2
 8004b0e:	697a      	ldr	r2, [r7, #20]
 8004b10:	4313      	orrs	r3, r2
 8004b12:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	697a      	ldr	r2, [r7, #20]
 8004b1a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	695b      	ldr	r3, [r3, #20]
 8004b22:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004b24:	697b      	ldr	r3, [r7, #20]
 8004b26:	f023 0307 	bic.w	r3, r3, #7
 8004b2a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b30:	697a      	ldr	r2, [r7, #20]
 8004b32:	4313      	orrs	r3, r2
 8004b34:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b3a:	2b04      	cmp	r3, #4
 8004b3c:	d117      	bne.n	8004b6e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b42:	697a      	ldr	r2, [r7, #20]
 8004b44:	4313      	orrs	r3, r2
 8004b46:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d00e      	beq.n	8004b6e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004b50:	6878      	ldr	r0, [r7, #4]
 8004b52:	f000 fb01 	bl	8005158 <DMA_CheckFifoParam>
 8004b56:	4603      	mov	r3, r0
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d008      	beq.n	8004b6e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2240      	movs	r2, #64	; 0x40
 8004b60:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2201      	movs	r2, #1
 8004b66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	e016      	b.n	8004b9c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	697a      	ldr	r2, [r7, #20]
 8004b74:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004b76:	6878      	ldr	r0, [r7, #4]
 8004b78:	f000 fab8 	bl	80050ec <DMA_CalcBaseAndBitshift>
 8004b7c:	4603      	mov	r3, r0
 8004b7e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b84:	223f      	movs	r2, #63	; 0x3f
 8004b86:	409a      	lsls	r2, r3
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2200      	movs	r2, #0
 8004b90:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2201      	movs	r2, #1
 8004b96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004b9a:	2300      	movs	r3, #0
}
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	3718      	adds	r7, #24
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	bd80      	pop	{r7, pc}
 8004ba4:	f010803f 	.word	0xf010803f

08004ba8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b086      	sub	sp, #24
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	60f8      	str	r0, [r7, #12]
 8004bb0:	60b9      	str	r1, [r7, #8]
 8004bb2:	607a      	str	r2, [r7, #4]
 8004bb4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bbe:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004bc6:	2b01      	cmp	r3, #1
 8004bc8:	d101      	bne.n	8004bce <HAL_DMA_Start_IT+0x26>
 8004bca:	2302      	movs	r3, #2
 8004bcc:	e040      	b.n	8004c50 <HAL_DMA_Start_IT+0xa8>
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	2201      	movs	r2, #1
 8004bd2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004bdc:	b2db      	uxtb	r3, r3
 8004bde:	2b01      	cmp	r3, #1
 8004be0:	d12f      	bne.n	8004c42 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	2202      	movs	r2, #2
 8004be6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	2200      	movs	r2, #0
 8004bee:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	687a      	ldr	r2, [r7, #4]
 8004bf4:	68b9      	ldr	r1, [r7, #8]
 8004bf6:	68f8      	ldr	r0, [r7, #12]
 8004bf8:	f000 fa4a 	bl	8005090 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c00:	223f      	movs	r2, #63	; 0x3f
 8004c02:	409a      	lsls	r2, r3
 8004c04:	693b      	ldr	r3, [r7, #16]
 8004c06:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	681a      	ldr	r2, [r3, #0]
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f042 0216 	orr.w	r2, r2, #22
 8004c16:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d007      	beq.n	8004c30 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	681a      	ldr	r2, [r3, #0]
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f042 0208 	orr.w	r2, r2, #8
 8004c2e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	681a      	ldr	r2, [r3, #0]
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f042 0201 	orr.w	r2, r2, #1
 8004c3e:	601a      	str	r2, [r3, #0]
 8004c40:	e005      	b.n	8004c4e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	2200      	movs	r2, #0
 8004c46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004c4a:	2302      	movs	r3, #2
 8004c4c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004c4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c50:	4618      	mov	r0, r3
 8004c52:	3718      	adds	r7, #24
 8004c54:	46bd      	mov	sp, r7
 8004c56:	bd80      	pop	{r7, pc}

08004c58 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b084      	sub	sp, #16
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c64:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004c66:	f7ff f9bb 	bl	8003fe0 <HAL_GetTick>
 8004c6a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004c72:	b2db      	uxtb	r3, r3
 8004c74:	2b02      	cmp	r3, #2
 8004c76:	d008      	beq.n	8004c8a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2280      	movs	r2, #128	; 0x80
 8004c7c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2200      	movs	r2, #0
 8004c82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004c86:	2301      	movs	r3, #1
 8004c88:	e052      	b.n	8004d30 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	681a      	ldr	r2, [r3, #0]
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f022 0216 	bic.w	r2, r2, #22
 8004c98:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	695a      	ldr	r2, [r3, #20]
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004ca8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d103      	bne.n	8004cba <HAL_DMA_Abort+0x62>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d007      	beq.n	8004cca <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	681a      	ldr	r2, [r3, #0]
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f022 0208 	bic.w	r2, r2, #8
 8004cc8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	681a      	ldr	r2, [r3, #0]
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f022 0201 	bic.w	r2, r2, #1
 8004cd8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004cda:	e013      	b.n	8004d04 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004cdc:	f7ff f980 	bl	8003fe0 <HAL_GetTick>
 8004ce0:	4602      	mov	r2, r0
 8004ce2:	68bb      	ldr	r3, [r7, #8]
 8004ce4:	1ad3      	subs	r3, r2, r3
 8004ce6:	2b05      	cmp	r3, #5
 8004ce8:	d90c      	bls.n	8004d04 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2220      	movs	r2, #32
 8004cee:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2203      	movs	r2, #3
 8004cf4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8004d00:	2303      	movs	r3, #3
 8004d02:	e015      	b.n	8004d30 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f003 0301 	and.w	r3, r3, #1
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d1e4      	bne.n	8004cdc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d16:	223f      	movs	r2, #63	; 0x3f
 8004d18:	409a      	lsls	r2, r3
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2201      	movs	r2, #1
 8004d22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2200      	movs	r2, #0
 8004d2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8004d2e:	2300      	movs	r3, #0
}
 8004d30:	4618      	mov	r0, r3
 8004d32:	3710      	adds	r7, #16
 8004d34:	46bd      	mov	sp, r7
 8004d36:	bd80      	pop	{r7, pc}

08004d38 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004d38:	b480      	push	{r7}
 8004d3a:	b083      	sub	sp, #12
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004d46:	b2db      	uxtb	r3, r3
 8004d48:	2b02      	cmp	r3, #2
 8004d4a:	d004      	beq.n	8004d56 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2280      	movs	r2, #128	; 0x80
 8004d50:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004d52:	2301      	movs	r3, #1
 8004d54:	e00c      	b.n	8004d70 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2205      	movs	r2, #5
 8004d5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	681a      	ldr	r2, [r3, #0]
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f022 0201 	bic.w	r2, r2, #1
 8004d6c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004d6e:	2300      	movs	r3, #0
}
 8004d70:	4618      	mov	r0, r3
 8004d72:	370c      	adds	r7, #12
 8004d74:	46bd      	mov	sp, r7
 8004d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7a:	4770      	bx	lr

08004d7c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b086      	sub	sp, #24
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004d84:	2300      	movs	r3, #0
 8004d86:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004d88:	4b8e      	ldr	r3, [pc, #568]	; (8004fc4 <HAL_DMA_IRQHandler+0x248>)
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	4a8e      	ldr	r2, [pc, #568]	; (8004fc8 <HAL_DMA_IRQHandler+0x24c>)
 8004d8e:	fba2 2303 	umull	r2, r3, r2, r3
 8004d92:	0a9b      	lsrs	r3, r3, #10
 8004d94:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d9a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004d9c:	693b      	ldr	r3, [r7, #16]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004da6:	2208      	movs	r2, #8
 8004da8:	409a      	lsls	r2, r3
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	4013      	ands	r3, r2
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d01a      	beq.n	8004de8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f003 0304 	and.w	r3, r3, #4
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d013      	beq.n	8004de8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	681a      	ldr	r2, [r3, #0]
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f022 0204 	bic.w	r2, r2, #4
 8004dce:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004dd4:	2208      	movs	r2, #8
 8004dd6:	409a      	lsls	r2, r3
 8004dd8:	693b      	ldr	r3, [r7, #16]
 8004dda:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004de0:	f043 0201 	orr.w	r2, r3, #1
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004dec:	2201      	movs	r2, #1
 8004dee:	409a      	lsls	r2, r3
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	4013      	ands	r3, r2
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d012      	beq.n	8004e1e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	695b      	ldr	r3, [r3, #20]
 8004dfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d00b      	beq.n	8004e1e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e0a:	2201      	movs	r2, #1
 8004e0c:	409a      	lsls	r2, r3
 8004e0e:	693b      	ldr	r3, [r7, #16]
 8004e10:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e16:	f043 0202 	orr.w	r2, r3, #2
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e22:	2204      	movs	r2, #4
 8004e24:	409a      	lsls	r2, r3
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	4013      	ands	r3, r2
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d012      	beq.n	8004e54 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f003 0302 	and.w	r3, r3, #2
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d00b      	beq.n	8004e54 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e40:	2204      	movs	r2, #4
 8004e42:	409a      	lsls	r2, r3
 8004e44:	693b      	ldr	r3, [r7, #16]
 8004e46:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e4c:	f043 0204 	orr.w	r2, r3, #4
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e58:	2210      	movs	r2, #16
 8004e5a:	409a      	lsls	r2, r3
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	4013      	ands	r3, r2
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d043      	beq.n	8004eec <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f003 0308 	and.w	r3, r3, #8
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d03c      	beq.n	8004eec <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e76:	2210      	movs	r2, #16
 8004e78:	409a      	lsls	r2, r3
 8004e7a:	693b      	ldr	r3, [r7, #16]
 8004e7c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d018      	beq.n	8004ebe <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d108      	bne.n	8004eac <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d024      	beq.n	8004eec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ea6:	6878      	ldr	r0, [r7, #4]
 8004ea8:	4798      	blx	r3
 8004eaa:	e01f      	b.n	8004eec <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d01b      	beq.n	8004eec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004eb8:	6878      	ldr	r0, [r7, #4]
 8004eba:	4798      	blx	r3
 8004ebc:	e016      	b.n	8004eec <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d107      	bne.n	8004edc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	681a      	ldr	r2, [r3, #0]
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f022 0208 	bic.w	r2, r2, #8
 8004eda:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d003      	beq.n	8004eec <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ee8:	6878      	ldr	r0, [r7, #4]
 8004eea:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ef0:	2220      	movs	r2, #32
 8004ef2:	409a      	lsls	r2, r3
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	4013      	ands	r3, r2
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	f000 808f 	beq.w	800501c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f003 0310 	and.w	r3, r3, #16
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	f000 8087 	beq.w	800501c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f12:	2220      	movs	r2, #32
 8004f14:	409a      	lsls	r2, r3
 8004f16:	693b      	ldr	r3, [r7, #16]
 8004f18:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004f20:	b2db      	uxtb	r3, r3
 8004f22:	2b05      	cmp	r3, #5
 8004f24:	d136      	bne.n	8004f94 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	681a      	ldr	r2, [r3, #0]
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f022 0216 	bic.w	r2, r2, #22
 8004f34:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	695a      	ldr	r2, [r3, #20]
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004f44:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d103      	bne.n	8004f56 <HAL_DMA_IRQHandler+0x1da>
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d007      	beq.n	8004f66 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	681a      	ldr	r2, [r3, #0]
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f022 0208 	bic.w	r2, r2, #8
 8004f64:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f6a:	223f      	movs	r2, #63	; 0x3f
 8004f6c:	409a      	lsls	r2, r3
 8004f6e:	693b      	ldr	r3, [r7, #16]
 8004f70:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2201      	movs	r2, #1
 8004f76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d07e      	beq.n	8005088 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f8e:	6878      	ldr	r0, [r7, #4]
 8004f90:	4798      	blx	r3
        }
        return;
 8004f92:	e079      	b.n	8005088 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d01d      	beq.n	8004fde <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d10d      	bne.n	8004fcc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d031      	beq.n	800501c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fbc:	6878      	ldr	r0, [r7, #4]
 8004fbe:	4798      	blx	r3
 8004fc0:	e02c      	b.n	800501c <HAL_DMA_IRQHandler+0x2a0>
 8004fc2:	bf00      	nop
 8004fc4:	20000018 	.word	0x20000018
 8004fc8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d023      	beq.n	800501c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fd8:	6878      	ldr	r0, [r7, #4]
 8004fda:	4798      	blx	r3
 8004fdc:	e01e      	b.n	800501c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d10f      	bne.n	800500c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	681a      	ldr	r2, [r3, #0]
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f022 0210 	bic.w	r2, r2, #16
 8004ffa:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2201      	movs	r2, #1
 8005000:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2200      	movs	r2, #0
 8005008:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005010:	2b00      	cmp	r3, #0
 8005012:	d003      	beq.n	800501c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005018:	6878      	ldr	r0, [r7, #4]
 800501a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005020:	2b00      	cmp	r3, #0
 8005022:	d032      	beq.n	800508a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005028:	f003 0301 	and.w	r3, r3, #1
 800502c:	2b00      	cmp	r3, #0
 800502e:	d022      	beq.n	8005076 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2205      	movs	r2, #5
 8005034:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	681a      	ldr	r2, [r3, #0]
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f022 0201 	bic.w	r2, r2, #1
 8005046:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005048:	68bb      	ldr	r3, [r7, #8]
 800504a:	3301      	adds	r3, #1
 800504c:	60bb      	str	r3, [r7, #8]
 800504e:	697a      	ldr	r2, [r7, #20]
 8005050:	429a      	cmp	r2, r3
 8005052:	d307      	bcc.n	8005064 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f003 0301 	and.w	r3, r3, #1
 800505e:	2b00      	cmp	r3, #0
 8005060:	d1f2      	bne.n	8005048 <HAL_DMA_IRQHandler+0x2cc>
 8005062:	e000      	b.n	8005066 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005064:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2201      	movs	r2, #1
 800506a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2200      	movs	r2, #0
 8005072:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800507a:	2b00      	cmp	r3, #0
 800507c:	d005      	beq.n	800508a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005082:	6878      	ldr	r0, [r7, #4]
 8005084:	4798      	blx	r3
 8005086:	e000      	b.n	800508a <HAL_DMA_IRQHandler+0x30e>
        return;
 8005088:	bf00      	nop
    }
  }
}
 800508a:	3718      	adds	r7, #24
 800508c:	46bd      	mov	sp, r7
 800508e:	bd80      	pop	{r7, pc}

08005090 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005090:	b480      	push	{r7}
 8005092:	b085      	sub	sp, #20
 8005094:	af00      	add	r7, sp, #0
 8005096:	60f8      	str	r0, [r7, #12]
 8005098:	60b9      	str	r1, [r7, #8]
 800509a:	607a      	str	r2, [r7, #4]
 800509c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	681a      	ldr	r2, [r3, #0]
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80050ac:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	683a      	ldr	r2, [r7, #0]
 80050b4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	689b      	ldr	r3, [r3, #8]
 80050ba:	2b40      	cmp	r3, #64	; 0x40
 80050bc:	d108      	bne.n	80050d0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	687a      	ldr	r2, [r7, #4]
 80050c4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	68ba      	ldr	r2, [r7, #8]
 80050cc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80050ce:	e007      	b.n	80050e0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	68ba      	ldr	r2, [r7, #8]
 80050d6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	687a      	ldr	r2, [r7, #4]
 80050de:	60da      	str	r2, [r3, #12]
}
 80050e0:	bf00      	nop
 80050e2:	3714      	adds	r7, #20
 80050e4:	46bd      	mov	sp, r7
 80050e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ea:	4770      	bx	lr

080050ec <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80050ec:	b480      	push	{r7}
 80050ee:	b085      	sub	sp, #20
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	b2db      	uxtb	r3, r3
 80050fa:	3b10      	subs	r3, #16
 80050fc:	4a14      	ldr	r2, [pc, #80]	; (8005150 <DMA_CalcBaseAndBitshift+0x64>)
 80050fe:	fba2 2303 	umull	r2, r3, r2, r3
 8005102:	091b      	lsrs	r3, r3, #4
 8005104:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005106:	4a13      	ldr	r2, [pc, #76]	; (8005154 <DMA_CalcBaseAndBitshift+0x68>)
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	4413      	add	r3, r2
 800510c:	781b      	ldrb	r3, [r3, #0]
 800510e:	461a      	mov	r2, r3
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	2b03      	cmp	r3, #3
 8005118:	d909      	bls.n	800512e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005122:	f023 0303 	bic.w	r3, r3, #3
 8005126:	1d1a      	adds	r2, r3, #4
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	659a      	str	r2, [r3, #88]	; 0x58
 800512c:	e007      	b.n	800513e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005136:	f023 0303 	bic.w	r3, r3, #3
 800513a:	687a      	ldr	r2, [r7, #4]
 800513c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005142:	4618      	mov	r0, r3
 8005144:	3714      	adds	r7, #20
 8005146:	46bd      	mov	sp, r7
 8005148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514c:	4770      	bx	lr
 800514e:	bf00      	nop
 8005150:	aaaaaaab 	.word	0xaaaaaaab
 8005154:	08013b58 	.word	0x08013b58

08005158 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005158:	b480      	push	{r7}
 800515a:	b085      	sub	sp, #20
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005160:	2300      	movs	r3, #0
 8005162:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005168:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	699b      	ldr	r3, [r3, #24]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d11f      	bne.n	80051b2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005172:	68bb      	ldr	r3, [r7, #8]
 8005174:	2b03      	cmp	r3, #3
 8005176:	d856      	bhi.n	8005226 <DMA_CheckFifoParam+0xce>
 8005178:	a201      	add	r2, pc, #4	; (adr r2, 8005180 <DMA_CheckFifoParam+0x28>)
 800517a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800517e:	bf00      	nop
 8005180:	08005191 	.word	0x08005191
 8005184:	080051a3 	.word	0x080051a3
 8005188:	08005191 	.word	0x08005191
 800518c:	08005227 	.word	0x08005227
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005194:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005198:	2b00      	cmp	r3, #0
 800519a:	d046      	beq.n	800522a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800519c:	2301      	movs	r3, #1
 800519e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80051a0:	e043      	b.n	800522a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051a6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80051aa:	d140      	bne.n	800522e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80051ac:	2301      	movs	r3, #1
 80051ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80051b0:	e03d      	b.n	800522e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	699b      	ldr	r3, [r3, #24]
 80051b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80051ba:	d121      	bne.n	8005200 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80051bc:	68bb      	ldr	r3, [r7, #8]
 80051be:	2b03      	cmp	r3, #3
 80051c0:	d837      	bhi.n	8005232 <DMA_CheckFifoParam+0xda>
 80051c2:	a201      	add	r2, pc, #4	; (adr r2, 80051c8 <DMA_CheckFifoParam+0x70>)
 80051c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051c8:	080051d9 	.word	0x080051d9
 80051cc:	080051df 	.word	0x080051df
 80051d0:	080051d9 	.word	0x080051d9
 80051d4:	080051f1 	.word	0x080051f1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80051d8:	2301      	movs	r3, #1
 80051da:	73fb      	strb	r3, [r7, #15]
      break;
 80051dc:	e030      	b.n	8005240 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051e2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d025      	beq.n	8005236 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80051ea:	2301      	movs	r3, #1
 80051ec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80051ee:	e022      	b.n	8005236 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051f4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80051f8:	d11f      	bne.n	800523a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80051fa:	2301      	movs	r3, #1
 80051fc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80051fe:	e01c      	b.n	800523a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005200:	68bb      	ldr	r3, [r7, #8]
 8005202:	2b02      	cmp	r3, #2
 8005204:	d903      	bls.n	800520e <DMA_CheckFifoParam+0xb6>
 8005206:	68bb      	ldr	r3, [r7, #8]
 8005208:	2b03      	cmp	r3, #3
 800520a:	d003      	beq.n	8005214 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800520c:	e018      	b.n	8005240 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800520e:	2301      	movs	r3, #1
 8005210:	73fb      	strb	r3, [r7, #15]
      break;
 8005212:	e015      	b.n	8005240 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005218:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800521c:	2b00      	cmp	r3, #0
 800521e:	d00e      	beq.n	800523e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005220:	2301      	movs	r3, #1
 8005222:	73fb      	strb	r3, [r7, #15]
      break;
 8005224:	e00b      	b.n	800523e <DMA_CheckFifoParam+0xe6>
      break;
 8005226:	bf00      	nop
 8005228:	e00a      	b.n	8005240 <DMA_CheckFifoParam+0xe8>
      break;
 800522a:	bf00      	nop
 800522c:	e008      	b.n	8005240 <DMA_CheckFifoParam+0xe8>
      break;
 800522e:	bf00      	nop
 8005230:	e006      	b.n	8005240 <DMA_CheckFifoParam+0xe8>
      break;
 8005232:	bf00      	nop
 8005234:	e004      	b.n	8005240 <DMA_CheckFifoParam+0xe8>
      break;
 8005236:	bf00      	nop
 8005238:	e002      	b.n	8005240 <DMA_CheckFifoParam+0xe8>
      break;   
 800523a:	bf00      	nop
 800523c:	e000      	b.n	8005240 <DMA_CheckFifoParam+0xe8>
      break;
 800523e:	bf00      	nop
    }
  } 
  
  return status; 
 8005240:	7bfb      	ldrb	r3, [r7, #15]
}
 8005242:	4618      	mov	r0, r3
 8005244:	3714      	adds	r7, #20
 8005246:	46bd      	mov	sp, r7
 8005248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524c:	4770      	bx	lr
 800524e:	bf00      	nop

08005250 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005250:	b480      	push	{r7}
 8005252:	b089      	sub	sp, #36	; 0x24
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
 8005258:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800525a:	2300      	movs	r3, #0
 800525c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800525e:	2300      	movs	r3, #0
 8005260:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005262:	2300      	movs	r3, #0
 8005264:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005266:	2300      	movs	r3, #0
 8005268:	61fb      	str	r3, [r7, #28]
 800526a:	e16b      	b.n	8005544 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800526c:	2201      	movs	r2, #1
 800526e:	69fb      	ldr	r3, [r7, #28]
 8005270:	fa02 f303 	lsl.w	r3, r2, r3
 8005274:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	697a      	ldr	r2, [r7, #20]
 800527c:	4013      	ands	r3, r2
 800527e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005280:	693a      	ldr	r2, [r7, #16]
 8005282:	697b      	ldr	r3, [r7, #20]
 8005284:	429a      	cmp	r2, r3
 8005286:	f040 815a 	bne.w	800553e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	685b      	ldr	r3, [r3, #4]
 800528e:	f003 0303 	and.w	r3, r3, #3
 8005292:	2b01      	cmp	r3, #1
 8005294:	d005      	beq.n	80052a2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	685b      	ldr	r3, [r3, #4]
 800529a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800529e:	2b02      	cmp	r3, #2
 80052a0:	d130      	bne.n	8005304 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	689b      	ldr	r3, [r3, #8]
 80052a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80052a8:	69fb      	ldr	r3, [r7, #28]
 80052aa:	005b      	lsls	r3, r3, #1
 80052ac:	2203      	movs	r2, #3
 80052ae:	fa02 f303 	lsl.w	r3, r2, r3
 80052b2:	43db      	mvns	r3, r3
 80052b4:	69ba      	ldr	r2, [r7, #24]
 80052b6:	4013      	ands	r3, r2
 80052b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	68da      	ldr	r2, [r3, #12]
 80052be:	69fb      	ldr	r3, [r7, #28]
 80052c0:	005b      	lsls	r3, r3, #1
 80052c2:	fa02 f303 	lsl.w	r3, r2, r3
 80052c6:	69ba      	ldr	r2, [r7, #24]
 80052c8:	4313      	orrs	r3, r2
 80052ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	69ba      	ldr	r2, [r7, #24]
 80052d0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	685b      	ldr	r3, [r3, #4]
 80052d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80052d8:	2201      	movs	r2, #1
 80052da:	69fb      	ldr	r3, [r7, #28]
 80052dc:	fa02 f303 	lsl.w	r3, r2, r3
 80052e0:	43db      	mvns	r3, r3
 80052e2:	69ba      	ldr	r2, [r7, #24]
 80052e4:	4013      	ands	r3, r2
 80052e6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	685b      	ldr	r3, [r3, #4]
 80052ec:	091b      	lsrs	r3, r3, #4
 80052ee:	f003 0201 	and.w	r2, r3, #1
 80052f2:	69fb      	ldr	r3, [r7, #28]
 80052f4:	fa02 f303 	lsl.w	r3, r2, r3
 80052f8:	69ba      	ldr	r2, [r7, #24]
 80052fa:	4313      	orrs	r3, r2
 80052fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	69ba      	ldr	r2, [r7, #24]
 8005302:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	685b      	ldr	r3, [r3, #4]
 8005308:	f003 0303 	and.w	r3, r3, #3
 800530c:	2b03      	cmp	r3, #3
 800530e:	d017      	beq.n	8005340 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	68db      	ldr	r3, [r3, #12]
 8005314:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005316:	69fb      	ldr	r3, [r7, #28]
 8005318:	005b      	lsls	r3, r3, #1
 800531a:	2203      	movs	r2, #3
 800531c:	fa02 f303 	lsl.w	r3, r2, r3
 8005320:	43db      	mvns	r3, r3
 8005322:	69ba      	ldr	r2, [r7, #24]
 8005324:	4013      	ands	r3, r2
 8005326:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	689a      	ldr	r2, [r3, #8]
 800532c:	69fb      	ldr	r3, [r7, #28]
 800532e:	005b      	lsls	r3, r3, #1
 8005330:	fa02 f303 	lsl.w	r3, r2, r3
 8005334:	69ba      	ldr	r2, [r7, #24]
 8005336:	4313      	orrs	r3, r2
 8005338:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	69ba      	ldr	r2, [r7, #24]
 800533e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	685b      	ldr	r3, [r3, #4]
 8005344:	f003 0303 	and.w	r3, r3, #3
 8005348:	2b02      	cmp	r3, #2
 800534a:	d123      	bne.n	8005394 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800534c:	69fb      	ldr	r3, [r7, #28]
 800534e:	08da      	lsrs	r2, r3, #3
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	3208      	adds	r2, #8
 8005354:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005358:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800535a:	69fb      	ldr	r3, [r7, #28]
 800535c:	f003 0307 	and.w	r3, r3, #7
 8005360:	009b      	lsls	r3, r3, #2
 8005362:	220f      	movs	r2, #15
 8005364:	fa02 f303 	lsl.w	r3, r2, r3
 8005368:	43db      	mvns	r3, r3
 800536a:	69ba      	ldr	r2, [r7, #24]
 800536c:	4013      	ands	r3, r2
 800536e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	691a      	ldr	r2, [r3, #16]
 8005374:	69fb      	ldr	r3, [r7, #28]
 8005376:	f003 0307 	and.w	r3, r3, #7
 800537a:	009b      	lsls	r3, r3, #2
 800537c:	fa02 f303 	lsl.w	r3, r2, r3
 8005380:	69ba      	ldr	r2, [r7, #24]
 8005382:	4313      	orrs	r3, r2
 8005384:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005386:	69fb      	ldr	r3, [r7, #28]
 8005388:	08da      	lsrs	r2, r3, #3
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	3208      	adds	r2, #8
 800538e:	69b9      	ldr	r1, [r7, #24]
 8005390:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800539a:	69fb      	ldr	r3, [r7, #28]
 800539c:	005b      	lsls	r3, r3, #1
 800539e:	2203      	movs	r2, #3
 80053a0:	fa02 f303 	lsl.w	r3, r2, r3
 80053a4:	43db      	mvns	r3, r3
 80053a6:	69ba      	ldr	r2, [r7, #24]
 80053a8:	4013      	ands	r3, r2
 80053aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	685b      	ldr	r3, [r3, #4]
 80053b0:	f003 0203 	and.w	r2, r3, #3
 80053b4:	69fb      	ldr	r3, [r7, #28]
 80053b6:	005b      	lsls	r3, r3, #1
 80053b8:	fa02 f303 	lsl.w	r3, r2, r3
 80053bc:	69ba      	ldr	r2, [r7, #24]
 80053be:	4313      	orrs	r3, r2
 80053c0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	69ba      	ldr	r2, [r7, #24]
 80053c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	685b      	ldr	r3, [r3, #4]
 80053cc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	f000 80b4 	beq.w	800553e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80053d6:	2300      	movs	r3, #0
 80053d8:	60fb      	str	r3, [r7, #12]
 80053da:	4b60      	ldr	r3, [pc, #384]	; (800555c <HAL_GPIO_Init+0x30c>)
 80053dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053de:	4a5f      	ldr	r2, [pc, #380]	; (800555c <HAL_GPIO_Init+0x30c>)
 80053e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80053e4:	6453      	str	r3, [r2, #68]	; 0x44
 80053e6:	4b5d      	ldr	r3, [pc, #372]	; (800555c <HAL_GPIO_Init+0x30c>)
 80053e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80053ee:	60fb      	str	r3, [r7, #12]
 80053f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80053f2:	4a5b      	ldr	r2, [pc, #364]	; (8005560 <HAL_GPIO_Init+0x310>)
 80053f4:	69fb      	ldr	r3, [r7, #28]
 80053f6:	089b      	lsrs	r3, r3, #2
 80053f8:	3302      	adds	r3, #2
 80053fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80053fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005400:	69fb      	ldr	r3, [r7, #28]
 8005402:	f003 0303 	and.w	r3, r3, #3
 8005406:	009b      	lsls	r3, r3, #2
 8005408:	220f      	movs	r2, #15
 800540a:	fa02 f303 	lsl.w	r3, r2, r3
 800540e:	43db      	mvns	r3, r3
 8005410:	69ba      	ldr	r2, [r7, #24]
 8005412:	4013      	ands	r3, r2
 8005414:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	4a52      	ldr	r2, [pc, #328]	; (8005564 <HAL_GPIO_Init+0x314>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d02b      	beq.n	8005476 <HAL_GPIO_Init+0x226>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	4a51      	ldr	r2, [pc, #324]	; (8005568 <HAL_GPIO_Init+0x318>)
 8005422:	4293      	cmp	r3, r2
 8005424:	d025      	beq.n	8005472 <HAL_GPIO_Init+0x222>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	4a50      	ldr	r2, [pc, #320]	; (800556c <HAL_GPIO_Init+0x31c>)
 800542a:	4293      	cmp	r3, r2
 800542c:	d01f      	beq.n	800546e <HAL_GPIO_Init+0x21e>
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	4a4f      	ldr	r2, [pc, #316]	; (8005570 <HAL_GPIO_Init+0x320>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d019      	beq.n	800546a <HAL_GPIO_Init+0x21a>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	4a4e      	ldr	r2, [pc, #312]	; (8005574 <HAL_GPIO_Init+0x324>)
 800543a:	4293      	cmp	r3, r2
 800543c:	d013      	beq.n	8005466 <HAL_GPIO_Init+0x216>
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	4a4d      	ldr	r2, [pc, #308]	; (8005578 <HAL_GPIO_Init+0x328>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d00d      	beq.n	8005462 <HAL_GPIO_Init+0x212>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	4a4c      	ldr	r2, [pc, #304]	; (800557c <HAL_GPIO_Init+0x32c>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d007      	beq.n	800545e <HAL_GPIO_Init+0x20e>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	4a4b      	ldr	r2, [pc, #300]	; (8005580 <HAL_GPIO_Init+0x330>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d101      	bne.n	800545a <HAL_GPIO_Init+0x20a>
 8005456:	2307      	movs	r3, #7
 8005458:	e00e      	b.n	8005478 <HAL_GPIO_Init+0x228>
 800545a:	2308      	movs	r3, #8
 800545c:	e00c      	b.n	8005478 <HAL_GPIO_Init+0x228>
 800545e:	2306      	movs	r3, #6
 8005460:	e00a      	b.n	8005478 <HAL_GPIO_Init+0x228>
 8005462:	2305      	movs	r3, #5
 8005464:	e008      	b.n	8005478 <HAL_GPIO_Init+0x228>
 8005466:	2304      	movs	r3, #4
 8005468:	e006      	b.n	8005478 <HAL_GPIO_Init+0x228>
 800546a:	2303      	movs	r3, #3
 800546c:	e004      	b.n	8005478 <HAL_GPIO_Init+0x228>
 800546e:	2302      	movs	r3, #2
 8005470:	e002      	b.n	8005478 <HAL_GPIO_Init+0x228>
 8005472:	2301      	movs	r3, #1
 8005474:	e000      	b.n	8005478 <HAL_GPIO_Init+0x228>
 8005476:	2300      	movs	r3, #0
 8005478:	69fa      	ldr	r2, [r7, #28]
 800547a:	f002 0203 	and.w	r2, r2, #3
 800547e:	0092      	lsls	r2, r2, #2
 8005480:	4093      	lsls	r3, r2
 8005482:	69ba      	ldr	r2, [r7, #24]
 8005484:	4313      	orrs	r3, r2
 8005486:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005488:	4935      	ldr	r1, [pc, #212]	; (8005560 <HAL_GPIO_Init+0x310>)
 800548a:	69fb      	ldr	r3, [r7, #28]
 800548c:	089b      	lsrs	r3, r3, #2
 800548e:	3302      	adds	r3, #2
 8005490:	69ba      	ldr	r2, [r7, #24]
 8005492:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005496:	4b3b      	ldr	r3, [pc, #236]	; (8005584 <HAL_GPIO_Init+0x334>)
 8005498:	689b      	ldr	r3, [r3, #8]
 800549a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800549c:	693b      	ldr	r3, [r7, #16]
 800549e:	43db      	mvns	r3, r3
 80054a0:	69ba      	ldr	r2, [r7, #24]
 80054a2:	4013      	ands	r3, r2
 80054a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	685b      	ldr	r3, [r3, #4]
 80054aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d003      	beq.n	80054ba <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80054b2:	69ba      	ldr	r2, [r7, #24]
 80054b4:	693b      	ldr	r3, [r7, #16]
 80054b6:	4313      	orrs	r3, r2
 80054b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80054ba:	4a32      	ldr	r2, [pc, #200]	; (8005584 <HAL_GPIO_Init+0x334>)
 80054bc:	69bb      	ldr	r3, [r7, #24]
 80054be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80054c0:	4b30      	ldr	r3, [pc, #192]	; (8005584 <HAL_GPIO_Init+0x334>)
 80054c2:	68db      	ldr	r3, [r3, #12]
 80054c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80054c6:	693b      	ldr	r3, [r7, #16]
 80054c8:	43db      	mvns	r3, r3
 80054ca:	69ba      	ldr	r2, [r7, #24]
 80054cc:	4013      	ands	r3, r2
 80054ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	685b      	ldr	r3, [r3, #4]
 80054d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d003      	beq.n	80054e4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80054dc:	69ba      	ldr	r2, [r7, #24]
 80054de:	693b      	ldr	r3, [r7, #16]
 80054e0:	4313      	orrs	r3, r2
 80054e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80054e4:	4a27      	ldr	r2, [pc, #156]	; (8005584 <HAL_GPIO_Init+0x334>)
 80054e6:	69bb      	ldr	r3, [r7, #24]
 80054e8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80054ea:	4b26      	ldr	r3, [pc, #152]	; (8005584 <HAL_GPIO_Init+0x334>)
 80054ec:	685b      	ldr	r3, [r3, #4]
 80054ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80054f0:	693b      	ldr	r3, [r7, #16]
 80054f2:	43db      	mvns	r3, r3
 80054f4:	69ba      	ldr	r2, [r7, #24]
 80054f6:	4013      	ands	r3, r2
 80054f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	685b      	ldr	r3, [r3, #4]
 80054fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005502:	2b00      	cmp	r3, #0
 8005504:	d003      	beq.n	800550e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8005506:	69ba      	ldr	r2, [r7, #24]
 8005508:	693b      	ldr	r3, [r7, #16]
 800550a:	4313      	orrs	r3, r2
 800550c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800550e:	4a1d      	ldr	r2, [pc, #116]	; (8005584 <HAL_GPIO_Init+0x334>)
 8005510:	69bb      	ldr	r3, [r7, #24]
 8005512:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005514:	4b1b      	ldr	r3, [pc, #108]	; (8005584 <HAL_GPIO_Init+0x334>)
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800551a:	693b      	ldr	r3, [r7, #16]
 800551c:	43db      	mvns	r3, r3
 800551e:	69ba      	ldr	r2, [r7, #24]
 8005520:	4013      	ands	r3, r2
 8005522:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	685b      	ldr	r3, [r3, #4]
 8005528:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800552c:	2b00      	cmp	r3, #0
 800552e:	d003      	beq.n	8005538 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005530:	69ba      	ldr	r2, [r7, #24]
 8005532:	693b      	ldr	r3, [r7, #16]
 8005534:	4313      	orrs	r3, r2
 8005536:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005538:	4a12      	ldr	r2, [pc, #72]	; (8005584 <HAL_GPIO_Init+0x334>)
 800553a:	69bb      	ldr	r3, [r7, #24]
 800553c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800553e:	69fb      	ldr	r3, [r7, #28]
 8005540:	3301      	adds	r3, #1
 8005542:	61fb      	str	r3, [r7, #28]
 8005544:	69fb      	ldr	r3, [r7, #28]
 8005546:	2b0f      	cmp	r3, #15
 8005548:	f67f ae90 	bls.w	800526c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800554c:	bf00      	nop
 800554e:	bf00      	nop
 8005550:	3724      	adds	r7, #36	; 0x24
 8005552:	46bd      	mov	sp, r7
 8005554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005558:	4770      	bx	lr
 800555a:	bf00      	nop
 800555c:	40023800 	.word	0x40023800
 8005560:	40013800 	.word	0x40013800
 8005564:	40020000 	.word	0x40020000
 8005568:	40020400 	.word	0x40020400
 800556c:	40020800 	.word	0x40020800
 8005570:	40020c00 	.word	0x40020c00
 8005574:	40021000 	.word	0x40021000
 8005578:	40021400 	.word	0x40021400
 800557c:	40021800 	.word	0x40021800
 8005580:	40021c00 	.word	0x40021c00
 8005584:	40013c00 	.word	0x40013c00

08005588 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005588:	b480      	push	{r7}
 800558a:	b085      	sub	sp, #20
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
 8005590:	460b      	mov	r3, r1
 8005592:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	691a      	ldr	r2, [r3, #16]
 8005598:	887b      	ldrh	r3, [r7, #2]
 800559a:	4013      	ands	r3, r2
 800559c:	2b00      	cmp	r3, #0
 800559e:	d002      	beq.n	80055a6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80055a0:	2301      	movs	r3, #1
 80055a2:	73fb      	strb	r3, [r7, #15]
 80055a4:	e001      	b.n	80055aa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80055a6:	2300      	movs	r3, #0
 80055a8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80055aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80055ac:	4618      	mov	r0, r3
 80055ae:	3714      	adds	r7, #20
 80055b0:	46bd      	mov	sp, r7
 80055b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b6:	4770      	bx	lr

080055b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80055b8:	b480      	push	{r7}
 80055ba:	b083      	sub	sp, #12
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
 80055c0:	460b      	mov	r3, r1
 80055c2:	807b      	strh	r3, [r7, #2]
 80055c4:	4613      	mov	r3, r2
 80055c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80055c8:	787b      	ldrb	r3, [r7, #1]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d003      	beq.n	80055d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80055ce:	887a      	ldrh	r2, [r7, #2]
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80055d4:	e003      	b.n	80055de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80055d6:	887b      	ldrh	r3, [r7, #2]
 80055d8:	041a      	lsls	r2, r3, #16
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	619a      	str	r2, [r3, #24]
}
 80055de:	bf00      	nop
 80055e0:	370c      	adds	r7, #12
 80055e2:	46bd      	mov	sp, r7
 80055e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e8:	4770      	bx	lr
	...

080055ec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b086      	sub	sp, #24
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d101      	bne.n	80055fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80055fa:	2301      	movs	r3, #1
 80055fc:	e267      	b.n	8005ace <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f003 0301 	and.w	r3, r3, #1
 8005606:	2b00      	cmp	r3, #0
 8005608:	d075      	beq.n	80056f6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800560a:	4b88      	ldr	r3, [pc, #544]	; (800582c <HAL_RCC_OscConfig+0x240>)
 800560c:	689b      	ldr	r3, [r3, #8]
 800560e:	f003 030c 	and.w	r3, r3, #12
 8005612:	2b04      	cmp	r3, #4
 8005614:	d00c      	beq.n	8005630 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005616:	4b85      	ldr	r3, [pc, #532]	; (800582c <HAL_RCC_OscConfig+0x240>)
 8005618:	689b      	ldr	r3, [r3, #8]
 800561a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800561e:	2b08      	cmp	r3, #8
 8005620:	d112      	bne.n	8005648 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005622:	4b82      	ldr	r3, [pc, #520]	; (800582c <HAL_RCC_OscConfig+0x240>)
 8005624:	685b      	ldr	r3, [r3, #4]
 8005626:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800562a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800562e:	d10b      	bne.n	8005648 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005630:	4b7e      	ldr	r3, [pc, #504]	; (800582c <HAL_RCC_OscConfig+0x240>)
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005638:	2b00      	cmp	r3, #0
 800563a:	d05b      	beq.n	80056f4 <HAL_RCC_OscConfig+0x108>
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	685b      	ldr	r3, [r3, #4]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d157      	bne.n	80056f4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005644:	2301      	movs	r3, #1
 8005646:	e242      	b.n	8005ace <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	685b      	ldr	r3, [r3, #4]
 800564c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005650:	d106      	bne.n	8005660 <HAL_RCC_OscConfig+0x74>
 8005652:	4b76      	ldr	r3, [pc, #472]	; (800582c <HAL_RCC_OscConfig+0x240>)
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	4a75      	ldr	r2, [pc, #468]	; (800582c <HAL_RCC_OscConfig+0x240>)
 8005658:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800565c:	6013      	str	r3, [r2, #0]
 800565e:	e01d      	b.n	800569c <HAL_RCC_OscConfig+0xb0>
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	685b      	ldr	r3, [r3, #4]
 8005664:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005668:	d10c      	bne.n	8005684 <HAL_RCC_OscConfig+0x98>
 800566a:	4b70      	ldr	r3, [pc, #448]	; (800582c <HAL_RCC_OscConfig+0x240>)
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	4a6f      	ldr	r2, [pc, #444]	; (800582c <HAL_RCC_OscConfig+0x240>)
 8005670:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005674:	6013      	str	r3, [r2, #0]
 8005676:	4b6d      	ldr	r3, [pc, #436]	; (800582c <HAL_RCC_OscConfig+0x240>)
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	4a6c      	ldr	r2, [pc, #432]	; (800582c <HAL_RCC_OscConfig+0x240>)
 800567c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005680:	6013      	str	r3, [r2, #0]
 8005682:	e00b      	b.n	800569c <HAL_RCC_OscConfig+0xb0>
 8005684:	4b69      	ldr	r3, [pc, #420]	; (800582c <HAL_RCC_OscConfig+0x240>)
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	4a68      	ldr	r2, [pc, #416]	; (800582c <HAL_RCC_OscConfig+0x240>)
 800568a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800568e:	6013      	str	r3, [r2, #0]
 8005690:	4b66      	ldr	r3, [pc, #408]	; (800582c <HAL_RCC_OscConfig+0x240>)
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	4a65      	ldr	r2, [pc, #404]	; (800582c <HAL_RCC_OscConfig+0x240>)
 8005696:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800569a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	685b      	ldr	r3, [r3, #4]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d013      	beq.n	80056cc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056a4:	f7fe fc9c 	bl	8003fe0 <HAL_GetTick>
 80056a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80056aa:	e008      	b.n	80056be <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80056ac:	f7fe fc98 	bl	8003fe0 <HAL_GetTick>
 80056b0:	4602      	mov	r2, r0
 80056b2:	693b      	ldr	r3, [r7, #16]
 80056b4:	1ad3      	subs	r3, r2, r3
 80056b6:	2b64      	cmp	r3, #100	; 0x64
 80056b8:	d901      	bls.n	80056be <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80056ba:	2303      	movs	r3, #3
 80056bc:	e207      	b.n	8005ace <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80056be:	4b5b      	ldr	r3, [pc, #364]	; (800582c <HAL_RCC_OscConfig+0x240>)
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d0f0      	beq.n	80056ac <HAL_RCC_OscConfig+0xc0>
 80056ca:	e014      	b.n	80056f6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056cc:	f7fe fc88 	bl	8003fe0 <HAL_GetTick>
 80056d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80056d2:	e008      	b.n	80056e6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80056d4:	f7fe fc84 	bl	8003fe0 <HAL_GetTick>
 80056d8:	4602      	mov	r2, r0
 80056da:	693b      	ldr	r3, [r7, #16]
 80056dc:	1ad3      	subs	r3, r2, r3
 80056de:	2b64      	cmp	r3, #100	; 0x64
 80056e0:	d901      	bls.n	80056e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80056e2:	2303      	movs	r3, #3
 80056e4:	e1f3      	b.n	8005ace <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80056e6:	4b51      	ldr	r3, [pc, #324]	; (800582c <HAL_RCC_OscConfig+0x240>)
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d1f0      	bne.n	80056d4 <HAL_RCC_OscConfig+0xe8>
 80056f2:	e000      	b.n	80056f6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80056f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f003 0302 	and.w	r3, r3, #2
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d063      	beq.n	80057ca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005702:	4b4a      	ldr	r3, [pc, #296]	; (800582c <HAL_RCC_OscConfig+0x240>)
 8005704:	689b      	ldr	r3, [r3, #8]
 8005706:	f003 030c 	and.w	r3, r3, #12
 800570a:	2b00      	cmp	r3, #0
 800570c:	d00b      	beq.n	8005726 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800570e:	4b47      	ldr	r3, [pc, #284]	; (800582c <HAL_RCC_OscConfig+0x240>)
 8005710:	689b      	ldr	r3, [r3, #8]
 8005712:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005716:	2b08      	cmp	r3, #8
 8005718:	d11c      	bne.n	8005754 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800571a:	4b44      	ldr	r3, [pc, #272]	; (800582c <HAL_RCC_OscConfig+0x240>)
 800571c:	685b      	ldr	r3, [r3, #4]
 800571e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005722:	2b00      	cmp	r3, #0
 8005724:	d116      	bne.n	8005754 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005726:	4b41      	ldr	r3, [pc, #260]	; (800582c <HAL_RCC_OscConfig+0x240>)
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f003 0302 	and.w	r3, r3, #2
 800572e:	2b00      	cmp	r3, #0
 8005730:	d005      	beq.n	800573e <HAL_RCC_OscConfig+0x152>
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	68db      	ldr	r3, [r3, #12]
 8005736:	2b01      	cmp	r3, #1
 8005738:	d001      	beq.n	800573e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800573a:	2301      	movs	r3, #1
 800573c:	e1c7      	b.n	8005ace <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800573e:	4b3b      	ldr	r3, [pc, #236]	; (800582c <HAL_RCC_OscConfig+0x240>)
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	691b      	ldr	r3, [r3, #16]
 800574a:	00db      	lsls	r3, r3, #3
 800574c:	4937      	ldr	r1, [pc, #220]	; (800582c <HAL_RCC_OscConfig+0x240>)
 800574e:	4313      	orrs	r3, r2
 8005750:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005752:	e03a      	b.n	80057ca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	68db      	ldr	r3, [r3, #12]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d020      	beq.n	800579e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800575c:	4b34      	ldr	r3, [pc, #208]	; (8005830 <HAL_RCC_OscConfig+0x244>)
 800575e:	2201      	movs	r2, #1
 8005760:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005762:	f7fe fc3d 	bl	8003fe0 <HAL_GetTick>
 8005766:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005768:	e008      	b.n	800577c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800576a:	f7fe fc39 	bl	8003fe0 <HAL_GetTick>
 800576e:	4602      	mov	r2, r0
 8005770:	693b      	ldr	r3, [r7, #16]
 8005772:	1ad3      	subs	r3, r2, r3
 8005774:	2b02      	cmp	r3, #2
 8005776:	d901      	bls.n	800577c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005778:	2303      	movs	r3, #3
 800577a:	e1a8      	b.n	8005ace <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800577c:	4b2b      	ldr	r3, [pc, #172]	; (800582c <HAL_RCC_OscConfig+0x240>)
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f003 0302 	and.w	r3, r3, #2
 8005784:	2b00      	cmp	r3, #0
 8005786:	d0f0      	beq.n	800576a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005788:	4b28      	ldr	r3, [pc, #160]	; (800582c <HAL_RCC_OscConfig+0x240>)
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	691b      	ldr	r3, [r3, #16]
 8005794:	00db      	lsls	r3, r3, #3
 8005796:	4925      	ldr	r1, [pc, #148]	; (800582c <HAL_RCC_OscConfig+0x240>)
 8005798:	4313      	orrs	r3, r2
 800579a:	600b      	str	r3, [r1, #0]
 800579c:	e015      	b.n	80057ca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800579e:	4b24      	ldr	r3, [pc, #144]	; (8005830 <HAL_RCC_OscConfig+0x244>)
 80057a0:	2200      	movs	r2, #0
 80057a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057a4:	f7fe fc1c 	bl	8003fe0 <HAL_GetTick>
 80057a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80057aa:	e008      	b.n	80057be <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80057ac:	f7fe fc18 	bl	8003fe0 <HAL_GetTick>
 80057b0:	4602      	mov	r2, r0
 80057b2:	693b      	ldr	r3, [r7, #16]
 80057b4:	1ad3      	subs	r3, r2, r3
 80057b6:	2b02      	cmp	r3, #2
 80057b8:	d901      	bls.n	80057be <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80057ba:	2303      	movs	r3, #3
 80057bc:	e187      	b.n	8005ace <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80057be:	4b1b      	ldr	r3, [pc, #108]	; (800582c <HAL_RCC_OscConfig+0x240>)
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f003 0302 	and.w	r3, r3, #2
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d1f0      	bne.n	80057ac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f003 0308 	and.w	r3, r3, #8
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d036      	beq.n	8005844 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	695b      	ldr	r3, [r3, #20]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d016      	beq.n	800580c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80057de:	4b15      	ldr	r3, [pc, #84]	; (8005834 <HAL_RCC_OscConfig+0x248>)
 80057e0:	2201      	movs	r2, #1
 80057e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057e4:	f7fe fbfc 	bl	8003fe0 <HAL_GetTick>
 80057e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80057ea:	e008      	b.n	80057fe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80057ec:	f7fe fbf8 	bl	8003fe0 <HAL_GetTick>
 80057f0:	4602      	mov	r2, r0
 80057f2:	693b      	ldr	r3, [r7, #16]
 80057f4:	1ad3      	subs	r3, r2, r3
 80057f6:	2b02      	cmp	r3, #2
 80057f8:	d901      	bls.n	80057fe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80057fa:	2303      	movs	r3, #3
 80057fc:	e167      	b.n	8005ace <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80057fe:	4b0b      	ldr	r3, [pc, #44]	; (800582c <HAL_RCC_OscConfig+0x240>)
 8005800:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005802:	f003 0302 	and.w	r3, r3, #2
 8005806:	2b00      	cmp	r3, #0
 8005808:	d0f0      	beq.n	80057ec <HAL_RCC_OscConfig+0x200>
 800580a:	e01b      	b.n	8005844 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800580c:	4b09      	ldr	r3, [pc, #36]	; (8005834 <HAL_RCC_OscConfig+0x248>)
 800580e:	2200      	movs	r2, #0
 8005810:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005812:	f7fe fbe5 	bl	8003fe0 <HAL_GetTick>
 8005816:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005818:	e00e      	b.n	8005838 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800581a:	f7fe fbe1 	bl	8003fe0 <HAL_GetTick>
 800581e:	4602      	mov	r2, r0
 8005820:	693b      	ldr	r3, [r7, #16]
 8005822:	1ad3      	subs	r3, r2, r3
 8005824:	2b02      	cmp	r3, #2
 8005826:	d907      	bls.n	8005838 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005828:	2303      	movs	r3, #3
 800582a:	e150      	b.n	8005ace <HAL_RCC_OscConfig+0x4e2>
 800582c:	40023800 	.word	0x40023800
 8005830:	42470000 	.word	0x42470000
 8005834:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005838:	4b88      	ldr	r3, [pc, #544]	; (8005a5c <HAL_RCC_OscConfig+0x470>)
 800583a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800583c:	f003 0302 	and.w	r3, r3, #2
 8005840:	2b00      	cmp	r3, #0
 8005842:	d1ea      	bne.n	800581a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f003 0304 	and.w	r3, r3, #4
 800584c:	2b00      	cmp	r3, #0
 800584e:	f000 8097 	beq.w	8005980 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005852:	2300      	movs	r3, #0
 8005854:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005856:	4b81      	ldr	r3, [pc, #516]	; (8005a5c <HAL_RCC_OscConfig+0x470>)
 8005858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800585a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800585e:	2b00      	cmp	r3, #0
 8005860:	d10f      	bne.n	8005882 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005862:	2300      	movs	r3, #0
 8005864:	60bb      	str	r3, [r7, #8]
 8005866:	4b7d      	ldr	r3, [pc, #500]	; (8005a5c <HAL_RCC_OscConfig+0x470>)
 8005868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800586a:	4a7c      	ldr	r2, [pc, #496]	; (8005a5c <HAL_RCC_OscConfig+0x470>)
 800586c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005870:	6413      	str	r3, [r2, #64]	; 0x40
 8005872:	4b7a      	ldr	r3, [pc, #488]	; (8005a5c <HAL_RCC_OscConfig+0x470>)
 8005874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005876:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800587a:	60bb      	str	r3, [r7, #8]
 800587c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800587e:	2301      	movs	r3, #1
 8005880:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005882:	4b77      	ldr	r3, [pc, #476]	; (8005a60 <HAL_RCC_OscConfig+0x474>)
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800588a:	2b00      	cmp	r3, #0
 800588c:	d118      	bne.n	80058c0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800588e:	4b74      	ldr	r3, [pc, #464]	; (8005a60 <HAL_RCC_OscConfig+0x474>)
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	4a73      	ldr	r2, [pc, #460]	; (8005a60 <HAL_RCC_OscConfig+0x474>)
 8005894:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005898:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800589a:	f7fe fba1 	bl	8003fe0 <HAL_GetTick>
 800589e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058a0:	e008      	b.n	80058b4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80058a2:	f7fe fb9d 	bl	8003fe0 <HAL_GetTick>
 80058a6:	4602      	mov	r2, r0
 80058a8:	693b      	ldr	r3, [r7, #16]
 80058aa:	1ad3      	subs	r3, r2, r3
 80058ac:	2b02      	cmp	r3, #2
 80058ae:	d901      	bls.n	80058b4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80058b0:	2303      	movs	r3, #3
 80058b2:	e10c      	b.n	8005ace <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058b4:	4b6a      	ldr	r3, [pc, #424]	; (8005a60 <HAL_RCC_OscConfig+0x474>)
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d0f0      	beq.n	80058a2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	689b      	ldr	r3, [r3, #8]
 80058c4:	2b01      	cmp	r3, #1
 80058c6:	d106      	bne.n	80058d6 <HAL_RCC_OscConfig+0x2ea>
 80058c8:	4b64      	ldr	r3, [pc, #400]	; (8005a5c <HAL_RCC_OscConfig+0x470>)
 80058ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058cc:	4a63      	ldr	r2, [pc, #396]	; (8005a5c <HAL_RCC_OscConfig+0x470>)
 80058ce:	f043 0301 	orr.w	r3, r3, #1
 80058d2:	6713      	str	r3, [r2, #112]	; 0x70
 80058d4:	e01c      	b.n	8005910 <HAL_RCC_OscConfig+0x324>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	689b      	ldr	r3, [r3, #8]
 80058da:	2b05      	cmp	r3, #5
 80058dc:	d10c      	bne.n	80058f8 <HAL_RCC_OscConfig+0x30c>
 80058de:	4b5f      	ldr	r3, [pc, #380]	; (8005a5c <HAL_RCC_OscConfig+0x470>)
 80058e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058e2:	4a5e      	ldr	r2, [pc, #376]	; (8005a5c <HAL_RCC_OscConfig+0x470>)
 80058e4:	f043 0304 	orr.w	r3, r3, #4
 80058e8:	6713      	str	r3, [r2, #112]	; 0x70
 80058ea:	4b5c      	ldr	r3, [pc, #368]	; (8005a5c <HAL_RCC_OscConfig+0x470>)
 80058ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058ee:	4a5b      	ldr	r2, [pc, #364]	; (8005a5c <HAL_RCC_OscConfig+0x470>)
 80058f0:	f043 0301 	orr.w	r3, r3, #1
 80058f4:	6713      	str	r3, [r2, #112]	; 0x70
 80058f6:	e00b      	b.n	8005910 <HAL_RCC_OscConfig+0x324>
 80058f8:	4b58      	ldr	r3, [pc, #352]	; (8005a5c <HAL_RCC_OscConfig+0x470>)
 80058fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058fc:	4a57      	ldr	r2, [pc, #348]	; (8005a5c <HAL_RCC_OscConfig+0x470>)
 80058fe:	f023 0301 	bic.w	r3, r3, #1
 8005902:	6713      	str	r3, [r2, #112]	; 0x70
 8005904:	4b55      	ldr	r3, [pc, #340]	; (8005a5c <HAL_RCC_OscConfig+0x470>)
 8005906:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005908:	4a54      	ldr	r2, [pc, #336]	; (8005a5c <HAL_RCC_OscConfig+0x470>)
 800590a:	f023 0304 	bic.w	r3, r3, #4
 800590e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	689b      	ldr	r3, [r3, #8]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d015      	beq.n	8005944 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005918:	f7fe fb62 	bl	8003fe0 <HAL_GetTick>
 800591c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800591e:	e00a      	b.n	8005936 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005920:	f7fe fb5e 	bl	8003fe0 <HAL_GetTick>
 8005924:	4602      	mov	r2, r0
 8005926:	693b      	ldr	r3, [r7, #16]
 8005928:	1ad3      	subs	r3, r2, r3
 800592a:	f241 3288 	movw	r2, #5000	; 0x1388
 800592e:	4293      	cmp	r3, r2
 8005930:	d901      	bls.n	8005936 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005932:	2303      	movs	r3, #3
 8005934:	e0cb      	b.n	8005ace <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005936:	4b49      	ldr	r3, [pc, #292]	; (8005a5c <HAL_RCC_OscConfig+0x470>)
 8005938:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800593a:	f003 0302 	and.w	r3, r3, #2
 800593e:	2b00      	cmp	r3, #0
 8005940:	d0ee      	beq.n	8005920 <HAL_RCC_OscConfig+0x334>
 8005942:	e014      	b.n	800596e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005944:	f7fe fb4c 	bl	8003fe0 <HAL_GetTick>
 8005948:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800594a:	e00a      	b.n	8005962 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800594c:	f7fe fb48 	bl	8003fe0 <HAL_GetTick>
 8005950:	4602      	mov	r2, r0
 8005952:	693b      	ldr	r3, [r7, #16]
 8005954:	1ad3      	subs	r3, r2, r3
 8005956:	f241 3288 	movw	r2, #5000	; 0x1388
 800595a:	4293      	cmp	r3, r2
 800595c:	d901      	bls.n	8005962 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800595e:	2303      	movs	r3, #3
 8005960:	e0b5      	b.n	8005ace <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005962:	4b3e      	ldr	r3, [pc, #248]	; (8005a5c <HAL_RCC_OscConfig+0x470>)
 8005964:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005966:	f003 0302 	and.w	r3, r3, #2
 800596a:	2b00      	cmp	r3, #0
 800596c:	d1ee      	bne.n	800594c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800596e:	7dfb      	ldrb	r3, [r7, #23]
 8005970:	2b01      	cmp	r3, #1
 8005972:	d105      	bne.n	8005980 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005974:	4b39      	ldr	r3, [pc, #228]	; (8005a5c <HAL_RCC_OscConfig+0x470>)
 8005976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005978:	4a38      	ldr	r2, [pc, #224]	; (8005a5c <HAL_RCC_OscConfig+0x470>)
 800597a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800597e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	699b      	ldr	r3, [r3, #24]
 8005984:	2b00      	cmp	r3, #0
 8005986:	f000 80a1 	beq.w	8005acc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800598a:	4b34      	ldr	r3, [pc, #208]	; (8005a5c <HAL_RCC_OscConfig+0x470>)
 800598c:	689b      	ldr	r3, [r3, #8]
 800598e:	f003 030c 	and.w	r3, r3, #12
 8005992:	2b08      	cmp	r3, #8
 8005994:	d05c      	beq.n	8005a50 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	699b      	ldr	r3, [r3, #24]
 800599a:	2b02      	cmp	r3, #2
 800599c:	d141      	bne.n	8005a22 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800599e:	4b31      	ldr	r3, [pc, #196]	; (8005a64 <HAL_RCC_OscConfig+0x478>)
 80059a0:	2200      	movs	r2, #0
 80059a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059a4:	f7fe fb1c 	bl	8003fe0 <HAL_GetTick>
 80059a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80059aa:	e008      	b.n	80059be <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80059ac:	f7fe fb18 	bl	8003fe0 <HAL_GetTick>
 80059b0:	4602      	mov	r2, r0
 80059b2:	693b      	ldr	r3, [r7, #16]
 80059b4:	1ad3      	subs	r3, r2, r3
 80059b6:	2b02      	cmp	r3, #2
 80059b8:	d901      	bls.n	80059be <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80059ba:	2303      	movs	r3, #3
 80059bc:	e087      	b.n	8005ace <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80059be:	4b27      	ldr	r3, [pc, #156]	; (8005a5c <HAL_RCC_OscConfig+0x470>)
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d1f0      	bne.n	80059ac <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	69da      	ldr	r2, [r3, #28]
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6a1b      	ldr	r3, [r3, #32]
 80059d2:	431a      	orrs	r2, r3
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059d8:	019b      	lsls	r3, r3, #6
 80059da:	431a      	orrs	r2, r3
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059e0:	085b      	lsrs	r3, r3, #1
 80059e2:	3b01      	subs	r3, #1
 80059e4:	041b      	lsls	r3, r3, #16
 80059e6:	431a      	orrs	r2, r3
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059ec:	061b      	lsls	r3, r3, #24
 80059ee:	491b      	ldr	r1, [pc, #108]	; (8005a5c <HAL_RCC_OscConfig+0x470>)
 80059f0:	4313      	orrs	r3, r2
 80059f2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80059f4:	4b1b      	ldr	r3, [pc, #108]	; (8005a64 <HAL_RCC_OscConfig+0x478>)
 80059f6:	2201      	movs	r2, #1
 80059f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059fa:	f7fe faf1 	bl	8003fe0 <HAL_GetTick>
 80059fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a00:	e008      	b.n	8005a14 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a02:	f7fe faed 	bl	8003fe0 <HAL_GetTick>
 8005a06:	4602      	mov	r2, r0
 8005a08:	693b      	ldr	r3, [r7, #16]
 8005a0a:	1ad3      	subs	r3, r2, r3
 8005a0c:	2b02      	cmp	r3, #2
 8005a0e:	d901      	bls.n	8005a14 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005a10:	2303      	movs	r3, #3
 8005a12:	e05c      	b.n	8005ace <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a14:	4b11      	ldr	r3, [pc, #68]	; (8005a5c <HAL_RCC_OscConfig+0x470>)
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d0f0      	beq.n	8005a02 <HAL_RCC_OscConfig+0x416>
 8005a20:	e054      	b.n	8005acc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a22:	4b10      	ldr	r3, [pc, #64]	; (8005a64 <HAL_RCC_OscConfig+0x478>)
 8005a24:	2200      	movs	r2, #0
 8005a26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a28:	f7fe fada 	bl	8003fe0 <HAL_GetTick>
 8005a2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a2e:	e008      	b.n	8005a42 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a30:	f7fe fad6 	bl	8003fe0 <HAL_GetTick>
 8005a34:	4602      	mov	r2, r0
 8005a36:	693b      	ldr	r3, [r7, #16]
 8005a38:	1ad3      	subs	r3, r2, r3
 8005a3a:	2b02      	cmp	r3, #2
 8005a3c:	d901      	bls.n	8005a42 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005a3e:	2303      	movs	r3, #3
 8005a40:	e045      	b.n	8005ace <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a42:	4b06      	ldr	r3, [pc, #24]	; (8005a5c <HAL_RCC_OscConfig+0x470>)
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d1f0      	bne.n	8005a30 <HAL_RCC_OscConfig+0x444>
 8005a4e:	e03d      	b.n	8005acc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	699b      	ldr	r3, [r3, #24]
 8005a54:	2b01      	cmp	r3, #1
 8005a56:	d107      	bne.n	8005a68 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005a58:	2301      	movs	r3, #1
 8005a5a:	e038      	b.n	8005ace <HAL_RCC_OscConfig+0x4e2>
 8005a5c:	40023800 	.word	0x40023800
 8005a60:	40007000 	.word	0x40007000
 8005a64:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005a68:	4b1b      	ldr	r3, [pc, #108]	; (8005ad8 <HAL_RCC_OscConfig+0x4ec>)
 8005a6a:	685b      	ldr	r3, [r3, #4]
 8005a6c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	699b      	ldr	r3, [r3, #24]
 8005a72:	2b01      	cmp	r3, #1
 8005a74:	d028      	beq.n	8005ac8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005a80:	429a      	cmp	r2, r3
 8005a82:	d121      	bne.n	8005ac8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a8e:	429a      	cmp	r2, r3
 8005a90:	d11a      	bne.n	8005ac8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005a92:	68fa      	ldr	r2, [r7, #12]
 8005a94:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005a98:	4013      	ands	r3, r2
 8005a9a:	687a      	ldr	r2, [r7, #4]
 8005a9c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005a9e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005aa0:	4293      	cmp	r3, r2
 8005aa2:	d111      	bne.n	8005ac8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005aae:	085b      	lsrs	r3, r3, #1
 8005ab0:	3b01      	subs	r3, #1
 8005ab2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005ab4:	429a      	cmp	r2, r3
 8005ab6:	d107      	bne.n	8005ac8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ac2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005ac4:	429a      	cmp	r2, r3
 8005ac6:	d001      	beq.n	8005acc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005ac8:	2301      	movs	r3, #1
 8005aca:	e000      	b.n	8005ace <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005acc:	2300      	movs	r3, #0
}
 8005ace:	4618      	mov	r0, r3
 8005ad0:	3718      	adds	r7, #24
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	bd80      	pop	{r7, pc}
 8005ad6:	bf00      	nop
 8005ad8:	40023800 	.word	0x40023800

08005adc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b084      	sub	sp, #16
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
 8005ae4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d101      	bne.n	8005af0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005aec:	2301      	movs	r3, #1
 8005aee:	e0cc      	b.n	8005c8a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005af0:	4b68      	ldr	r3, [pc, #416]	; (8005c94 <HAL_RCC_ClockConfig+0x1b8>)
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f003 0307 	and.w	r3, r3, #7
 8005af8:	683a      	ldr	r2, [r7, #0]
 8005afa:	429a      	cmp	r2, r3
 8005afc:	d90c      	bls.n	8005b18 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005afe:	4b65      	ldr	r3, [pc, #404]	; (8005c94 <HAL_RCC_ClockConfig+0x1b8>)
 8005b00:	683a      	ldr	r2, [r7, #0]
 8005b02:	b2d2      	uxtb	r2, r2
 8005b04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b06:	4b63      	ldr	r3, [pc, #396]	; (8005c94 <HAL_RCC_ClockConfig+0x1b8>)
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f003 0307 	and.w	r3, r3, #7
 8005b0e:	683a      	ldr	r2, [r7, #0]
 8005b10:	429a      	cmp	r2, r3
 8005b12:	d001      	beq.n	8005b18 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005b14:	2301      	movs	r3, #1
 8005b16:	e0b8      	b.n	8005c8a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f003 0302 	and.w	r3, r3, #2
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d020      	beq.n	8005b66 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f003 0304 	and.w	r3, r3, #4
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d005      	beq.n	8005b3c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005b30:	4b59      	ldr	r3, [pc, #356]	; (8005c98 <HAL_RCC_ClockConfig+0x1bc>)
 8005b32:	689b      	ldr	r3, [r3, #8]
 8005b34:	4a58      	ldr	r2, [pc, #352]	; (8005c98 <HAL_RCC_ClockConfig+0x1bc>)
 8005b36:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005b3a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f003 0308 	and.w	r3, r3, #8
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d005      	beq.n	8005b54 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005b48:	4b53      	ldr	r3, [pc, #332]	; (8005c98 <HAL_RCC_ClockConfig+0x1bc>)
 8005b4a:	689b      	ldr	r3, [r3, #8]
 8005b4c:	4a52      	ldr	r2, [pc, #328]	; (8005c98 <HAL_RCC_ClockConfig+0x1bc>)
 8005b4e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005b52:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005b54:	4b50      	ldr	r3, [pc, #320]	; (8005c98 <HAL_RCC_ClockConfig+0x1bc>)
 8005b56:	689b      	ldr	r3, [r3, #8]
 8005b58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	689b      	ldr	r3, [r3, #8]
 8005b60:	494d      	ldr	r1, [pc, #308]	; (8005c98 <HAL_RCC_ClockConfig+0x1bc>)
 8005b62:	4313      	orrs	r3, r2
 8005b64:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f003 0301 	and.w	r3, r3, #1
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d044      	beq.n	8005bfc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	685b      	ldr	r3, [r3, #4]
 8005b76:	2b01      	cmp	r3, #1
 8005b78:	d107      	bne.n	8005b8a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b7a:	4b47      	ldr	r3, [pc, #284]	; (8005c98 <HAL_RCC_ClockConfig+0x1bc>)
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d119      	bne.n	8005bba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005b86:	2301      	movs	r3, #1
 8005b88:	e07f      	b.n	8005c8a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	685b      	ldr	r3, [r3, #4]
 8005b8e:	2b02      	cmp	r3, #2
 8005b90:	d003      	beq.n	8005b9a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005b96:	2b03      	cmp	r3, #3
 8005b98:	d107      	bne.n	8005baa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b9a:	4b3f      	ldr	r3, [pc, #252]	; (8005c98 <HAL_RCC_ClockConfig+0x1bc>)
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d109      	bne.n	8005bba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005ba6:	2301      	movs	r3, #1
 8005ba8:	e06f      	b.n	8005c8a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005baa:	4b3b      	ldr	r3, [pc, #236]	; (8005c98 <HAL_RCC_ClockConfig+0x1bc>)
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f003 0302 	and.w	r3, r3, #2
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d101      	bne.n	8005bba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005bb6:	2301      	movs	r3, #1
 8005bb8:	e067      	b.n	8005c8a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005bba:	4b37      	ldr	r3, [pc, #220]	; (8005c98 <HAL_RCC_ClockConfig+0x1bc>)
 8005bbc:	689b      	ldr	r3, [r3, #8]
 8005bbe:	f023 0203 	bic.w	r2, r3, #3
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	685b      	ldr	r3, [r3, #4]
 8005bc6:	4934      	ldr	r1, [pc, #208]	; (8005c98 <HAL_RCC_ClockConfig+0x1bc>)
 8005bc8:	4313      	orrs	r3, r2
 8005bca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005bcc:	f7fe fa08 	bl	8003fe0 <HAL_GetTick>
 8005bd0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005bd2:	e00a      	b.n	8005bea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005bd4:	f7fe fa04 	bl	8003fe0 <HAL_GetTick>
 8005bd8:	4602      	mov	r2, r0
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	1ad3      	subs	r3, r2, r3
 8005bde:	f241 3288 	movw	r2, #5000	; 0x1388
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d901      	bls.n	8005bea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005be6:	2303      	movs	r3, #3
 8005be8:	e04f      	b.n	8005c8a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005bea:	4b2b      	ldr	r3, [pc, #172]	; (8005c98 <HAL_RCC_ClockConfig+0x1bc>)
 8005bec:	689b      	ldr	r3, [r3, #8]
 8005bee:	f003 020c 	and.w	r2, r3, #12
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	685b      	ldr	r3, [r3, #4]
 8005bf6:	009b      	lsls	r3, r3, #2
 8005bf8:	429a      	cmp	r2, r3
 8005bfa:	d1eb      	bne.n	8005bd4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005bfc:	4b25      	ldr	r3, [pc, #148]	; (8005c94 <HAL_RCC_ClockConfig+0x1b8>)
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f003 0307 	and.w	r3, r3, #7
 8005c04:	683a      	ldr	r2, [r7, #0]
 8005c06:	429a      	cmp	r2, r3
 8005c08:	d20c      	bcs.n	8005c24 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c0a:	4b22      	ldr	r3, [pc, #136]	; (8005c94 <HAL_RCC_ClockConfig+0x1b8>)
 8005c0c:	683a      	ldr	r2, [r7, #0]
 8005c0e:	b2d2      	uxtb	r2, r2
 8005c10:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c12:	4b20      	ldr	r3, [pc, #128]	; (8005c94 <HAL_RCC_ClockConfig+0x1b8>)
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f003 0307 	and.w	r3, r3, #7
 8005c1a:	683a      	ldr	r2, [r7, #0]
 8005c1c:	429a      	cmp	r2, r3
 8005c1e:	d001      	beq.n	8005c24 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005c20:	2301      	movs	r3, #1
 8005c22:	e032      	b.n	8005c8a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f003 0304 	and.w	r3, r3, #4
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d008      	beq.n	8005c42 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005c30:	4b19      	ldr	r3, [pc, #100]	; (8005c98 <HAL_RCC_ClockConfig+0x1bc>)
 8005c32:	689b      	ldr	r3, [r3, #8]
 8005c34:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	68db      	ldr	r3, [r3, #12]
 8005c3c:	4916      	ldr	r1, [pc, #88]	; (8005c98 <HAL_RCC_ClockConfig+0x1bc>)
 8005c3e:	4313      	orrs	r3, r2
 8005c40:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f003 0308 	and.w	r3, r3, #8
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d009      	beq.n	8005c62 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005c4e:	4b12      	ldr	r3, [pc, #72]	; (8005c98 <HAL_RCC_ClockConfig+0x1bc>)
 8005c50:	689b      	ldr	r3, [r3, #8]
 8005c52:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	691b      	ldr	r3, [r3, #16]
 8005c5a:	00db      	lsls	r3, r3, #3
 8005c5c:	490e      	ldr	r1, [pc, #56]	; (8005c98 <HAL_RCC_ClockConfig+0x1bc>)
 8005c5e:	4313      	orrs	r3, r2
 8005c60:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005c62:	f000 f821 	bl	8005ca8 <HAL_RCC_GetSysClockFreq>
 8005c66:	4602      	mov	r2, r0
 8005c68:	4b0b      	ldr	r3, [pc, #44]	; (8005c98 <HAL_RCC_ClockConfig+0x1bc>)
 8005c6a:	689b      	ldr	r3, [r3, #8]
 8005c6c:	091b      	lsrs	r3, r3, #4
 8005c6e:	f003 030f 	and.w	r3, r3, #15
 8005c72:	490a      	ldr	r1, [pc, #40]	; (8005c9c <HAL_RCC_ClockConfig+0x1c0>)
 8005c74:	5ccb      	ldrb	r3, [r1, r3]
 8005c76:	fa22 f303 	lsr.w	r3, r2, r3
 8005c7a:	4a09      	ldr	r2, [pc, #36]	; (8005ca0 <HAL_RCC_ClockConfig+0x1c4>)
 8005c7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005c7e:	4b09      	ldr	r3, [pc, #36]	; (8005ca4 <HAL_RCC_ClockConfig+0x1c8>)
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	4618      	mov	r0, r3
 8005c84:	f001 f8de 	bl	8006e44 <HAL_InitTick>

  return HAL_OK;
 8005c88:	2300      	movs	r3, #0
}
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	3710      	adds	r7, #16
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	bd80      	pop	{r7, pc}
 8005c92:	bf00      	nop
 8005c94:	40023c00 	.word	0x40023c00
 8005c98:	40023800 	.word	0x40023800
 8005c9c:	08009598 	.word	0x08009598
 8005ca0:	20000018 	.word	0x20000018
 8005ca4:	20000024 	.word	0x20000024

08005ca8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005ca8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005cac:	b090      	sub	sp, #64	; 0x40
 8005cae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	637b      	str	r3, [r7, #52]	; 0x34
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005cb8:	2300      	movs	r3, #0
 8005cba:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005cc0:	4b59      	ldr	r3, [pc, #356]	; (8005e28 <HAL_RCC_GetSysClockFreq+0x180>)
 8005cc2:	689b      	ldr	r3, [r3, #8]
 8005cc4:	f003 030c 	and.w	r3, r3, #12
 8005cc8:	2b08      	cmp	r3, #8
 8005cca:	d00d      	beq.n	8005ce8 <HAL_RCC_GetSysClockFreq+0x40>
 8005ccc:	2b08      	cmp	r3, #8
 8005cce:	f200 80a1 	bhi.w	8005e14 <HAL_RCC_GetSysClockFreq+0x16c>
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d002      	beq.n	8005cdc <HAL_RCC_GetSysClockFreq+0x34>
 8005cd6:	2b04      	cmp	r3, #4
 8005cd8:	d003      	beq.n	8005ce2 <HAL_RCC_GetSysClockFreq+0x3a>
 8005cda:	e09b      	b.n	8005e14 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005cdc:	4b53      	ldr	r3, [pc, #332]	; (8005e2c <HAL_RCC_GetSysClockFreq+0x184>)
 8005cde:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8005ce0:	e09b      	b.n	8005e1a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005ce2:	4b53      	ldr	r3, [pc, #332]	; (8005e30 <HAL_RCC_GetSysClockFreq+0x188>)
 8005ce4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005ce6:	e098      	b.n	8005e1a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005ce8:	4b4f      	ldr	r3, [pc, #316]	; (8005e28 <HAL_RCC_GetSysClockFreq+0x180>)
 8005cea:	685b      	ldr	r3, [r3, #4]
 8005cec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005cf0:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005cf2:	4b4d      	ldr	r3, [pc, #308]	; (8005e28 <HAL_RCC_GetSysClockFreq+0x180>)
 8005cf4:	685b      	ldr	r3, [r3, #4]
 8005cf6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d028      	beq.n	8005d50 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005cfe:	4b4a      	ldr	r3, [pc, #296]	; (8005e28 <HAL_RCC_GetSysClockFreq+0x180>)
 8005d00:	685b      	ldr	r3, [r3, #4]
 8005d02:	099b      	lsrs	r3, r3, #6
 8005d04:	2200      	movs	r2, #0
 8005d06:	623b      	str	r3, [r7, #32]
 8005d08:	627a      	str	r2, [r7, #36]	; 0x24
 8005d0a:	6a3b      	ldr	r3, [r7, #32]
 8005d0c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005d10:	2100      	movs	r1, #0
 8005d12:	4b47      	ldr	r3, [pc, #284]	; (8005e30 <HAL_RCC_GetSysClockFreq+0x188>)
 8005d14:	fb03 f201 	mul.w	r2, r3, r1
 8005d18:	2300      	movs	r3, #0
 8005d1a:	fb00 f303 	mul.w	r3, r0, r3
 8005d1e:	4413      	add	r3, r2
 8005d20:	4a43      	ldr	r2, [pc, #268]	; (8005e30 <HAL_RCC_GetSysClockFreq+0x188>)
 8005d22:	fba0 1202 	umull	r1, r2, r0, r2
 8005d26:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005d28:	460a      	mov	r2, r1
 8005d2a:	62ba      	str	r2, [r7, #40]	; 0x28
 8005d2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d2e:	4413      	add	r3, r2
 8005d30:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005d32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d34:	2200      	movs	r2, #0
 8005d36:	61bb      	str	r3, [r7, #24]
 8005d38:	61fa      	str	r2, [r7, #28]
 8005d3a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005d3e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8005d42:	f7fa fee3 	bl	8000b0c <__aeabi_uldivmod>
 8005d46:	4602      	mov	r2, r0
 8005d48:	460b      	mov	r3, r1
 8005d4a:	4613      	mov	r3, r2
 8005d4c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005d4e:	e053      	b.n	8005df8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005d50:	4b35      	ldr	r3, [pc, #212]	; (8005e28 <HAL_RCC_GetSysClockFreq+0x180>)
 8005d52:	685b      	ldr	r3, [r3, #4]
 8005d54:	099b      	lsrs	r3, r3, #6
 8005d56:	2200      	movs	r2, #0
 8005d58:	613b      	str	r3, [r7, #16]
 8005d5a:	617a      	str	r2, [r7, #20]
 8005d5c:	693b      	ldr	r3, [r7, #16]
 8005d5e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005d62:	f04f 0b00 	mov.w	fp, #0
 8005d66:	4652      	mov	r2, sl
 8005d68:	465b      	mov	r3, fp
 8005d6a:	f04f 0000 	mov.w	r0, #0
 8005d6e:	f04f 0100 	mov.w	r1, #0
 8005d72:	0159      	lsls	r1, r3, #5
 8005d74:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005d78:	0150      	lsls	r0, r2, #5
 8005d7a:	4602      	mov	r2, r0
 8005d7c:	460b      	mov	r3, r1
 8005d7e:	ebb2 080a 	subs.w	r8, r2, sl
 8005d82:	eb63 090b 	sbc.w	r9, r3, fp
 8005d86:	f04f 0200 	mov.w	r2, #0
 8005d8a:	f04f 0300 	mov.w	r3, #0
 8005d8e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005d92:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005d96:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005d9a:	ebb2 0408 	subs.w	r4, r2, r8
 8005d9e:	eb63 0509 	sbc.w	r5, r3, r9
 8005da2:	f04f 0200 	mov.w	r2, #0
 8005da6:	f04f 0300 	mov.w	r3, #0
 8005daa:	00eb      	lsls	r3, r5, #3
 8005dac:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005db0:	00e2      	lsls	r2, r4, #3
 8005db2:	4614      	mov	r4, r2
 8005db4:	461d      	mov	r5, r3
 8005db6:	eb14 030a 	adds.w	r3, r4, sl
 8005dba:	603b      	str	r3, [r7, #0]
 8005dbc:	eb45 030b 	adc.w	r3, r5, fp
 8005dc0:	607b      	str	r3, [r7, #4]
 8005dc2:	f04f 0200 	mov.w	r2, #0
 8005dc6:	f04f 0300 	mov.w	r3, #0
 8005dca:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005dce:	4629      	mov	r1, r5
 8005dd0:	028b      	lsls	r3, r1, #10
 8005dd2:	4621      	mov	r1, r4
 8005dd4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005dd8:	4621      	mov	r1, r4
 8005dda:	028a      	lsls	r2, r1, #10
 8005ddc:	4610      	mov	r0, r2
 8005dde:	4619      	mov	r1, r3
 8005de0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005de2:	2200      	movs	r2, #0
 8005de4:	60bb      	str	r3, [r7, #8]
 8005de6:	60fa      	str	r2, [r7, #12]
 8005de8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005dec:	f7fa fe8e 	bl	8000b0c <__aeabi_uldivmod>
 8005df0:	4602      	mov	r2, r0
 8005df2:	460b      	mov	r3, r1
 8005df4:	4613      	mov	r3, r2
 8005df6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005df8:	4b0b      	ldr	r3, [pc, #44]	; (8005e28 <HAL_RCC_GetSysClockFreq+0x180>)
 8005dfa:	685b      	ldr	r3, [r3, #4]
 8005dfc:	0c1b      	lsrs	r3, r3, #16
 8005dfe:	f003 0303 	and.w	r3, r3, #3
 8005e02:	3301      	adds	r3, #1
 8005e04:	005b      	lsls	r3, r3, #1
 8005e06:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8005e08:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e10:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005e12:	e002      	b.n	8005e1a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005e14:	4b05      	ldr	r3, [pc, #20]	; (8005e2c <HAL_RCC_GetSysClockFreq+0x184>)
 8005e16:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005e18:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005e1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	3740      	adds	r7, #64	; 0x40
 8005e20:	46bd      	mov	sp, r7
 8005e22:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005e26:	bf00      	nop
 8005e28:	40023800 	.word	0x40023800
 8005e2c:	00f42400 	.word	0x00f42400
 8005e30:	017d7840 	.word	0x017d7840

08005e34 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005e34:	b480      	push	{r7}
 8005e36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005e38:	4b03      	ldr	r3, [pc, #12]	; (8005e48 <HAL_RCC_GetHCLKFreq+0x14>)
 8005e3a:	681b      	ldr	r3, [r3, #0]
}
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e44:	4770      	bx	lr
 8005e46:	bf00      	nop
 8005e48:	20000018 	.word	0x20000018

08005e4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005e50:	f7ff fff0 	bl	8005e34 <HAL_RCC_GetHCLKFreq>
 8005e54:	4602      	mov	r2, r0
 8005e56:	4b05      	ldr	r3, [pc, #20]	; (8005e6c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005e58:	689b      	ldr	r3, [r3, #8]
 8005e5a:	0a9b      	lsrs	r3, r3, #10
 8005e5c:	f003 0307 	and.w	r3, r3, #7
 8005e60:	4903      	ldr	r1, [pc, #12]	; (8005e70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005e62:	5ccb      	ldrb	r3, [r1, r3]
 8005e64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005e68:	4618      	mov	r0, r3
 8005e6a:	bd80      	pop	{r7, pc}
 8005e6c:	40023800 	.word	0x40023800
 8005e70:	080095a8 	.word	0x080095a8

08005e74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005e74:	b580      	push	{r7, lr}
 8005e76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005e78:	f7ff ffdc 	bl	8005e34 <HAL_RCC_GetHCLKFreq>
 8005e7c:	4602      	mov	r2, r0
 8005e7e:	4b05      	ldr	r3, [pc, #20]	; (8005e94 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005e80:	689b      	ldr	r3, [r3, #8]
 8005e82:	0b5b      	lsrs	r3, r3, #13
 8005e84:	f003 0307 	and.w	r3, r3, #7
 8005e88:	4903      	ldr	r1, [pc, #12]	; (8005e98 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005e8a:	5ccb      	ldrb	r3, [r1, r3]
 8005e8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005e90:	4618      	mov	r0, r3
 8005e92:	bd80      	pop	{r7, pc}
 8005e94:	40023800 	.word	0x40023800
 8005e98:	080095a8 	.word	0x080095a8

08005e9c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005e9c:	b480      	push	{r7}
 8005e9e:	b083      	sub	sp, #12
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
 8005ea4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	220f      	movs	r2, #15
 8005eaa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005eac:	4b12      	ldr	r3, [pc, #72]	; (8005ef8 <HAL_RCC_GetClockConfig+0x5c>)
 8005eae:	689b      	ldr	r3, [r3, #8]
 8005eb0:	f003 0203 	and.w	r2, r3, #3
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005eb8:	4b0f      	ldr	r3, [pc, #60]	; (8005ef8 <HAL_RCC_GetClockConfig+0x5c>)
 8005eba:	689b      	ldr	r3, [r3, #8]
 8005ebc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005ec4:	4b0c      	ldr	r3, [pc, #48]	; (8005ef8 <HAL_RCC_GetClockConfig+0x5c>)
 8005ec6:	689b      	ldr	r3, [r3, #8]
 8005ec8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005ed0:	4b09      	ldr	r3, [pc, #36]	; (8005ef8 <HAL_RCC_GetClockConfig+0x5c>)
 8005ed2:	689b      	ldr	r3, [r3, #8]
 8005ed4:	08db      	lsrs	r3, r3, #3
 8005ed6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005ede:	4b07      	ldr	r3, [pc, #28]	; (8005efc <HAL_RCC_GetClockConfig+0x60>)
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f003 0207 	and.w	r2, r3, #7
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	601a      	str	r2, [r3, #0]
}
 8005eea:	bf00      	nop
 8005eec:	370c      	adds	r7, #12
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef4:	4770      	bx	lr
 8005ef6:	bf00      	nop
 8005ef8:	40023800 	.word	0x40023800
 8005efc:	40023c00 	.word	0x40023c00

08005f00 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b082      	sub	sp, #8
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d101      	bne.n	8005f12 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005f0e:	2301      	movs	r3, #1
 8005f10:	e07b      	b.n	800600a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d108      	bne.n	8005f2c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	685b      	ldr	r3, [r3, #4]
 8005f1e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005f22:	d009      	beq.n	8005f38 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2200      	movs	r2, #0
 8005f28:	61da      	str	r2, [r3, #28]
 8005f2a:	e005      	b.n	8005f38 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2200      	movs	r2, #0
 8005f30:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2200      	movs	r2, #0
 8005f36:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005f44:	b2db      	uxtb	r3, r3
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d106      	bne.n	8005f58 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005f52:	6878      	ldr	r0, [r7, #4]
 8005f54:	f7fb fbc2 	bl	80016dc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2202      	movs	r2, #2
 8005f5c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	681a      	ldr	r2, [r3, #0]
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f6e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	685b      	ldr	r3, [r3, #4]
 8005f74:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	689b      	ldr	r3, [r3, #8]
 8005f7c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005f80:	431a      	orrs	r2, r3
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	68db      	ldr	r3, [r3, #12]
 8005f86:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005f8a:	431a      	orrs	r2, r3
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	691b      	ldr	r3, [r3, #16]
 8005f90:	f003 0302 	and.w	r3, r3, #2
 8005f94:	431a      	orrs	r2, r3
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	695b      	ldr	r3, [r3, #20]
 8005f9a:	f003 0301 	and.w	r3, r3, #1
 8005f9e:	431a      	orrs	r2, r3
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	699b      	ldr	r3, [r3, #24]
 8005fa4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005fa8:	431a      	orrs	r2, r3
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	69db      	ldr	r3, [r3, #28]
 8005fae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005fb2:	431a      	orrs	r2, r3
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	6a1b      	ldr	r3, [r3, #32]
 8005fb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fbc:	ea42 0103 	orr.w	r1, r2, r3
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fc4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	430a      	orrs	r2, r1
 8005fce:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	699b      	ldr	r3, [r3, #24]
 8005fd4:	0c1b      	lsrs	r3, r3, #16
 8005fd6:	f003 0104 	and.w	r1, r3, #4
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fde:	f003 0210 	and.w	r2, r3, #16
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	430a      	orrs	r2, r1
 8005fe8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	69da      	ldr	r2, [r3, #28]
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005ff8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2201      	movs	r2, #1
 8006004:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006008:	2300      	movs	r3, #0
}
 800600a:	4618      	mov	r0, r3
 800600c:	3708      	adds	r7, #8
 800600e:	46bd      	mov	sp, r7
 8006010:	bd80      	pop	{r7, pc}

08006012 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006012:	b580      	push	{r7, lr}
 8006014:	b088      	sub	sp, #32
 8006016:	af00      	add	r7, sp, #0
 8006018:	60f8      	str	r0, [r7, #12]
 800601a:	60b9      	str	r1, [r7, #8]
 800601c:	603b      	str	r3, [r7, #0]
 800601e:	4613      	mov	r3, r2
 8006020:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006022:	2300      	movs	r3, #0
 8006024:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800602c:	2b01      	cmp	r3, #1
 800602e:	d101      	bne.n	8006034 <HAL_SPI_Transmit+0x22>
 8006030:	2302      	movs	r3, #2
 8006032:	e126      	b.n	8006282 <HAL_SPI_Transmit+0x270>
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	2201      	movs	r2, #1
 8006038:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800603c:	f7fd ffd0 	bl	8003fe0 <HAL_GetTick>
 8006040:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006042:	88fb      	ldrh	r3, [r7, #6]
 8006044:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800604c:	b2db      	uxtb	r3, r3
 800604e:	2b01      	cmp	r3, #1
 8006050:	d002      	beq.n	8006058 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006052:	2302      	movs	r3, #2
 8006054:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006056:	e10b      	b.n	8006270 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006058:	68bb      	ldr	r3, [r7, #8]
 800605a:	2b00      	cmp	r3, #0
 800605c:	d002      	beq.n	8006064 <HAL_SPI_Transmit+0x52>
 800605e:	88fb      	ldrh	r3, [r7, #6]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d102      	bne.n	800606a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006064:	2301      	movs	r3, #1
 8006066:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006068:	e102      	b.n	8006270 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	2203      	movs	r2, #3
 800606e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	2200      	movs	r2, #0
 8006076:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	68ba      	ldr	r2, [r7, #8]
 800607c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	88fa      	ldrh	r2, [r7, #6]
 8006082:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	88fa      	ldrh	r2, [r7, #6]
 8006088:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	2200      	movs	r2, #0
 800608e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	2200      	movs	r2, #0
 8006094:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	2200      	movs	r2, #0
 800609a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	2200      	movs	r2, #0
 80060a0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	2200      	movs	r2, #0
 80060a6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	689b      	ldr	r3, [r3, #8]
 80060ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80060b0:	d10f      	bne.n	80060d2 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	681a      	ldr	r2, [r3, #0]
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80060c0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	681a      	ldr	r2, [r3, #0]
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80060d0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060dc:	2b40      	cmp	r3, #64	; 0x40
 80060de:	d007      	beq.n	80060f0 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	681a      	ldr	r2, [r3, #0]
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80060ee:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	68db      	ldr	r3, [r3, #12]
 80060f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80060f8:	d14b      	bne.n	8006192 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	685b      	ldr	r3, [r3, #4]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d002      	beq.n	8006108 <HAL_SPI_Transmit+0xf6>
 8006102:	8afb      	ldrh	r3, [r7, #22]
 8006104:	2b01      	cmp	r3, #1
 8006106:	d13e      	bne.n	8006186 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800610c:	881a      	ldrh	r2, [r3, #0]
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006118:	1c9a      	adds	r2, r3, #2
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006122:	b29b      	uxth	r3, r3
 8006124:	3b01      	subs	r3, #1
 8006126:	b29a      	uxth	r2, r3
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800612c:	e02b      	b.n	8006186 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	689b      	ldr	r3, [r3, #8]
 8006134:	f003 0302 	and.w	r3, r3, #2
 8006138:	2b02      	cmp	r3, #2
 800613a:	d112      	bne.n	8006162 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006140:	881a      	ldrh	r2, [r3, #0]
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800614c:	1c9a      	adds	r2, r3, #2
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006156:	b29b      	uxth	r3, r3
 8006158:	3b01      	subs	r3, #1
 800615a:	b29a      	uxth	r2, r3
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	86da      	strh	r2, [r3, #54]	; 0x36
 8006160:	e011      	b.n	8006186 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006162:	f7fd ff3d 	bl	8003fe0 <HAL_GetTick>
 8006166:	4602      	mov	r2, r0
 8006168:	69bb      	ldr	r3, [r7, #24]
 800616a:	1ad3      	subs	r3, r2, r3
 800616c:	683a      	ldr	r2, [r7, #0]
 800616e:	429a      	cmp	r2, r3
 8006170:	d803      	bhi.n	800617a <HAL_SPI_Transmit+0x168>
 8006172:	683b      	ldr	r3, [r7, #0]
 8006174:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006178:	d102      	bne.n	8006180 <HAL_SPI_Transmit+0x16e>
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	2b00      	cmp	r3, #0
 800617e:	d102      	bne.n	8006186 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8006180:	2303      	movs	r3, #3
 8006182:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006184:	e074      	b.n	8006270 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800618a:	b29b      	uxth	r3, r3
 800618c:	2b00      	cmp	r3, #0
 800618e:	d1ce      	bne.n	800612e <HAL_SPI_Transmit+0x11c>
 8006190:	e04c      	b.n	800622c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	685b      	ldr	r3, [r3, #4]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d002      	beq.n	80061a0 <HAL_SPI_Transmit+0x18e>
 800619a:	8afb      	ldrh	r3, [r7, #22]
 800619c:	2b01      	cmp	r3, #1
 800619e:	d140      	bne.n	8006222 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	330c      	adds	r3, #12
 80061aa:	7812      	ldrb	r2, [r2, #0]
 80061ac:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061b2:	1c5a      	adds	r2, r3, #1
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80061bc:	b29b      	uxth	r3, r3
 80061be:	3b01      	subs	r3, #1
 80061c0:	b29a      	uxth	r2, r3
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80061c6:	e02c      	b.n	8006222 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	689b      	ldr	r3, [r3, #8]
 80061ce:	f003 0302 	and.w	r3, r3, #2
 80061d2:	2b02      	cmp	r3, #2
 80061d4:	d113      	bne.n	80061fe <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	330c      	adds	r3, #12
 80061e0:	7812      	ldrb	r2, [r2, #0]
 80061e2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061e8:	1c5a      	adds	r2, r3, #1
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80061f2:	b29b      	uxth	r3, r3
 80061f4:	3b01      	subs	r3, #1
 80061f6:	b29a      	uxth	r2, r3
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	86da      	strh	r2, [r3, #54]	; 0x36
 80061fc:	e011      	b.n	8006222 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80061fe:	f7fd feef 	bl	8003fe0 <HAL_GetTick>
 8006202:	4602      	mov	r2, r0
 8006204:	69bb      	ldr	r3, [r7, #24]
 8006206:	1ad3      	subs	r3, r2, r3
 8006208:	683a      	ldr	r2, [r7, #0]
 800620a:	429a      	cmp	r2, r3
 800620c:	d803      	bhi.n	8006216 <HAL_SPI_Transmit+0x204>
 800620e:	683b      	ldr	r3, [r7, #0]
 8006210:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006214:	d102      	bne.n	800621c <HAL_SPI_Transmit+0x20a>
 8006216:	683b      	ldr	r3, [r7, #0]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d102      	bne.n	8006222 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800621c:	2303      	movs	r3, #3
 800621e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006220:	e026      	b.n	8006270 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006226:	b29b      	uxth	r3, r3
 8006228:	2b00      	cmp	r3, #0
 800622a:	d1cd      	bne.n	80061c8 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800622c:	69ba      	ldr	r2, [r7, #24]
 800622e:	6839      	ldr	r1, [r7, #0]
 8006230:	68f8      	ldr	r0, [r7, #12]
 8006232:	f000 f8b3 	bl	800639c <SPI_EndRxTxTransaction>
 8006236:	4603      	mov	r3, r0
 8006238:	2b00      	cmp	r3, #0
 800623a:	d002      	beq.n	8006242 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	2220      	movs	r2, #32
 8006240:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	689b      	ldr	r3, [r3, #8]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d10a      	bne.n	8006260 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800624a:	2300      	movs	r3, #0
 800624c:	613b      	str	r3, [r7, #16]
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	68db      	ldr	r3, [r3, #12]
 8006254:	613b      	str	r3, [r7, #16]
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	689b      	ldr	r3, [r3, #8]
 800625c:	613b      	str	r3, [r7, #16]
 800625e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006264:	2b00      	cmp	r3, #0
 8006266:	d002      	beq.n	800626e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8006268:	2301      	movs	r3, #1
 800626a:	77fb      	strb	r3, [r7, #31]
 800626c:	e000      	b.n	8006270 <HAL_SPI_Transmit+0x25e>
  }

error:
 800626e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	2201      	movs	r2, #1
 8006274:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	2200      	movs	r2, #0
 800627c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006280:	7ffb      	ldrb	r3, [r7, #31]
}
 8006282:	4618      	mov	r0, r3
 8006284:	3720      	adds	r7, #32
 8006286:	46bd      	mov	sp, r7
 8006288:	bd80      	pop	{r7, pc}
	...

0800628c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800628c:	b580      	push	{r7, lr}
 800628e:	b088      	sub	sp, #32
 8006290:	af00      	add	r7, sp, #0
 8006292:	60f8      	str	r0, [r7, #12]
 8006294:	60b9      	str	r1, [r7, #8]
 8006296:	603b      	str	r3, [r7, #0]
 8006298:	4613      	mov	r3, r2
 800629a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800629c:	f7fd fea0 	bl	8003fe0 <HAL_GetTick>
 80062a0:	4602      	mov	r2, r0
 80062a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062a4:	1a9b      	subs	r3, r3, r2
 80062a6:	683a      	ldr	r2, [r7, #0]
 80062a8:	4413      	add	r3, r2
 80062aa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80062ac:	f7fd fe98 	bl	8003fe0 <HAL_GetTick>
 80062b0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80062b2:	4b39      	ldr	r3, [pc, #228]	; (8006398 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	015b      	lsls	r3, r3, #5
 80062b8:	0d1b      	lsrs	r3, r3, #20
 80062ba:	69fa      	ldr	r2, [r7, #28]
 80062bc:	fb02 f303 	mul.w	r3, r2, r3
 80062c0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80062c2:	e054      	b.n	800636e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062ca:	d050      	beq.n	800636e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80062cc:	f7fd fe88 	bl	8003fe0 <HAL_GetTick>
 80062d0:	4602      	mov	r2, r0
 80062d2:	69bb      	ldr	r3, [r7, #24]
 80062d4:	1ad3      	subs	r3, r2, r3
 80062d6:	69fa      	ldr	r2, [r7, #28]
 80062d8:	429a      	cmp	r2, r3
 80062da:	d902      	bls.n	80062e2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80062dc:	69fb      	ldr	r3, [r7, #28]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d13d      	bne.n	800635e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	685a      	ldr	r2, [r3, #4]
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80062f0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	685b      	ldr	r3, [r3, #4]
 80062f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80062fa:	d111      	bne.n	8006320 <SPI_WaitFlagStateUntilTimeout+0x94>
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	689b      	ldr	r3, [r3, #8]
 8006300:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006304:	d004      	beq.n	8006310 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	689b      	ldr	r3, [r3, #8]
 800630a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800630e:	d107      	bne.n	8006320 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	681a      	ldr	r2, [r3, #0]
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800631e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006324:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006328:	d10f      	bne.n	800634a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	681a      	ldr	r2, [r3, #0]
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006338:	601a      	str	r2, [r3, #0]
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	681a      	ldr	r2, [r3, #0]
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006348:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	2201      	movs	r2, #1
 800634e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	2200      	movs	r2, #0
 8006356:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800635a:	2303      	movs	r3, #3
 800635c:	e017      	b.n	800638e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800635e:	697b      	ldr	r3, [r7, #20]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d101      	bne.n	8006368 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006364:	2300      	movs	r3, #0
 8006366:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006368:	697b      	ldr	r3, [r7, #20]
 800636a:	3b01      	subs	r3, #1
 800636c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	689a      	ldr	r2, [r3, #8]
 8006374:	68bb      	ldr	r3, [r7, #8]
 8006376:	4013      	ands	r3, r2
 8006378:	68ba      	ldr	r2, [r7, #8]
 800637a:	429a      	cmp	r2, r3
 800637c:	bf0c      	ite	eq
 800637e:	2301      	moveq	r3, #1
 8006380:	2300      	movne	r3, #0
 8006382:	b2db      	uxtb	r3, r3
 8006384:	461a      	mov	r2, r3
 8006386:	79fb      	ldrb	r3, [r7, #7]
 8006388:	429a      	cmp	r2, r3
 800638a:	d19b      	bne.n	80062c4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800638c:	2300      	movs	r3, #0
}
 800638e:	4618      	mov	r0, r3
 8006390:	3720      	adds	r7, #32
 8006392:	46bd      	mov	sp, r7
 8006394:	bd80      	pop	{r7, pc}
 8006396:	bf00      	nop
 8006398:	20000018 	.word	0x20000018

0800639c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800639c:	b580      	push	{r7, lr}
 800639e:	b088      	sub	sp, #32
 80063a0:	af02      	add	r7, sp, #8
 80063a2:	60f8      	str	r0, [r7, #12]
 80063a4:	60b9      	str	r1, [r7, #8]
 80063a6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80063a8:	4b1b      	ldr	r3, [pc, #108]	; (8006418 <SPI_EndRxTxTransaction+0x7c>)
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	4a1b      	ldr	r2, [pc, #108]	; (800641c <SPI_EndRxTxTransaction+0x80>)
 80063ae:	fba2 2303 	umull	r2, r3, r2, r3
 80063b2:	0d5b      	lsrs	r3, r3, #21
 80063b4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80063b8:	fb02 f303 	mul.w	r3, r2, r3
 80063bc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	685b      	ldr	r3, [r3, #4]
 80063c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80063c6:	d112      	bne.n	80063ee <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	9300      	str	r3, [sp, #0]
 80063cc:	68bb      	ldr	r3, [r7, #8]
 80063ce:	2200      	movs	r2, #0
 80063d0:	2180      	movs	r1, #128	; 0x80
 80063d2:	68f8      	ldr	r0, [r7, #12]
 80063d4:	f7ff ff5a 	bl	800628c <SPI_WaitFlagStateUntilTimeout>
 80063d8:	4603      	mov	r3, r0
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d016      	beq.n	800640c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063e2:	f043 0220 	orr.w	r2, r3, #32
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80063ea:	2303      	movs	r3, #3
 80063ec:	e00f      	b.n	800640e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80063ee:	697b      	ldr	r3, [r7, #20]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d00a      	beq.n	800640a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80063f4:	697b      	ldr	r3, [r7, #20]
 80063f6:	3b01      	subs	r3, #1
 80063f8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	689b      	ldr	r3, [r3, #8]
 8006400:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006404:	2b80      	cmp	r3, #128	; 0x80
 8006406:	d0f2      	beq.n	80063ee <SPI_EndRxTxTransaction+0x52>
 8006408:	e000      	b.n	800640c <SPI_EndRxTxTransaction+0x70>
        break;
 800640a:	bf00      	nop
  }

  return HAL_OK;
 800640c:	2300      	movs	r3, #0
}
 800640e:	4618      	mov	r0, r3
 8006410:	3718      	adds	r7, #24
 8006412:	46bd      	mov	sp, r7
 8006414:	bd80      	pop	{r7, pc}
 8006416:	bf00      	nop
 8006418:	20000018 	.word	0x20000018
 800641c:	165e9f81 	.word	0x165e9f81

08006420 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006420:	b580      	push	{r7, lr}
 8006422:	b082      	sub	sp, #8
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2b00      	cmp	r3, #0
 800642c:	d101      	bne.n	8006432 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800642e:	2301      	movs	r3, #1
 8006430:	e041      	b.n	80064b6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006438:	b2db      	uxtb	r3, r3
 800643a:	2b00      	cmp	r3, #0
 800643c:	d106      	bne.n	800644c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	2200      	movs	r2, #0
 8006442:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006446:	6878      	ldr	r0, [r7, #4]
 8006448:	f7fb f990 	bl	800176c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2202      	movs	r2, #2
 8006450:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681a      	ldr	r2, [r3, #0]
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	3304      	adds	r3, #4
 800645c:	4619      	mov	r1, r3
 800645e:	4610      	mov	r0, r2
 8006460:	f000 fb26 	bl	8006ab0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2201      	movs	r2, #1
 8006468:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2201      	movs	r2, #1
 8006470:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2201      	movs	r2, #1
 8006478:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2201      	movs	r2, #1
 8006480:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2201      	movs	r2, #1
 8006488:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2201      	movs	r2, #1
 8006490:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2201      	movs	r2, #1
 8006498:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2201      	movs	r2, #1
 80064a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2201      	movs	r2, #1
 80064a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2201      	movs	r2, #1
 80064b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80064b4:	2300      	movs	r3, #0
}
 80064b6:	4618      	mov	r0, r3
 80064b8:	3708      	adds	r7, #8
 80064ba:	46bd      	mov	sp, r7
 80064bc:	bd80      	pop	{r7, pc}
	...

080064c0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80064c0:	b480      	push	{r7}
 80064c2:	b085      	sub	sp, #20
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064ce:	b2db      	uxtb	r3, r3
 80064d0:	2b01      	cmp	r3, #1
 80064d2:	d001      	beq.n	80064d8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80064d4:	2301      	movs	r3, #1
 80064d6:	e046      	b.n	8006566 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2202      	movs	r2, #2
 80064dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	4a23      	ldr	r2, [pc, #140]	; (8006574 <HAL_TIM_Base_Start+0xb4>)
 80064e6:	4293      	cmp	r3, r2
 80064e8:	d022      	beq.n	8006530 <HAL_TIM_Base_Start+0x70>
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064f2:	d01d      	beq.n	8006530 <HAL_TIM_Base_Start+0x70>
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	4a1f      	ldr	r2, [pc, #124]	; (8006578 <HAL_TIM_Base_Start+0xb8>)
 80064fa:	4293      	cmp	r3, r2
 80064fc:	d018      	beq.n	8006530 <HAL_TIM_Base_Start+0x70>
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	4a1e      	ldr	r2, [pc, #120]	; (800657c <HAL_TIM_Base_Start+0xbc>)
 8006504:	4293      	cmp	r3, r2
 8006506:	d013      	beq.n	8006530 <HAL_TIM_Base_Start+0x70>
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	4a1c      	ldr	r2, [pc, #112]	; (8006580 <HAL_TIM_Base_Start+0xc0>)
 800650e:	4293      	cmp	r3, r2
 8006510:	d00e      	beq.n	8006530 <HAL_TIM_Base_Start+0x70>
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	4a1b      	ldr	r2, [pc, #108]	; (8006584 <HAL_TIM_Base_Start+0xc4>)
 8006518:	4293      	cmp	r3, r2
 800651a:	d009      	beq.n	8006530 <HAL_TIM_Base_Start+0x70>
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	4a19      	ldr	r2, [pc, #100]	; (8006588 <HAL_TIM_Base_Start+0xc8>)
 8006522:	4293      	cmp	r3, r2
 8006524:	d004      	beq.n	8006530 <HAL_TIM_Base_Start+0x70>
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	4a18      	ldr	r2, [pc, #96]	; (800658c <HAL_TIM_Base_Start+0xcc>)
 800652c:	4293      	cmp	r3, r2
 800652e:	d111      	bne.n	8006554 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	689b      	ldr	r3, [r3, #8]
 8006536:	f003 0307 	and.w	r3, r3, #7
 800653a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	2b06      	cmp	r3, #6
 8006540:	d010      	beq.n	8006564 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	681a      	ldr	r2, [r3, #0]
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f042 0201 	orr.w	r2, r2, #1
 8006550:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006552:	e007      	b.n	8006564 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	681a      	ldr	r2, [r3, #0]
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f042 0201 	orr.w	r2, r2, #1
 8006562:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006564:	2300      	movs	r3, #0
}
 8006566:	4618      	mov	r0, r3
 8006568:	3714      	adds	r7, #20
 800656a:	46bd      	mov	sp, r7
 800656c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006570:	4770      	bx	lr
 8006572:	bf00      	nop
 8006574:	40010000 	.word	0x40010000
 8006578:	40000400 	.word	0x40000400
 800657c:	40000800 	.word	0x40000800
 8006580:	40000c00 	.word	0x40000c00
 8006584:	40010400 	.word	0x40010400
 8006588:	40014000 	.word	0x40014000
 800658c:	40001800 	.word	0x40001800

08006590 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8006590:	b480      	push	{r7}
 8006592:	b083      	sub	sp, #12
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	6a1a      	ldr	r2, [r3, #32]
 800659e:	f241 1311 	movw	r3, #4369	; 0x1111
 80065a2:	4013      	ands	r3, r2
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d10f      	bne.n	80065c8 <HAL_TIM_Base_Stop+0x38>
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	6a1a      	ldr	r2, [r3, #32]
 80065ae:	f240 4344 	movw	r3, #1092	; 0x444
 80065b2:	4013      	ands	r3, r2
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d107      	bne.n	80065c8 <HAL_TIM_Base_Stop+0x38>
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	681a      	ldr	r2, [r3, #0]
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	f022 0201 	bic.w	r2, r2, #1
 80065c6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2201      	movs	r2, #1
 80065cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80065d0:	2300      	movs	r3, #0
}
 80065d2:	4618      	mov	r0, r3
 80065d4:	370c      	adds	r7, #12
 80065d6:	46bd      	mov	sp, r7
 80065d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065dc:	4770      	bx	lr
	...

080065e0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80065e0:	b480      	push	{r7}
 80065e2:	b085      	sub	sp, #20
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065ee:	b2db      	uxtb	r3, r3
 80065f0:	2b01      	cmp	r3, #1
 80065f2:	d001      	beq.n	80065f8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80065f4:	2301      	movs	r3, #1
 80065f6:	e04e      	b.n	8006696 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2202      	movs	r2, #2
 80065fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	68da      	ldr	r2, [r3, #12]
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f042 0201 	orr.w	r2, r2, #1
 800660e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	4a23      	ldr	r2, [pc, #140]	; (80066a4 <HAL_TIM_Base_Start_IT+0xc4>)
 8006616:	4293      	cmp	r3, r2
 8006618:	d022      	beq.n	8006660 <HAL_TIM_Base_Start_IT+0x80>
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006622:	d01d      	beq.n	8006660 <HAL_TIM_Base_Start_IT+0x80>
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	4a1f      	ldr	r2, [pc, #124]	; (80066a8 <HAL_TIM_Base_Start_IT+0xc8>)
 800662a:	4293      	cmp	r3, r2
 800662c:	d018      	beq.n	8006660 <HAL_TIM_Base_Start_IT+0x80>
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	4a1e      	ldr	r2, [pc, #120]	; (80066ac <HAL_TIM_Base_Start_IT+0xcc>)
 8006634:	4293      	cmp	r3, r2
 8006636:	d013      	beq.n	8006660 <HAL_TIM_Base_Start_IT+0x80>
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	4a1c      	ldr	r2, [pc, #112]	; (80066b0 <HAL_TIM_Base_Start_IT+0xd0>)
 800663e:	4293      	cmp	r3, r2
 8006640:	d00e      	beq.n	8006660 <HAL_TIM_Base_Start_IT+0x80>
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	4a1b      	ldr	r2, [pc, #108]	; (80066b4 <HAL_TIM_Base_Start_IT+0xd4>)
 8006648:	4293      	cmp	r3, r2
 800664a:	d009      	beq.n	8006660 <HAL_TIM_Base_Start_IT+0x80>
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	4a19      	ldr	r2, [pc, #100]	; (80066b8 <HAL_TIM_Base_Start_IT+0xd8>)
 8006652:	4293      	cmp	r3, r2
 8006654:	d004      	beq.n	8006660 <HAL_TIM_Base_Start_IT+0x80>
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	4a18      	ldr	r2, [pc, #96]	; (80066bc <HAL_TIM_Base_Start_IT+0xdc>)
 800665c:	4293      	cmp	r3, r2
 800665e:	d111      	bne.n	8006684 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	689b      	ldr	r3, [r3, #8]
 8006666:	f003 0307 	and.w	r3, r3, #7
 800666a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	2b06      	cmp	r3, #6
 8006670:	d010      	beq.n	8006694 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	681a      	ldr	r2, [r3, #0]
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f042 0201 	orr.w	r2, r2, #1
 8006680:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006682:	e007      	b.n	8006694 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	681a      	ldr	r2, [r3, #0]
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	f042 0201 	orr.w	r2, r2, #1
 8006692:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006694:	2300      	movs	r3, #0
}
 8006696:	4618      	mov	r0, r3
 8006698:	3714      	adds	r7, #20
 800669a:	46bd      	mov	sp, r7
 800669c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a0:	4770      	bx	lr
 80066a2:	bf00      	nop
 80066a4:	40010000 	.word	0x40010000
 80066a8:	40000400 	.word	0x40000400
 80066ac:	40000800 	.word	0x40000800
 80066b0:	40000c00 	.word	0x40000c00
 80066b4:	40010400 	.word	0x40010400
 80066b8:	40014000 	.word	0x40014000
 80066bc:	40001800 	.word	0x40001800

080066c0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80066c0:	b580      	push	{r7, lr}
 80066c2:	b082      	sub	sp, #8
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	691b      	ldr	r3, [r3, #16]
 80066ce:	f003 0302 	and.w	r3, r3, #2
 80066d2:	2b02      	cmp	r3, #2
 80066d4:	d122      	bne.n	800671c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	68db      	ldr	r3, [r3, #12]
 80066dc:	f003 0302 	and.w	r3, r3, #2
 80066e0:	2b02      	cmp	r3, #2
 80066e2:	d11b      	bne.n	800671c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f06f 0202 	mvn.w	r2, #2
 80066ec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	2201      	movs	r2, #1
 80066f2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	699b      	ldr	r3, [r3, #24]
 80066fa:	f003 0303 	and.w	r3, r3, #3
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d003      	beq.n	800670a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006702:	6878      	ldr	r0, [r7, #4]
 8006704:	f000 f9b5 	bl	8006a72 <HAL_TIM_IC_CaptureCallback>
 8006708:	e005      	b.n	8006716 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800670a:	6878      	ldr	r0, [r7, #4]
 800670c:	f000 f9a7 	bl	8006a5e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006710:	6878      	ldr	r0, [r7, #4]
 8006712:	f000 f9b8 	bl	8006a86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	2200      	movs	r2, #0
 800671a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	691b      	ldr	r3, [r3, #16]
 8006722:	f003 0304 	and.w	r3, r3, #4
 8006726:	2b04      	cmp	r3, #4
 8006728:	d122      	bne.n	8006770 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	68db      	ldr	r3, [r3, #12]
 8006730:	f003 0304 	and.w	r3, r3, #4
 8006734:	2b04      	cmp	r3, #4
 8006736:	d11b      	bne.n	8006770 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f06f 0204 	mvn.w	r2, #4
 8006740:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	2202      	movs	r2, #2
 8006746:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	699b      	ldr	r3, [r3, #24]
 800674e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006752:	2b00      	cmp	r3, #0
 8006754:	d003      	beq.n	800675e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006756:	6878      	ldr	r0, [r7, #4]
 8006758:	f000 f98b 	bl	8006a72 <HAL_TIM_IC_CaptureCallback>
 800675c:	e005      	b.n	800676a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800675e:	6878      	ldr	r0, [r7, #4]
 8006760:	f000 f97d 	bl	8006a5e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006764:	6878      	ldr	r0, [r7, #4]
 8006766:	f000 f98e 	bl	8006a86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	2200      	movs	r2, #0
 800676e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	691b      	ldr	r3, [r3, #16]
 8006776:	f003 0308 	and.w	r3, r3, #8
 800677a:	2b08      	cmp	r3, #8
 800677c:	d122      	bne.n	80067c4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	68db      	ldr	r3, [r3, #12]
 8006784:	f003 0308 	and.w	r3, r3, #8
 8006788:	2b08      	cmp	r3, #8
 800678a:	d11b      	bne.n	80067c4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	f06f 0208 	mvn.w	r2, #8
 8006794:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	2204      	movs	r2, #4
 800679a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	69db      	ldr	r3, [r3, #28]
 80067a2:	f003 0303 	and.w	r3, r3, #3
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d003      	beq.n	80067b2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80067aa:	6878      	ldr	r0, [r7, #4]
 80067ac:	f000 f961 	bl	8006a72 <HAL_TIM_IC_CaptureCallback>
 80067b0:	e005      	b.n	80067be <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80067b2:	6878      	ldr	r0, [r7, #4]
 80067b4:	f000 f953 	bl	8006a5e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80067b8:	6878      	ldr	r0, [r7, #4]
 80067ba:	f000 f964 	bl	8006a86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2200      	movs	r2, #0
 80067c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	691b      	ldr	r3, [r3, #16]
 80067ca:	f003 0310 	and.w	r3, r3, #16
 80067ce:	2b10      	cmp	r3, #16
 80067d0:	d122      	bne.n	8006818 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	68db      	ldr	r3, [r3, #12]
 80067d8:	f003 0310 	and.w	r3, r3, #16
 80067dc:	2b10      	cmp	r3, #16
 80067de:	d11b      	bne.n	8006818 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f06f 0210 	mvn.w	r2, #16
 80067e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	2208      	movs	r2, #8
 80067ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	69db      	ldr	r3, [r3, #28]
 80067f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d003      	beq.n	8006806 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80067fe:	6878      	ldr	r0, [r7, #4]
 8006800:	f000 f937 	bl	8006a72 <HAL_TIM_IC_CaptureCallback>
 8006804:	e005      	b.n	8006812 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006806:	6878      	ldr	r0, [r7, #4]
 8006808:	f000 f929 	bl	8006a5e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800680c:	6878      	ldr	r0, [r7, #4]
 800680e:	f000 f93a 	bl	8006a86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	2200      	movs	r2, #0
 8006816:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	691b      	ldr	r3, [r3, #16]
 800681e:	f003 0301 	and.w	r3, r3, #1
 8006822:	2b01      	cmp	r3, #1
 8006824:	d10e      	bne.n	8006844 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	68db      	ldr	r3, [r3, #12]
 800682c:	f003 0301 	and.w	r3, r3, #1
 8006830:	2b01      	cmp	r3, #1
 8006832:	d107      	bne.n	8006844 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	f06f 0201 	mvn.w	r2, #1
 800683c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800683e:	6878      	ldr	r0, [r7, #4]
 8006840:	f000 fb7c 	bl	8006f3c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	691b      	ldr	r3, [r3, #16]
 800684a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800684e:	2b80      	cmp	r3, #128	; 0x80
 8006850:	d10e      	bne.n	8006870 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	68db      	ldr	r3, [r3, #12]
 8006858:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800685c:	2b80      	cmp	r3, #128	; 0x80
 800685e:	d107      	bne.n	8006870 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006868:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800686a:	6878      	ldr	r0, [r7, #4]
 800686c:	f000 fae0 	bl	8006e30 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	691b      	ldr	r3, [r3, #16]
 8006876:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800687a:	2b40      	cmp	r3, #64	; 0x40
 800687c:	d10e      	bne.n	800689c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	68db      	ldr	r3, [r3, #12]
 8006884:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006888:	2b40      	cmp	r3, #64	; 0x40
 800688a:	d107      	bne.n	800689c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006894:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006896:	6878      	ldr	r0, [r7, #4]
 8006898:	f000 f8ff 	bl	8006a9a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	691b      	ldr	r3, [r3, #16]
 80068a2:	f003 0320 	and.w	r3, r3, #32
 80068a6:	2b20      	cmp	r3, #32
 80068a8:	d10e      	bne.n	80068c8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	68db      	ldr	r3, [r3, #12]
 80068b0:	f003 0320 	and.w	r3, r3, #32
 80068b4:	2b20      	cmp	r3, #32
 80068b6:	d107      	bne.n	80068c8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f06f 0220 	mvn.w	r2, #32
 80068c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80068c2:	6878      	ldr	r0, [r7, #4]
 80068c4:	f000 faaa 	bl	8006e1c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80068c8:	bf00      	nop
 80068ca:	3708      	adds	r7, #8
 80068cc:	46bd      	mov	sp, r7
 80068ce:	bd80      	pop	{r7, pc}

080068d0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b084      	sub	sp, #16
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
 80068d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80068da:	2300      	movs	r3, #0
 80068dc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80068e4:	2b01      	cmp	r3, #1
 80068e6:	d101      	bne.n	80068ec <HAL_TIM_ConfigClockSource+0x1c>
 80068e8:	2302      	movs	r3, #2
 80068ea:	e0b4      	b.n	8006a56 <HAL_TIM_ConfigClockSource+0x186>
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2201      	movs	r2, #1
 80068f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	2202      	movs	r2, #2
 80068f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	689b      	ldr	r3, [r3, #8]
 8006902:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006904:	68bb      	ldr	r3, [r7, #8]
 8006906:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800690a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800690c:	68bb      	ldr	r3, [r7, #8]
 800690e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006912:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	68ba      	ldr	r2, [r7, #8]
 800691a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006924:	d03e      	beq.n	80069a4 <HAL_TIM_ConfigClockSource+0xd4>
 8006926:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800692a:	f200 8087 	bhi.w	8006a3c <HAL_TIM_ConfigClockSource+0x16c>
 800692e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006932:	f000 8086 	beq.w	8006a42 <HAL_TIM_ConfigClockSource+0x172>
 8006936:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800693a:	d87f      	bhi.n	8006a3c <HAL_TIM_ConfigClockSource+0x16c>
 800693c:	2b70      	cmp	r3, #112	; 0x70
 800693e:	d01a      	beq.n	8006976 <HAL_TIM_ConfigClockSource+0xa6>
 8006940:	2b70      	cmp	r3, #112	; 0x70
 8006942:	d87b      	bhi.n	8006a3c <HAL_TIM_ConfigClockSource+0x16c>
 8006944:	2b60      	cmp	r3, #96	; 0x60
 8006946:	d050      	beq.n	80069ea <HAL_TIM_ConfigClockSource+0x11a>
 8006948:	2b60      	cmp	r3, #96	; 0x60
 800694a:	d877      	bhi.n	8006a3c <HAL_TIM_ConfigClockSource+0x16c>
 800694c:	2b50      	cmp	r3, #80	; 0x50
 800694e:	d03c      	beq.n	80069ca <HAL_TIM_ConfigClockSource+0xfa>
 8006950:	2b50      	cmp	r3, #80	; 0x50
 8006952:	d873      	bhi.n	8006a3c <HAL_TIM_ConfigClockSource+0x16c>
 8006954:	2b40      	cmp	r3, #64	; 0x40
 8006956:	d058      	beq.n	8006a0a <HAL_TIM_ConfigClockSource+0x13a>
 8006958:	2b40      	cmp	r3, #64	; 0x40
 800695a:	d86f      	bhi.n	8006a3c <HAL_TIM_ConfigClockSource+0x16c>
 800695c:	2b30      	cmp	r3, #48	; 0x30
 800695e:	d064      	beq.n	8006a2a <HAL_TIM_ConfigClockSource+0x15a>
 8006960:	2b30      	cmp	r3, #48	; 0x30
 8006962:	d86b      	bhi.n	8006a3c <HAL_TIM_ConfigClockSource+0x16c>
 8006964:	2b20      	cmp	r3, #32
 8006966:	d060      	beq.n	8006a2a <HAL_TIM_ConfigClockSource+0x15a>
 8006968:	2b20      	cmp	r3, #32
 800696a:	d867      	bhi.n	8006a3c <HAL_TIM_ConfigClockSource+0x16c>
 800696c:	2b00      	cmp	r3, #0
 800696e:	d05c      	beq.n	8006a2a <HAL_TIM_ConfigClockSource+0x15a>
 8006970:	2b10      	cmp	r3, #16
 8006972:	d05a      	beq.n	8006a2a <HAL_TIM_ConfigClockSource+0x15a>
 8006974:	e062      	b.n	8006a3c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	6818      	ldr	r0, [r3, #0]
 800697a:	683b      	ldr	r3, [r7, #0]
 800697c:	6899      	ldr	r1, [r3, #8]
 800697e:	683b      	ldr	r3, [r7, #0]
 8006980:	685a      	ldr	r2, [r3, #4]
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	68db      	ldr	r3, [r3, #12]
 8006986:	f000 f9ad 	bl	8006ce4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	689b      	ldr	r3, [r3, #8]
 8006990:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006992:	68bb      	ldr	r3, [r7, #8]
 8006994:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006998:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	68ba      	ldr	r2, [r7, #8]
 80069a0:	609a      	str	r2, [r3, #8]
      break;
 80069a2:	e04f      	b.n	8006a44 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	6818      	ldr	r0, [r3, #0]
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	6899      	ldr	r1, [r3, #8]
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	685a      	ldr	r2, [r3, #4]
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	68db      	ldr	r3, [r3, #12]
 80069b4:	f000 f996 	bl	8006ce4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	689a      	ldr	r2, [r3, #8]
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80069c6:	609a      	str	r2, [r3, #8]
      break;
 80069c8:	e03c      	b.n	8006a44 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	6818      	ldr	r0, [r3, #0]
 80069ce:	683b      	ldr	r3, [r7, #0]
 80069d0:	6859      	ldr	r1, [r3, #4]
 80069d2:	683b      	ldr	r3, [r7, #0]
 80069d4:	68db      	ldr	r3, [r3, #12]
 80069d6:	461a      	mov	r2, r3
 80069d8:	f000 f90a 	bl	8006bf0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	2150      	movs	r1, #80	; 0x50
 80069e2:	4618      	mov	r0, r3
 80069e4:	f000 f963 	bl	8006cae <TIM_ITRx_SetConfig>
      break;
 80069e8:	e02c      	b.n	8006a44 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	6818      	ldr	r0, [r3, #0]
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	6859      	ldr	r1, [r3, #4]
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	68db      	ldr	r3, [r3, #12]
 80069f6:	461a      	mov	r2, r3
 80069f8:	f000 f929 	bl	8006c4e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	2160      	movs	r1, #96	; 0x60
 8006a02:	4618      	mov	r0, r3
 8006a04:	f000 f953 	bl	8006cae <TIM_ITRx_SetConfig>
      break;
 8006a08:	e01c      	b.n	8006a44 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	6818      	ldr	r0, [r3, #0]
 8006a0e:	683b      	ldr	r3, [r7, #0]
 8006a10:	6859      	ldr	r1, [r3, #4]
 8006a12:	683b      	ldr	r3, [r7, #0]
 8006a14:	68db      	ldr	r3, [r3, #12]
 8006a16:	461a      	mov	r2, r3
 8006a18:	f000 f8ea 	bl	8006bf0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	2140      	movs	r1, #64	; 0x40
 8006a22:	4618      	mov	r0, r3
 8006a24:	f000 f943 	bl	8006cae <TIM_ITRx_SetConfig>
      break;
 8006a28:	e00c      	b.n	8006a44 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681a      	ldr	r2, [r3, #0]
 8006a2e:	683b      	ldr	r3, [r7, #0]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	4619      	mov	r1, r3
 8006a34:	4610      	mov	r0, r2
 8006a36:	f000 f93a 	bl	8006cae <TIM_ITRx_SetConfig>
      break;
 8006a3a:	e003      	b.n	8006a44 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006a3c:	2301      	movs	r3, #1
 8006a3e:	73fb      	strb	r3, [r7, #15]
      break;
 8006a40:	e000      	b.n	8006a44 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006a42:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2201      	movs	r2, #1
 8006a48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2200      	movs	r2, #0
 8006a50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006a54:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a56:	4618      	mov	r0, r3
 8006a58:	3710      	adds	r7, #16
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	bd80      	pop	{r7, pc}

08006a5e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006a5e:	b480      	push	{r7}
 8006a60:	b083      	sub	sp, #12
 8006a62:	af00      	add	r7, sp, #0
 8006a64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006a66:	bf00      	nop
 8006a68:	370c      	adds	r7, #12
 8006a6a:	46bd      	mov	sp, r7
 8006a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a70:	4770      	bx	lr

08006a72 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006a72:	b480      	push	{r7}
 8006a74:	b083      	sub	sp, #12
 8006a76:	af00      	add	r7, sp, #0
 8006a78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006a7a:	bf00      	nop
 8006a7c:	370c      	adds	r7, #12
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a84:	4770      	bx	lr

08006a86 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006a86:	b480      	push	{r7}
 8006a88:	b083      	sub	sp, #12
 8006a8a:	af00      	add	r7, sp, #0
 8006a8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006a8e:	bf00      	nop
 8006a90:	370c      	adds	r7, #12
 8006a92:	46bd      	mov	sp, r7
 8006a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a98:	4770      	bx	lr

08006a9a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006a9a:	b480      	push	{r7}
 8006a9c:	b083      	sub	sp, #12
 8006a9e:	af00      	add	r7, sp, #0
 8006aa0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006aa2:	bf00      	nop
 8006aa4:	370c      	adds	r7, #12
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aac:	4770      	bx	lr
	...

08006ab0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006ab0:	b480      	push	{r7}
 8006ab2:	b085      	sub	sp, #20
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
 8006ab8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	4a40      	ldr	r2, [pc, #256]	; (8006bc4 <TIM_Base_SetConfig+0x114>)
 8006ac4:	4293      	cmp	r3, r2
 8006ac6:	d013      	beq.n	8006af0 <TIM_Base_SetConfig+0x40>
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ace:	d00f      	beq.n	8006af0 <TIM_Base_SetConfig+0x40>
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	4a3d      	ldr	r2, [pc, #244]	; (8006bc8 <TIM_Base_SetConfig+0x118>)
 8006ad4:	4293      	cmp	r3, r2
 8006ad6:	d00b      	beq.n	8006af0 <TIM_Base_SetConfig+0x40>
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	4a3c      	ldr	r2, [pc, #240]	; (8006bcc <TIM_Base_SetConfig+0x11c>)
 8006adc:	4293      	cmp	r3, r2
 8006ade:	d007      	beq.n	8006af0 <TIM_Base_SetConfig+0x40>
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	4a3b      	ldr	r2, [pc, #236]	; (8006bd0 <TIM_Base_SetConfig+0x120>)
 8006ae4:	4293      	cmp	r3, r2
 8006ae6:	d003      	beq.n	8006af0 <TIM_Base_SetConfig+0x40>
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	4a3a      	ldr	r2, [pc, #232]	; (8006bd4 <TIM_Base_SetConfig+0x124>)
 8006aec:	4293      	cmp	r3, r2
 8006aee:	d108      	bne.n	8006b02 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006af6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006af8:	683b      	ldr	r3, [r7, #0]
 8006afa:	685b      	ldr	r3, [r3, #4]
 8006afc:	68fa      	ldr	r2, [r7, #12]
 8006afe:	4313      	orrs	r3, r2
 8006b00:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	4a2f      	ldr	r2, [pc, #188]	; (8006bc4 <TIM_Base_SetConfig+0x114>)
 8006b06:	4293      	cmp	r3, r2
 8006b08:	d02b      	beq.n	8006b62 <TIM_Base_SetConfig+0xb2>
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b10:	d027      	beq.n	8006b62 <TIM_Base_SetConfig+0xb2>
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	4a2c      	ldr	r2, [pc, #176]	; (8006bc8 <TIM_Base_SetConfig+0x118>)
 8006b16:	4293      	cmp	r3, r2
 8006b18:	d023      	beq.n	8006b62 <TIM_Base_SetConfig+0xb2>
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	4a2b      	ldr	r2, [pc, #172]	; (8006bcc <TIM_Base_SetConfig+0x11c>)
 8006b1e:	4293      	cmp	r3, r2
 8006b20:	d01f      	beq.n	8006b62 <TIM_Base_SetConfig+0xb2>
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	4a2a      	ldr	r2, [pc, #168]	; (8006bd0 <TIM_Base_SetConfig+0x120>)
 8006b26:	4293      	cmp	r3, r2
 8006b28:	d01b      	beq.n	8006b62 <TIM_Base_SetConfig+0xb2>
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	4a29      	ldr	r2, [pc, #164]	; (8006bd4 <TIM_Base_SetConfig+0x124>)
 8006b2e:	4293      	cmp	r3, r2
 8006b30:	d017      	beq.n	8006b62 <TIM_Base_SetConfig+0xb2>
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	4a28      	ldr	r2, [pc, #160]	; (8006bd8 <TIM_Base_SetConfig+0x128>)
 8006b36:	4293      	cmp	r3, r2
 8006b38:	d013      	beq.n	8006b62 <TIM_Base_SetConfig+0xb2>
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	4a27      	ldr	r2, [pc, #156]	; (8006bdc <TIM_Base_SetConfig+0x12c>)
 8006b3e:	4293      	cmp	r3, r2
 8006b40:	d00f      	beq.n	8006b62 <TIM_Base_SetConfig+0xb2>
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	4a26      	ldr	r2, [pc, #152]	; (8006be0 <TIM_Base_SetConfig+0x130>)
 8006b46:	4293      	cmp	r3, r2
 8006b48:	d00b      	beq.n	8006b62 <TIM_Base_SetConfig+0xb2>
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	4a25      	ldr	r2, [pc, #148]	; (8006be4 <TIM_Base_SetConfig+0x134>)
 8006b4e:	4293      	cmp	r3, r2
 8006b50:	d007      	beq.n	8006b62 <TIM_Base_SetConfig+0xb2>
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	4a24      	ldr	r2, [pc, #144]	; (8006be8 <TIM_Base_SetConfig+0x138>)
 8006b56:	4293      	cmp	r3, r2
 8006b58:	d003      	beq.n	8006b62 <TIM_Base_SetConfig+0xb2>
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	4a23      	ldr	r2, [pc, #140]	; (8006bec <TIM_Base_SetConfig+0x13c>)
 8006b5e:	4293      	cmp	r3, r2
 8006b60:	d108      	bne.n	8006b74 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b68:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006b6a:	683b      	ldr	r3, [r7, #0]
 8006b6c:	68db      	ldr	r3, [r3, #12]
 8006b6e:	68fa      	ldr	r2, [r7, #12]
 8006b70:	4313      	orrs	r3, r2
 8006b72:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006b7a:	683b      	ldr	r3, [r7, #0]
 8006b7c:	695b      	ldr	r3, [r3, #20]
 8006b7e:	4313      	orrs	r3, r2
 8006b80:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	68fa      	ldr	r2, [r7, #12]
 8006b86:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	689a      	ldr	r2, [r3, #8]
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006b90:	683b      	ldr	r3, [r7, #0]
 8006b92:	681a      	ldr	r2, [r3, #0]
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	4a0a      	ldr	r2, [pc, #40]	; (8006bc4 <TIM_Base_SetConfig+0x114>)
 8006b9c:	4293      	cmp	r3, r2
 8006b9e:	d003      	beq.n	8006ba8 <TIM_Base_SetConfig+0xf8>
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	4a0c      	ldr	r2, [pc, #48]	; (8006bd4 <TIM_Base_SetConfig+0x124>)
 8006ba4:	4293      	cmp	r3, r2
 8006ba6:	d103      	bne.n	8006bb0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006ba8:	683b      	ldr	r3, [r7, #0]
 8006baa:	691a      	ldr	r2, [r3, #16]
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2201      	movs	r2, #1
 8006bb4:	615a      	str	r2, [r3, #20]
}
 8006bb6:	bf00      	nop
 8006bb8:	3714      	adds	r7, #20
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc0:	4770      	bx	lr
 8006bc2:	bf00      	nop
 8006bc4:	40010000 	.word	0x40010000
 8006bc8:	40000400 	.word	0x40000400
 8006bcc:	40000800 	.word	0x40000800
 8006bd0:	40000c00 	.word	0x40000c00
 8006bd4:	40010400 	.word	0x40010400
 8006bd8:	40014000 	.word	0x40014000
 8006bdc:	40014400 	.word	0x40014400
 8006be0:	40014800 	.word	0x40014800
 8006be4:	40001800 	.word	0x40001800
 8006be8:	40001c00 	.word	0x40001c00
 8006bec:	40002000 	.word	0x40002000

08006bf0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006bf0:	b480      	push	{r7}
 8006bf2:	b087      	sub	sp, #28
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	60f8      	str	r0, [r7, #12]
 8006bf8:	60b9      	str	r1, [r7, #8]
 8006bfa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	6a1b      	ldr	r3, [r3, #32]
 8006c00:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	6a1b      	ldr	r3, [r3, #32]
 8006c06:	f023 0201 	bic.w	r2, r3, #1
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	699b      	ldr	r3, [r3, #24]
 8006c12:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006c14:	693b      	ldr	r3, [r7, #16]
 8006c16:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006c1a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	011b      	lsls	r3, r3, #4
 8006c20:	693a      	ldr	r2, [r7, #16]
 8006c22:	4313      	orrs	r3, r2
 8006c24:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006c26:	697b      	ldr	r3, [r7, #20]
 8006c28:	f023 030a 	bic.w	r3, r3, #10
 8006c2c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006c2e:	697a      	ldr	r2, [r7, #20]
 8006c30:	68bb      	ldr	r3, [r7, #8]
 8006c32:	4313      	orrs	r3, r2
 8006c34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	693a      	ldr	r2, [r7, #16]
 8006c3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	697a      	ldr	r2, [r7, #20]
 8006c40:	621a      	str	r2, [r3, #32]
}
 8006c42:	bf00      	nop
 8006c44:	371c      	adds	r7, #28
 8006c46:	46bd      	mov	sp, r7
 8006c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4c:	4770      	bx	lr

08006c4e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006c4e:	b480      	push	{r7}
 8006c50:	b087      	sub	sp, #28
 8006c52:	af00      	add	r7, sp, #0
 8006c54:	60f8      	str	r0, [r7, #12]
 8006c56:	60b9      	str	r1, [r7, #8]
 8006c58:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	6a1b      	ldr	r3, [r3, #32]
 8006c5e:	f023 0210 	bic.w	r2, r3, #16
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	699b      	ldr	r3, [r3, #24]
 8006c6a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	6a1b      	ldr	r3, [r3, #32]
 8006c70:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006c72:	697b      	ldr	r3, [r7, #20]
 8006c74:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006c78:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	031b      	lsls	r3, r3, #12
 8006c7e:	697a      	ldr	r2, [r7, #20]
 8006c80:	4313      	orrs	r3, r2
 8006c82:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006c84:	693b      	ldr	r3, [r7, #16]
 8006c86:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006c8a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006c8c:	68bb      	ldr	r3, [r7, #8]
 8006c8e:	011b      	lsls	r3, r3, #4
 8006c90:	693a      	ldr	r2, [r7, #16]
 8006c92:	4313      	orrs	r3, r2
 8006c94:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	697a      	ldr	r2, [r7, #20]
 8006c9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	693a      	ldr	r2, [r7, #16]
 8006ca0:	621a      	str	r2, [r3, #32]
}
 8006ca2:	bf00      	nop
 8006ca4:	371c      	adds	r7, #28
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cac:	4770      	bx	lr

08006cae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006cae:	b480      	push	{r7}
 8006cb0:	b085      	sub	sp, #20
 8006cb2:	af00      	add	r7, sp, #0
 8006cb4:	6078      	str	r0, [r7, #4]
 8006cb6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	689b      	ldr	r3, [r3, #8]
 8006cbc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cc4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006cc6:	683a      	ldr	r2, [r7, #0]
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	4313      	orrs	r3, r2
 8006ccc:	f043 0307 	orr.w	r3, r3, #7
 8006cd0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	68fa      	ldr	r2, [r7, #12]
 8006cd6:	609a      	str	r2, [r3, #8]
}
 8006cd8:	bf00      	nop
 8006cda:	3714      	adds	r7, #20
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce2:	4770      	bx	lr

08006ce4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006ce4:	b480      	push	{r7}
 8006ce6:	b087      	sub	sp, #28
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	60f8      	str	r0, [r7, #12]
 8006cec:	60b9      	str	r1, [r7, #8]
 8006cee:	607a      	str	r2, [r7, #4]
 8006cf0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	689b      	ldr	r3, [r3, #8]
 8006cf6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006cf8:	697b      	ldr	r3, [r7, #20]
 8006cfa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006cfe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006d00:	683b      	ldr	r3, [r7, #0]
 8006d02:	021a      	lsls	r2, r3, #8
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	431a      	orrs	r2, r3
 8006d08:	68bb      	ldr	r3, [r7, #8]
 8006d0a:	4313      	orrs	r3, r2
 8006d0c:	697a      	ldr	r2, [r7, #20]
 8006d0e:	4313      	orrs	r3, r2
 8006d10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	697a      	ldr	r2, [r7, #20]
 8006d16:	609a      	str	r2, [r3, #8]
}
 8006d18:	bf00      	nop
 8006d1a:	371c      	adds	r7, #28
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d22:	4770      	bx	lr

08006d24 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006d24:	b480      	push	{r7}
 8006d26:	b085      	sub	sp, #20
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
 8006d2c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d34:	2b01      	cmp	r3, #1
 8006d36:	d101      	bne.n	8006d3c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006d38:	2302      	movs	r3, #2
 8006d3a:	e05a      	b.n	8006df2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	2201      	movs	r2, #1
 8006d40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	2202      	movs	r2, #2
 8006d48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	685b      	ldr	r3, [r3, #4]
 8006d52:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	689b      	ldr	r3, [r3, #8]
 8006d5a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d62:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006d64:	683b      	ldr	r3, [r7, #0]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	68fa      	ldr	r2, [r7, #12]
 8006d6a:	4313      	orrs	r3, r2
 8006d6c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	68fa      	ldr	r2, [r7, #12]
 8006d74:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	4a21      	ldr	r2, [pc, #132]	; (8006e00 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006d7c:	4293      	cmp	r3, r2
 8006d7e:	d022      	beq.n	8006dc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d88:	d01d      	beq.n	8006dc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	4a1d      	ldr	r2, [pc, #116]	; (8006e04 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006d90:	4293      	cmp	r3, r2
 8006d92:	d018      	beq.n	8006dc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	4a1b      	ldr	r2, [pc, #108]	; (8006e08 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006d9a:	4293      	cmp	r3, r2
 8006d9c:	d013      	beq.n	8006dc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	4a1a      	ldr	r2, [pc, #104]	; (8006e0c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006da4:	4293      	cmp	r3, r2
 8006da6:	d00e      	beq.n	8006dc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	4a18      	ldr	r2, [pc, #96]	; (8006e10 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006dae:	4293      	cmp	r3, r2
 8006db0:	d009      	beq.n	8006dc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	4a17      	ldr	r2, [pc, #92]	; (8006e14 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006db8:	4293      	cmp	r3, r2
 8006dba:	d004      	beq.n	8006dc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	4a15      	ldr	r2, [pc, #84]	; (8006e18 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006dc2:	4293      	cmp	r3, r2
 8006dc4:	d10c      	bne.n	8006de0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006dc6:	68bb      	ldr	r3, [r7, #8]
 8006dc8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006dcc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	685b      	ldr	r3, [r3, #4]
 8006dd2:	68ba      	ldr	r2, [r7, #8]
 8006dd4:	4313      	orrs	r3, r2
 8006dd6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	68ba      	ldr	r2, [r7, #8]
 8006dde:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2201      	movs	r2, #1
 8006de4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2200      	movs	r2, #0
 8006dec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006df0:	2300      	movs	r3, #0
}
 8006df2:	4618      	mov	r0, r3
 8006df4:	3714      	adds	r7, #20
 8006df6:	46bd      	mov	sp, r7
 8006df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfc:	4770      	bx	lr
 8006dfe:	bf00      	nop
 8006e00:	40010000 	.word	0x40010000
 8006e04:	40000400 	.word	0x40000400
 8006e08:	40000800 	.word	0x40000800
 8006e0c:	40000c00 	.word	0x40000c00
 8006e10:	40010400 	.word	0x40010400
 8006e14:	40014000 	.word	0x40014000
 8006e18:	40001800 	.word	0x40001800

08006e1c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006e1c:	b480      	push	{r7}
 8006e1e:	b083      	sub	sp, #12
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006e24:	bf00      	nop
 8006e26:	370c      	adds	r7, #12
 8006e28:	46bd      	mov	sp, r7
 8006e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2e:	4770      	bx	lr

08006e30 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006e30:	b480      	push	{r7}
 8006e32:	b083      	sub	sp, #12
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006e38:	bf00      	nop
 8006e3a:	370c      	adds	r7, #12
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e42:	4770      	bx	lr

08006e44 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick (uint32_t TickPriority)
{
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b08e      	sub	sp, #56	; 0x38
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8006e4c:	2300      	movs	r3, #0
 8006e4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0U;
 8006e50:	2300      	movs	r3, #0
 8006e52:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8006e54:	2300      	movs	r3, #0
 8006e56:	60fb      	str	r3, [r7, #12]
 8006e58:	4b33      	ldr	r3, [pc, #204]	; (8006f28 <HAL_InitTick+0xe4>)
 8006e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e5c:	4a32      	ldr	r2, [pc, #200]	; (8006f28 <HAL_InitTick+0xe4>)
 8006e5e:	f043 0310 	orr.w	r3, r3, #16
 8006e62:	6413      	str	r3, [r2, #64]	; 0x40
 8006e64:	4b30      	ldr	r3, [pc, #192]	; (8006f28 <HAL_InitTick+0xe4>)
 8006e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e68:	f003 0310 	and.w	r3, r3, #16
 8006e6c:	60fb      	str	r3, [r7, #12]
 8006e6e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8006e70:	f107 0210 	add.w	r2, r7, #16
 8006e74:	f107 0314 	add.w	r3, r7, #20
 8006e78:	4611      	mov	r1, r2
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	f7ff f80e 	bl	8005e9c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8006e80:	6a3b      	ldr	r3, [r7, #32]
 8006e82:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8006e84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d103      	bne.n	8006e92 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8006e8a:	f7fe ffdf 	bl	8005e4c <HAL_RCC_GetPCLK1Freq>
 8006e8e:	6378      	str	r0, [r7, #52]	; 0x34
 8006e90:	e004      	b.n	8006e9c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2 * HAL_RCC_GetPCLK1Freq();
 8006e92:	f7fe ffdb 	bl	8005e4c <HAL_RCC_GetPCLK1Freq>
 8006e96:	4603      	mov	r3, r0
 8006e98:	005b      	lsls	r3, r3, #1
 8006e9a:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8006e9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e9e:	4a23      	ldr	r2, [pc, #140]	; (8006f2c <HAL_InitTick+0xe8>)
 8006ea0:	fba2 2303 	umull	r2, r3, r2, r3
 8006ea4:	0c9b      	lsrs	r3, r3, #18
 8006ea6:	3b01      	subs	r3, #1
 8006ea8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  TimHandle.Instance = TIM6;
 8006eaa:	4b21      	ldr	r3, [pc, #132]	; (8006f30 <HAL_InitTick+0xec>)
 8006eac:	4a21      	ldr	r2, [pc, #132]	; (8006f34 <HAL_InitTick+0xf0>)
 8006eae:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  TimHandle.Init.Period = (1000000U / 1000U) - 1U;
 8006eb0:	4b1f      	ldr	r3, [pc, #124]	; (8006f30 <HAL_InitTick+0xec>)
 8006eb2:	f240 32e7 	movw	r2, #999	; 0x3e7
 8006eb6:	60da      	str	r2, [r3, #12]
  TimHandle.Init.Prescaler = uwPrescalerValue;
 8006eb8:	4a1d      	ldr	r2, [pc, #116]	; (8006f30 <HAL_InitTick+0xec>)
 8006eba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ebc:	6053      	str	r3, [r2, #4]
  TimHandle.Init.ClockDivision = 0U;
 8006ebe:	4b1c      	ldr	r3, [pc, #112]	; (8006f30 <HAL_InitTick+0xec>)
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	611a      	str	r2, [r3, #16]
  TimHandle.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006ec4:	4b1a      	ldr	r3, [pc, #104]	; (8006f30 <HAL_InitTick+0xec>)
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	609a      	str	r2, [r3, #8]
  TimHandle.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006eca:	4b19      	ldr	r3, [pc, #100]	; (8006f30 <HAL_InitTick+0xec>)
 8006ecc:	2200      	movs	r2, #0
 8006ece:	619a      	str	r2, [r3, #24]
  status = HAL_TIM_Base_Init(&TimHandle);
 8006ed0:	4817      	ldr	r0, [pc, #92]	; (8006f30 <HAL_InitTick+0xec>)
 8006ed2:	f7ff faa5 	bl	8006420 <HAL_TIM_Base_Init>
 8006ed6:	4603      	mov	r3, r0
 8006ed8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8006edc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d11b      	bne.n	8006f1c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&TimHandle);
 8006ee4:	4812      	ldr	r0, [pc, #72]	; (8006f30 <HAL_InitTick+0xec>)
 8006ee6:	f7ff fb7b 	bl	80065e0 <HAL_TIM_Base_Start_IT>
 8006eea:	4603      	mov	r3, r0
 8006eec:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8006ef0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d111      	bne.n	8006f1c <HAL_InitTick+0xd8>
    {
      /* Enable the TIM6 global Interrupt */
      HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8006ef8:	2036      	movs	r0, #54	; 0x36
 8006efa:	f7fd fd94 	bl	8004a26 <HAL_NVIC_EnableIRQ>

      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	2b0f      	cmp	r3, #15
 8006f02:	d808      	bhi.n	8006f16 <HAL_InitTick+0xd2>
      {
        /* Enable the TIM6 global Interrupt */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0);
 8006f04:	2200      	movs	r2, #0
 8006f06:	6879      	ldr	r1, [r7, #4]
 8006f08:	2036      	movs	r0, #54	; 0x36
 8006f0a:	f7fd fd70 	bl	80049ee <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8006f0e:	4a0a      	ldr	r2, [pc, #40]	; (8006f38 <HAL_InitTick+0xf4>)
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	6013      	str	r3, [r2, #0]
 8006f14:	e002      	b.n	8006f1c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8006f16:	2301      	movs	r3, #1
 8006f18:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

  /* Return function status */
  return status;
 8006f1c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8006f20:	4618      	mov	r0, r3
 8006f22:	3738      	adds	r7, #56	; 0x38
 8006f24:	46bd      	mov	sp, r7
 8006f26:	bd80      	pop	{r7, pc}
 8006f28:	40023800 	.word	0x40023800
 8006f2c:	431bde83 	.word	0x431bde83
 8006f30:	200004f0 	.word	0x200004f0
 8006f34:	40001000 	.word	0x40001000
 8006f38:	20000024 	.word	0x20000024

08006f3c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim  TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006f3c:	b580      	push	{r7, lr}
 8006f3e:	b082      	sub	sp, #8
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
  HAL_IncTick();
 8006f44:	f7fd f838 	bl	8003fb8 <HAL_IncTick>
}
 8006f48:	bf00      	nop
 8006f4a:	3708      	adds	r7, #8
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	bd80      	pop	{r7, pc}

08006f50 <TIM6_DAC_IRQHandler>:
/**
  * @brief  This function handles TIM interrupt request.
  * @retval None
  */
void TIM6_DAC_IRQHandler(void)
{
 8006f50:	b580      	push	{r7, lr}
 8006f52:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&TimHandle);
 8006f54:	4802      	ldr	r0, [pc, #8]	; (8006f60 <TIM6_DAC_IRQHandler+0x10>)
 8006f56:	f7ff fbb3 	bl	80066c0 <HAL_TIM_IRQHandler>
}
 8006f5a:	bf00      	nop
 8006f5c:	bd80      	pop	{r7, pc}
 8006f5e:	bf00      	nop
 8006f60:	200004f0 	.word	0x200004f0

08006f64 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006f64:	b580      	push	{r7, lr}
 8006f66:	b082      	sub	sp, #8
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d101      	bne.n	8006f76 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006f72:	2301      	movs	r3, #1
 8006f74:	e03f      	b.n	8006ff6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f7c:	b2db      	uxtb	r3, r3
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d106      	bne.n	8006f90 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	2200      	movs	r2, #0
 8006f86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006f8a:	6878      	ldr	r0, [r7, #4]
 8006f8c:	f7fa fc10 	bl	80017b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	2224      	movs	r2, #36	; 0x24
 8006f94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	68da      	ldr	r2, [r3, #12]
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006fa6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006fa8:	6878      	ldr	r0, [r7, #4]
 8006faa:	f000 fddf 	bl	8007b6c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	691a      	ldr	r2, [r3, #16]
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006fbc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	695a      	ldr	r2, [r3, #20]
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006fcc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	68da      	ldr	r2, [r3, #12]
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006fdc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	2220      	movs	r2, #32
 8006fe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2220      	movs	r2, #32
 8006ff0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006ff4:	2300      	movs	r3, #0
}
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	3708      	adds	r7, #8
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	bd80      	pop	{r7, pc}

08006ffe <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006ffe:	b580      	push	{r7, lr}
 8007000:	b08a      	sub	sp, #40	; 0x28
 8007002:	af02      	add	r7, sp, #8
 8007004:	60f8      	str	r0, [r7, #12]
 8007006:	60b9      	str	r1, [r7, #8]
 8007008:	603b      	str	r3, [r7, #0]
 800700a:	4613      	mov	r3, r2
 800700c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800700e:	2300      	movs	r3, #0
 8007010:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007018:	b2db      	uxtb	r3, r3
 800701a:	2b20      	cmp	r3, #32
 800701c:	d17c      	bne.n	8007118 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800701e:	68bb      	ldr	r3, [r7, #8]
 8007020:	2b00      	cmp	r3, #0
 8007022:	d002      	beq.n	800702a <HAL_UART_Transmit+0x2c>
 8007024:	88fb      	ldrh	r3, [r7, #6]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d101      	bne.n	800702e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800702a:	2301      	movs	r3, #1
 800702c:	e075      	b.n	800711a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007034:	2b01      	cmp	r3, #1
 8007036:	d101      	bne.n	800703c <HAL_UART_Transmit+0x3e>
 8007038:	2302      	movs	r3, #2
 800703a:	e06e      	b.n	800711a <HAL_UART_Transmit+0x11c>
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	2201      	movs	r2, #1
 8007040:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	2200      	movs	r2, #0
 8007048:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	2221      	movs	r2, #33	; 0x21
 800704e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007052:	f7fc ffc5 	bl	8003fe0 <HAL_GetTick>
 8007056:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	88fa      	ldrh	r2, [r7, #6]
 800705c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	88fa      	ldrh	r2, [r7, #6]
 8007062:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	689b      	ldr	r3, [r3, #8]
 8007068:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800706c:	d108      	bne.n	8007080 <HAL_UART_Transmit+0x82>
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	691b      	ldr	r3, [r3, #16]
 8007072:	2b00      	cmp	r3, #0
 8007074:	d104      	bne.n	8007080 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8007076:	2300      	movs	r3, #0
 8007078:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800707a:	68bb      	ldr	r3, [r7, #8]
 800707c:	61bb      	str	r3, [r7, #24]
 800707e:	e003      	b.n	8007088 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007080:	68bb      	ldr	r3, [r7, #8]
 8007082:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007084:	2300      	movs	r3, #0
 8007086:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	2200      	movs	r2, #0
 800708c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007090:	e02a      	b.n	80070e8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007092:	683b      	ldr	r3, [r7, #0]
 8007094:	9300      	str	r3, [sp, #0]
 8007096:	697b      	ldr	r3, [r7, #20]
 8007098:	2200      	movs	r2, #0
 800709a:	2180      	movs	r1, #128	; 0x80
 800709c:	68f8      	ldr	r0, [r7, #12]
 800709e:	f000 fb1f 	bl	80076e0 <UART_WaitOnFlagUntilTimeout>
 80070a2:	4603      	mov	r3, r0
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d001      	beq.n	80070ac <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80070a8:	2303      	movs	r3, #3
 80070aa:	e036      	b.n	800711a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80070ac:	69fb      	ldr	r3, [r7, #28]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d10b      	bne.n	80070ca <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80070b2:	69bb      	ldr	r3, [r7, #24]
 80070b4:	881b      	ldrh	r3, [r3, #0]
 80070b6:	461a      	mov	r2, r3
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80070c0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80070c2:	69bb      	ldr	r3, [r7, #24]
 80070c4:	3302      	adds	r3, #2
 80070c6:	61bb      	str	r3, [r7, #24]
 80070c8:	e007      	b.n	80070da <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80070ca:	69fb      	ldr	r3, [r7, #28]
 80070cc:	781a      	ldrb	r2, [r3, #0]
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80070d4:	69fb      	ldr	r3, [r7, #28]
 80070d6:	3301      	adds	r3, #1
 80070d8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80070de:	b29b      	uxth	r3, r3
 80070e0:	3b01      	subs	r3, #1
 80070e2:	b29a      	uxth	r2, r3
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80070ec:	b29b      	uxth	r3, r3
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d1cf      	bne.n	8007092 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80070f2:	683b      	ldr	r3, [r7, #0]
 80070f4:	9300      	str	r3, [sp, #0]
 80070f6:	697b      	ldr	r3, [r7, #20]
 80070f8:	2200      	movs	r2, #0
 80070fa:	2140      	movs	r1, #64	; 0x40
 80070fc:	68f8      	ldr	r0, [r7, #12]
 80070fe:	f000 faef 	bl	80076e0 <UART_WaitOnFlagUntilTimeout>
 8007102:	4603      	mov	r3, r0
 8007104:	2b00      	cmp	r3, #0
 8007106:	d001      	beq.n	800710c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007108:	2303      	movs	r3, #3
 800710a:	e006      	b.n	800711a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	2220      	movs	r2, #32
 8007110:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007114:	2300      	movs	r3, #0
 8007116:	e000      	b.n	800711a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007118:	2302      	movs	r3, #2
  }
}
 800711a:	4618      	mov	r0, r3
 800711c:	3720      	adds	r7, #32
 800711e:	46bd      	mov	sp, r7
 8007120:	bd80      	pop	{r7, pc}

08007122 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007122:	b580      	push	{r7, lr}
 8007124:	b084      	sub	sp, #16
 8007126:	af00      	add	r7, sp, #0
 8007128:	60f8      	str	r0, [r7, #12]
 800712a:	60b9      	str	r1, [r7, #8]
 800712c:	4613      	mov	r3, r2
 800712e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007136:	b2db      	uxtb	r3, r3
 8007138:	2b20      	cmp	r3, #32
 800713a:	d11d      	bne.n	8007178 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800713c:	68bb      	ldr	r3, [r7, #8]
 800713e:	2b00      	cmp	r3, #0
 8007140:	d002      	beq.n	8007148 <HAL_UART_Receive_IT+0x26>
 8007142:	88fb      	ldrh	r3, [r7, #6]
 8007144:	2b00      	cmp	r3, #0
 8007146:	d101      	bne.n	800714c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007148:	2301      	movs	r3, #1
 800714a:	e016      	b.n	800717a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007152:	2b01      	cmp	r3, #1
 8007154:	d101      	bne.n	800715a <HAL_UART_Receive_IT+0x38>
 8007156:	2302      	movs	r3, #2
 8007158:	e00f      	b.n	800717a <HAL_UART_Receive_IT+0x58>
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	2201      	movs	r2, #1
 800715e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	2200      	movs	r2, #0
 8007166:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007168:	88fb      	ldrh	r3, [r7, #6]
 800716a:	461a      	mov	r2, r3
 800716c:	68b9      	ldr	r1, [r7, #8]
 800716e:	68f8      	ldr	r0, [r7, #12]
 8007170:	f000 fb24 	bl	80077bc <UART_Start_Receive_IT>
 8007174:	4603      	mov	r3, r0
 8007176:	e000      	b.n	800717a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8007178:	2302      	movs	r3, #2
  }
}
 800717a:	4618      	mov	r0, r3
 800717c:	3710      	adds	r7, #16
 800717e:	46bd      	mov	sp, r7
 8007180:	bd80      	pop	{r7, pc}
	...

08007184 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007184:	b580      	push	{r7, lr}
 8007186:	b0ba      	sub	sp, #232	; 0xe8
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	68db      	ldr	r3, [r3, #12]
 800719c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	695b      	ldr	r3, [r3, #20]
 80071a6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80071aa:	2300      	movs	r3, #0
 80071ac:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80071b0:	2300      	movs	r3, #0
 80071b2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80071b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071ba:	f003 030f 	and.w	r3, r3, #15
 80071be:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80071c2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d10f      	bne.n	80071ea <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80071ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071ce:	f003 0320 	and.w	r3, r3, #32
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d009      	beq.n	80071ea <HAL_UART_IRQHandler+0x66>
 80071d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80071da:	f003 0320 	and.w	r3, r3, #32
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d003      	beq.n	80071ea <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80071e2:	6878      	ldr	r0, [r7, #4]
 80071e4:	f000 fc07 	bl	80079f6 <UART_Receive_IT>
      return;
 80071e8:	e256      	b.n	8007698 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80071ea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	f000 80de 	beq.w	80073b0 <HAL_UART_IRQHandler+0x22c>
 80071f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80071f8:	f003 0301 	and.w	r3, r3, #1
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d106      	bne.n	800720e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007200:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007204:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007208:	2b00      	cmp	r3, #0
 800720a:	f000 80d1 	beq.w	80073b0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800720e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007212:	f003 0301 	and.w	r3, r3, #1
 8007216:	2b00      	cmp	r3, #0
 8007218:	d00b      	beq.n	8007232 <HAL_UART_IRQHandler+0xae>
 800721a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800721e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007222:	2b00      	cmp	r3, #0
 8007224:	d005      	beq.n	8007232 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800722a:	f043 0201 	orr.w	r2, r3, #1
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007232:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007236:	f003 0304 	and.w	r3, r3, #4
 800723a:	2b00      	cmp	r3, #0
 800723c:	d00b      	beq.n	8007256 <HAL_UART_IRQHandler+0xd2>
 800723e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007242:	f003 0301 	and.w	r3, r3, #1
 8007246:	2b00      	cmp	r3, #0
 8007248:	d005      	beq.n	8007256 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800724e:	f043 0202 	orr.w	r2, r3, #2
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007256:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800725a:	f003 0302 	and.w	r3, r3, #2
 800725e:	2b00      	cmp	r3, #0
 8007260:	d00b      	beq.n	800727a <HAL_UART_IRQHandler+0xf6>
 8007262:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007266:	f003 0301 	and.w	r3, r3, #1
 800726a:	2b00      	cmp	r3, #0
 800726c:	d005      	beq.n	800727a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007272:	f043 0204 	orr.w	r2, r3, #4
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800727a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800727e:	f003 0308 	and.w	r3, r3, #8
 8007282:	2b00      	cmp	r3, #0
 8007284:	d011      	beq.n	80072aa <HAL_UART_IRQHandler+0x126>
 8007286:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800728a:	f003 0320 	and.w	r3, r3, #32
 800728e:	2b00      	cmp	r3, #0
 8007290:	d105      	bne.n	800729e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007292:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007296:	f003 0301 	and.w	r3, r3, #1
 800729a:	2b00      	cmp	r3, #0
 800729c:	d005      	beq.n	80072aa <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072a2:	f043 0208 	orr.w	r2, r3, #8
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	f000 81ed 	beq.w	800768e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80072b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80072b8:	f003 0320 	and.w	r3, r3, #32
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d008      	beq.n	80072d2 <HAL_UART_IRQHandler+0x14e>
 80072c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80072c4:	f003 0320 	and.w	r3, r3, #32
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d002      	beq.n	80072d2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80072cc:	6878      	ldr	r0, [r7, #4]
 80072ce:	f000 fb92 	bl	80079f6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	695b      	ldr	r3, [r3, #20]
 80072d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072dc:	2b40      	cmp	r3, #64	; 0x40
 80072de:	bf0c      	ite	eq
 80072e0:	2301      	moveq	r3, #1
 80072e2:	2300      	movne	r3, #0
 80072e4:	b2db      	uxtb	r3, r3
 80072e6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072ee:	f003 0308 	and.w	r3, r3, #8
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d103      	bne.n	80072fe <HAL_UART_IRQHandler+0x17a>
 80072f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d04f      	beq.n	800739e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80072fe:	6878      	ldr	r0, [r7, #4]
 8007300:	f000 fa9a 	bl	8007838 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	695b      	ldr	r3, [r3, #20]
 800730a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800730e:	2b40      	cmp	r3, #64	; 0x40
 8007310:	d141      	bne.n	8007396 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	3314      	adds	r3, #20
 8007318:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800731c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007320:	e853 3f00 	ldrex	r3, [r3]
 8007324:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007328:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800732c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007330:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	3314      	adds	r3, #20
 800733a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800733e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007342:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007346:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800734a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800734e:	e841 2300 	strex	r3, r2, [r1]
 8007352:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007356:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800735a:	2b00      	cmp	r3, #0
 800735c:	d1d9      	bne.n	8007312 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007362:	2b00      	cmp	r3, #0
 8007364:	d013      	beq.n	800738e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800736a:	4a7d      	ldr	r2, [pc, #500]	; (8007560 <HAL_UART_IRQHandler+0x3dc>)
 800736c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007372:	4618      	mov	r0, r3
 8007374:	f7fd fce0 	bl	8004d38 <HAL_DMA_Abort_IT>
 8007378:	4603      	mov	r3, r0
 800737a:	2b00      	cmp	r3, #0
 800737c:	d016      	beq.n	80073ac <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007382:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007384:	687a      	ldr	r2, [r7, #4]
 8007386:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007388:	4610      	mov	r0, r2
 800738a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800738c:	e00e      	b.n	80073ac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800738e:	6878      	ldr	r0, [r7, #4]
 8007390:	f000 f990 	bl	80076b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007394:	e00a      	b.n	80073ac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007396:	6878      	ldr	r0, [r7, #4]
 8007398:	f000 f98c 	bl	80076b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800739c:	e006      	b.n	80073ac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800739e:	6878      	ldr	r0, [r7, #4]
 80073a0:	f000 f988 	bl	80076b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	2200      	movs	r2, #0
 80073a8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80073aa:	e170      	b.n	800768e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80073ac:	bf00      	nop
    return;
 80073ae:	e16e      	b.n	800768e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073b4:	2b01      	cmp	r3, #1
 80073b6:	f040 814a 	bne.w	800764e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80073ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073be:	f003 0310 	and.w	r3, r3, #16
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	f000 8143 	beq.w	800764e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80073c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80073cc:	f003 0310 	and.w	r3, r3, #16
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	f000 813c 	beq.w	800764e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80073d6:	2300      	movs	r3, #0
 80073d8:	60bb      	str	r3, [r7, #8]
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	60bb      	str	r3, [r7, #8]
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	685b      	ldr	r3, [r3, #4]
 80073e8:	60bb      	str	r3, [r7, #8]
 80073ea:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	695b      	ldr	r3, [r3, #20]
 80073f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073f6:	2b40      	cmp	r3, #64	; 0x40
 80073f8:	f040 80b4 	bne.w	8007564 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	685b      	ldr	r3, [r3, #4]
 8007404:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007408:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800740c:	2b00      	cmp	r3, #0
 800740e:	f000 8140 	beq.w	8007692 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007416:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800741a:	429a      	cmp	r2, r3
 800741c:	f080 8139 	bcs.w	8007692 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007426:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800742c:	69db      	ldr	r3, [r3, #28]
 800742e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007432:	f000 8088 	beq.w	8007546 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	330c      	adds	r3, #12
 800743c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007440:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007444:	e853 3f00 	ldrex	r3, [r3]
 8007448:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800744c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007450:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007454:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	330c      	adds	r3, #12
 800745e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007462:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007466:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800746a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800746e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007472:	e841 2300 	strex	r3, r2, [r1]
 8007476:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800747a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800747e:	2b00      	cmp	r3, #0
 8007480:	d1d9      	bne.n	8007436 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	3314      	adds	r3, #20
 8007488:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800748a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800748c:	e853 3f00 	ldrex	r3, [r3]
 8007490:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007492:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007494:	f023 0301 	bic.w	r3, r3, #1
 8007498:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	3314      	adds	r3, #20
 80074a2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80074a6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80074aa:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074ac:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80074ae:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80074b2:	e841 2300 	strex	r3, r2, [r1]
 80074b6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80074b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d1e1      	bne.n	8007482 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	3314      	adds	r3, #20
 80074c4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80074c8:	e853 3f00 	ldrex	r3, [r3]
 80074cc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80074ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80074d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80074d4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	3314      	adds	r3, #20
 80074de:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80074e2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80074e4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074e6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80074e8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80074ea:	e841 2300 	strex	r3, r2, [r1]
 80074ee:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80074f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d1e3      	bne.n	80074be <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	2220      	movs	r2, #32
 80074fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	2200      	movs	r2, #0
 8007502:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	330c      	adds	r3, #12
 800750a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800750c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800750e:	e853 3f00 	ldrex	r3, [r3]
 8007512:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007514:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007516:	f023 0310 	bic.w	r3, r3, #16
 800751a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	330c      	adds	r3, #12
 8007524:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007528:	65ba      	str	r2, [r7, #88]	; 0x58
 800752a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800752c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800752e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007530:	e841 2300 	strex	r3, r2, [r1]
 8007534:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007536:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007538:	2b00      	cmp	r3, #0
 800753a:	d1e3      	bne.n	8007504 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007540:	4618      	mov	r0, r3
 8007542:	f7fd fb89 	bl	8004c58 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800754e:	b29b      	uxth	r3, r3
 8007550:	1ad3      	subs	r3, r2, r3
 8007552:	b29b      	uxth	r3, r3
 8007554:	4619      	mov	r1, r3
 8007556:	6878      	ldr	r0, [r7, #4]
 8007558:	f000 f8b6 	bl	80076c8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800755c:	e099      	b.n	8007692 <HAL_UART_IRQHandler+0x50e>
 800755e:	bf00      	nop
 8007560:	080078ff 	.word	0x080078ff
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800756c:	b29b      	uxth	r3, r3
 800756e:	1ad3      	subs	r3, r2, r3
 8007570:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007578:	b29b      	uxth	r3, r3
 800757a:	2b00      	cmp	r3, #0
 800757c:	f000 808b 	beq.w	8007696 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8007580:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007584:	2b00      	cmp	r3, #0
 8007586:	f000 8086 	beq.w	8007696 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	330c      	adds	r3, #12
 8007590:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007592:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007594:	e853 3f00 	ldrex	r3, [r3]
 8007598:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800759a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800759c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80075a0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	330c      	adds	r3, #12
 80075aa:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80075ae:	647a      	str	r2, [r7, #68]	; 0x44
 80075b0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075b2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80075b4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80075b6:	e841 2300 	strex	r3, r2, [r1]
 80075ba:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80075bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d1e3      	bne.n	800758a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	3314      	adds	r3, #20
 80075c8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075cc:	e853 3f00 	ldrex	r3, [r3]
 80075d0:	623b      	str	r3, [r7, #32]
   return(result);
 80075d2:	6a3b      	ldr	r3, [r7, #32]
 80075d4:	f023 0301 	bic.w	r3, r3, #1
 80075d8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	3314      	adds	r3, #20
 80075e2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80075e6:	633a      	str	r2, [r7, #48]	; 0x30
 80075e8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075ea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80075ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80075ee:	e841 2300 	strex	r3, r2, [r1]
 80075f2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80075f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d1e3      	bne.n	80075c2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	2220      	movs	r2, #32
 80075fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	2200      	movs	r2, #0
 8007606:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	330c      	adds	r3, #12
 800760e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007610:	693b      	ldr	r3, [r7, #16]
 8007612:	e853 3f00 	ldrex	r3, [r3]
 8007616:	60fb      	str	r3, [r7, #12]
   return(result);
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	f023 0310 	bic.w	r3, r3, #16
 800761e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	330c      	adds	r3, #12
 8007628:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800762c:	61fa      	str	r2, [r7, #28]
 800762e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007630:	69b9      	ldr	r1, [r7, #24]
 8007632:	69fa      	ldr	r2, [r7, #28]
 8007634:	e841 2300 	strex	r3, r2, [r1]
 8007638:	617b      	str	r3, [r7, #20]
   return(result);
 800763a:	697b      	ldr	r3, [r7, #20]
 800763c:	2b00      	cmp	r3, #0
 800763e:	d1e3      	bne.n	8007608 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007640:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007644:	4619      	mov	r1, r3
 8007646:	6878      	ldr	r0, [r7, #4]
 8007648:	f000 f83e 	bl	80076c8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800764c:	e023      	b.n	8007696 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800764e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007652:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007656:	2b00      	cmp	r3, #0
 8007658:	d009      	beq.n	800766e <HAL_UART_IRQHandler+0x4ea>
 800765a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800765e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007662:	2b00      	cmp	r3, #0
 8007664:	d003      	beq.n	800766e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8007666:	6878      	ldr	r0, [r7, #4]
 8007668:	f000 f95d 	bl	8007926 <UART_Transmit_IT>
    return;
 800766c:	e014      	b.n	8007698 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800766e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007672:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007676:	2b00      	cmp	r3, #0
 8007678:	d00e      	beq.n	8007698 <HAL_UART_IRQHandler+0x514>
 800767a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800767e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007682:	2b00      	cmp	r3, #0
 8007684:	d008      	beq.n	8007698 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8007686:	6878      	ldr	r0, [r7, #4]
 8007688:	f000 f99d 	bl	80079c6 <UART_EndTransmit_IT>
    return;
 800768c:	e004      	b.n	8007698 <HAL_UART_IRQHandler+0x514>
    return;
 800768e:	bf00      	nop
 8007690:	e002      	b.n	8007698 <HAL_UART_IRQHandler+0x514>
      return;
 8007692:	bf00      	nop
 8007694:	e000      	b.n	8007698 <HAL_UART_IRQHandler+0x514>
      return;
 8007696:	bf00      	nop
  }
}
 8007698:	37e8      	adds	r7, #232	; 0xe8
 800769a:	46bd      	mov	sp, r7
 800769c:	bd80      	pop	{r7, pc}
 800769e:	bf00      	nop

080076a0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80076a0:	b480      	push	{r7}
 80076a2:	b083      	sub	sp, #12
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80076a8:	bf00      	nop
 80076aa:	370c      	adds	r7, #12
 80076ac:	46bd      	mov	sp, r7
 80076ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b2:	4770      	bx	lr

080076b4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80076b4:	b480      	push	{r7}
 80076b6:	b083      	sub	sp, #12
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80076bc:	bf00      	nop
 80076be:	370c      	adds	r7, #12
 80076c0:	46bd      	mov	sp, r7
 80076c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c6:	4770      	bx	lr

080076c8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80076c8:	b480      	push	{r7}
 80076ca:	b083      	sub	sp, #12
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	6078      	str	r0, [r7, #4]
 80076d0:	460b      	mov	r3, r1
 80076d2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80076d4:	bf00      	nop
 80076d6:	370c      	adds	r7, #12
 80076d8:	46bd      	mov	sp, r7
 80076da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076de:	4770      	bx	lr

080076e0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80076e0:	b580      	push	{r7, lr}
 80076e2:	b090      	sub	sp, #64	; 0x40
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	60f8      	str	r0, [r7, #12]
 80076e8:	60b9      	str	r1, [r7, #8]
 80076ea:	603b      	str	r3, [r7, #0]
 80076ec:	4613      	mov	r3, r2
 80076ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80076f0:	e050      	b.n	8007794 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80076f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80076f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076f8:	d04c      	beq.n	8007794 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80076fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d007      	beq.n	8007710 <UART_WaitOnFlagUntilTimeout+0x30>
 8007700:	f7fc fc6e 	bl	8003fe0 <HAL_GetTick>
 8007704:	4602      	mov	r2, r0
 8007706:	683b      	ldr	r3, [r7, #0]
 8007708:	1ad3      	subs	r3, r2, r3
 800770a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800770c:	429a      	cmp	r2, r3
 800770e:	d241      	bcs.n	8007794 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	330c      	adds	r3, #12
 8007716:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800771a:	e853 3f00 	ldrex	r3, [r3]
 800771e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007722:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007726:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	330c      	adds	r3, #12
 800772e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007730:	637a      	str	r2, [r7, #52]	; 0x34
 8007732:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007734:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007736:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007738:	e841 2300 	strex	r3, r2, [r1]
 800773c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800773e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007740:	2b00      	cmp	r3, #0
 8007742:	d1e5      	bne.n	8007710 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	3314      	adds	r3, #20
 800774a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800774c:	697b      	ldr	r3, [r7, #20]
 800774e:	e853 3f00 	ldrex	r3, [r3]
 8007752:	613b      	str	r3, [r7, #16]
   return(result);
 8007754:	693b      	ldr	r3, [r7, #16]
 8007756:	f023 0301 	bic.w	r3, r3, #1
 800775a:	63bb      	str	r3, [r7, #56]	; 0x38
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	3314      	adds	r3, #20
 8007762:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007764:	623a      	str	r2, [r7, #32]
 8007766:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007768:	69f9      	ldr	r1, [r7, #28]
 800776a:	6a3a      	ldr	r2, [r7, #32]
 800776c:	e841 2300 	strex	r3, r2, [r1]
 8007770:	61bb      	str	r3, [r7, #24]
   return(result);
 8007772:	69bb      	ldr	r3, [r7, #24]
 8007774:	2b00      	cmp	r3, #0
 8007776:	d1e5      	bne.n	8007744 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	2220      	movs	r2, #32
 800777c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	2220      	movs	r2, #32
 8007784:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	2200      	movs	r2, #0
 800778c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007790:	2303      	movs	r3, #3
 8007792:	e00f      	b.n	80077b4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	681a      	ldr	r2, [r3, #0]
 800779a:	68bb      	ldr	r3, [r7, #8]
 800779c:	4013      	ands	r3, r2
 800779e:	68ba      	ldr	r2, [r7, #8]
 80077a0:	429a      	cmp	r2, r3
 80077a2:	bf0c      	ite	eq
 80077a4:	2301      	moveq	r3, #1
 80077a6:	2300      	movne	r3, #0
 80077a8:	b2db      	uxtb	r3, r3
 80077aa:	461a      	mov	r2, r3
 80077ac:	79fb      	ldrb	r3, [r7, #7]
 80077ae:	429a      	cmp	r2, r3
 80077b0:	d09f      	beq.n	80076f2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80077b2:	2300      	movs	r3, #0
}
 80077b4:	4618      	mov	r0, r3
 80077b6:	3740      	adds	r7, #64	; 0x40
 80077b8:	46bd      	mov	sp, r7
 80077ba:	bd80      	pop	{r7, pc}

080077bc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80077bc:	b480      	push	{r7}
 80077be:	b085      	sub	sp, #20
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	60f8      	str	r0, [r7, #12]
 80077c4:	60b9      	str	r1, [r7, #8]
 80077c6:	4613      	mov	r3, r2
 80077c8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	68ba      	ldr	r2, [r7, #8]
 80077ce:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	88fa      	ldrh	r2, [r7, #6]
 80077d4:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	88fa      	ldrh	r2, [r7, #6]
 80077da:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	2200      	movs	r2, #0
 80077e0:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	2222      	movs	r2, #34	; 0x22
 80077e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	2200      	movs	r2, #0
 80077ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	691b      	ldr	r3, [r3, #16]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d007      	beq.n	800780a <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	68da      	ldr	r2, [r3, #12]
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007808:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	695a      	ldr	r2, [r3, #20]
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	f042 0201 	orr.w	r2, r2, #1
 8007818:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	68da      	ldr	r2, [r3, #12]
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	f042 0220 	orr.w	r2, r2, #32
 8007828:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800782a:	2300      	movs	r3, #0
}
 800782c:	4618      	mov	r0, r3
 800782e:	3714      	adds	r7, #20
 8007830:	46bd      	mov	sp, r7
 8007832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007836:	4770      	bx	lr

08007838 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007838:	b480      	push	{r7}
 800783a:	b095      	sub	sp, #84	; 0x54
 800783c:	af00      	add	r7, sp, #0
 800783e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	330c      	adds	r3, #12
 8007846:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007848:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800784a:	e853 3f00 	ldrex	r3, [r3]
 800784e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007852:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007856:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	330c      	adds	r3, #12
 800785e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007860:	643a      	str	r2, [r7, #64]	; 0x40
 8007862:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007864:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007866:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007868:	e841 2300 	strex	r3, r2, [r1]
 800786c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800786e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007870:	2b00      	cmp	r3, #0
 8007872:	d1e5      	bne.n	8007840 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	3314      	adds	r3, #20
 800787a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800787c:	6a3b      	ldr	r3, [r7, #32]
 800787e:	e853 3f00 	ldrex	r3, [r3]
 8007882:	61fb      	str	r3, [r7, #28]
   return(result);
 8007884:	69fb      	ldr	r3, [r7, #28]
 8007886:	f023 0301 	bic.w	r3, r3, #1
 800788a:	64bb      	str	r3, [r7, #72]	; 0x48
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	3314      	adds	r3, #20
 8007892:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007894:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007896:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007898:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800789a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800789c:	e841 2300 	strex	r3, r2, [r1]
 80078a0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80078a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d1e5      	bne.n	8007874 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078ac:	2b01      	cmp	r3, #1
 80078ae:	d119      	bne.n	80078e4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	330c      	adds	r3, #12
 80078b6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	e853 3f00 	ldrex	r3, [r3]
 80078be:	60bb      	str	r3, [r7, #8]
   return(result);
 80078c0:	68bb      	ldr	r3, [r7, #8]
 80078c2:	f023 0310 	bic.w	r3, r3, #16
 80078c6:	647b      	str	r3, [r7, #68]	; 0x44
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	330c      	adds	r3, #12
 80078ce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80078d0:	61ba      	str	r2, [r7, #24]
 80078d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078d4:	6979      	ldr	r1, [r7, #20]
 80078d6:	69ba      	ldr	r2, [r7, #24]
 80078d8:	e841 2300 	strex	r3, r2, [r1]
 80078dc:	613b      	str	r3, [r7, #16]
   return(result);
 80078de:	693b      	ldr	r3, [r7, #16]
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d1e5      	bne.n	80078b0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	2220      	movs	r2, #32
 80078e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	2200      	movs	r2, #0
 80078f0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80078f2:	bf00      	nop
 80078f4:	3754      	adds	r7, #84	; 0x54
 80078f6:	46bd      	mov	sp, r7
 80078f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fc:	4770      	bx	lr

080078fe <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80078fe:	b580      	push	{r7, lr}
 8007900:	b084      	sub	sp, #16
 8007902:	af00      	add	r7, sp, #0
 8007904:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800790a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	2200      	movs	r2, #0
 8007910:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	2200      	movs	r2, #0
 8007916:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007918:	68f8      	ldr	r0, [r7, #12]
 800791a:	f7ff fecb 	bl	80076b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800791e:	bf00      	nop
 8007920:	3710      	adds	r7, #16
 8007922:	46bd      	mov	sp, r7
 8007924:	bd80      	pop	{r7, pc}

08007926 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007926:	b480      	push	{r7}
 8007928:	b085      	sub	sp, #20
 800792a:	af00      	add	r7, sp, #0
 800792c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007934:	b2db      	uxtb	r3, r3
 8007936:	2b21      	cmp	r3, #33	; 0x21
 8007938:	d13e      	bne.n	80079b8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	689b      	ldr	r3, [r3, #8]
 800793e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007942:	d114      	bne.n	800796e <UART_Transmit_IT+0x48>
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	691b      	ldr	r3, [r3, #16]
 8007948:	2b00      	cmp	r3, #0
 800794a:	d110      	bne.n	800796e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	6a1b      	ldr	r3, [r3, #32]
 8007950:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	881b      	ldrh	r3, [r3, #0]
 8007956:	461a      	mov	r2, r3
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007960:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	6a1b      	ldr	r3, [r3, #32]
 8007966:	1c9a      	adds	r2, r3, #2
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	621a      	str	r2, [r3, #32]
 800796c:	e008      	b.n	8007980 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	6a1b      	ldr	r3, [r3, #32]
 8007972:	1c59      	adds	r1, r3, #1
 8007974:	687a      	ldr	r2, [r7, #4]
 8007976:	6211      	str	r1, [r2, #32]
 8007978:	781a      	ldrb	r2, [r3, #0]
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007984:	b29b      	uxth	r3, r3
 8007986:	3b01      	subs	r3, #1
 8007988:	b29b      	uxth	r3, r3
 800798a:	687a      	ldr	r2, [r7, #4]
 800798c:	4619      	mov	r1, r3
 800798e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007990:	2b00      	cmp	r3, #0
 8007992:	d10f      	bne.n	80079b4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	68da      	ldr	r2, [r3, #12]
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80079a2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	68da      	ldr	r2, [r3, #12]
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80079b2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80079b4:	2300      	movs	r3, #0
 80079b6:	e000      	b.n	80079ba <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80079b8:	2302      	movs	r3, #2
  }
}
 80079ba:	4618      	mov	r0, r3
 80079bc:	3714      	adds	r7, #20
 80079be:	46bd      	mov	sp, r7
 80079c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c4:	4770      	bx	lr

080079c6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80079c6:	b580      	push	{r7, lr}
 80079c8:	b082      	sub	sp, #8
 80079ca:	af00      	add	r7, sp, #0
 80079cc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	68da      	ldr	r2, [r3, #12]
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80079dc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	2220      	movs	r2, #32
 80079e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80079e6:	6878      	ldr	r0, [r7, #4]
 80079e8:	f7ff fe5a 	bl	80076a0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80079ec:	2300      	movs	r3, #0
}
 80079ee:	4618      	mov	r0, r3
 80079f0:	3708      	adds	r7, #8
 80079f2:	46bd      	mov	sp, r7
 80079f4:	bd80      	pop	{r7, pc}

080079f6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80079f6:	b580      	push	{r7, lr}
 80079f8:	b08c      	sub	sp, #48	; 0x30
 80079fa:	af00      	add	r7, sp, #0
 80079fc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007a04:	b2db      	uxtb	r3, r3
 8007a06:	2b22      	cmp	r3, #34	; 0x22
 8007a08:	f040 80ab 	bne.w	8007b62 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	689b      	ldr	r3, [r3, #8]
 8007a10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a14:	d117      	bne.n	8007a46 <UART_Receive_IT+0x50>
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	691b      	ldr	r3, [r3, #16]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d113      	bne.n	8007a46 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007a1e:	2300      	movs	r3, #0
 8007a20:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a26:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	685b      	ldr	r3, [r3, #4]
 8007a2e:	b29b      	uxth	r3, r3
 8007a30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a34:	b29a      	uxth	r2, r3
 8007a36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a38:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a3e:	1c9a      	adds	r2, r3, #2
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	629a      	str	r2, [r3, #40]	; 0x28
 8007a44:	e026      	b.n	8007a94 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a4a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007a4c:	2300      	movs	r3, #0
 8007a4e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	689b      	ldr	r3, [r3, #8]
 8007a54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a58:	d007      	beq.n	8007a6a <UART_Receive_IT+0x74>
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	689b      	ldr	r3, [r3, #8]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d10a      	bne.n	8007a78 <UART_Receive_IT+0x82>
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	691b      	ldr	r3, [r3, #16]
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d106      	bne.n	8007a78 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	685b      	ldr	r3, [r3, #4]
 8007a70:	b2da      	uxtb	r2, r3
 8007a72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a74:	701a      	strb	r2, [r3, #0]
 8007a76:	e008      	b.n	8007a8a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	685b      	ldr	r3, [r3, #4]
 8007a7e:	b2db      	uxtb	r3, r3
 8007a80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a84:	b2da      	uxtb	r2, r3
 8007a86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a88:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a8e:	1c5a      	adds	r2, r3, #1
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007a98:	b29b      	uxth	r3, r3
 8007a9a:	3b01      	subs	r3, #1
 8007a9c:	b29b      	uxth	r3, r3
 8007a9e:	687a      	ldr	r2, [r7, #4]
 8007aa0:	4619      	mov	r1, r3
 8007aa2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d15a      	bne.n	8007b5e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	68da      	ldr	r2, [r3, #12]
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	f022 0220 	bic.w	r2, r2, #32
 8007ab6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	68da      	ldr	r2, [r3, #12]
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007ac6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	695a      	ldr	r2, [r3, #20]
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	f022 0201 	bic.w	r2, r2, #1
 8007ad6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	2220      	movs	r2, #32
 8007adc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ae4:	2b01      	cmp	r3, #1
 8007ae6:	d135      	bne.n	8007b54 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	2200      	movs	r2, #0
 8007aec:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	330c      	adds	r3, #12
 8007af4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007af6:	697b      	ldr	r3, [r7, #20]
 8007af8:	e853 3f00 	ldrex	r3, [r3]
 8007afc:	613b      	str	r3, [r7, #16]
   return(result);
 8007afe:	693b      	ldr	r3, [r7, #16]
 8007b00:	f023 0310 	bic.w	r3, r3, #16
 8007b04:	627b      	str	r3, [r7, #36]	; 0x24
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	330c      	adds	r3, #12
 8007b0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b0e:	623a      	str	r2, [r7, #32]
 8007b10:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b12:	69f9      	ldr	r1, [r7, #28]
 8007b14:	6a3a      	ldr	r2, [r7, #32]
 8007b16:	e841 2300 	strex	r3, r2, [r1]
 8007b1a:	61bb      	str	r3, [r7, #24]
   return(result);
 8007b1c:	69bb      	ldr	r3, [r7, #24]
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d1e5      	bne.n	8007aee <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	f003 0310 	and.w	r3, r3, #16
 8007b2c:	2b10      	cmp	r3, #16
 8007b2e:	d10a      	bne.n	8007b46 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007b30:	2300      	movs	r3, #0
 8007b32:	60fb      	str	r3, [r7, #12]
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	60fb      	str	r3, [r7, #12]
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	685b      	ldr	r3, [r3, #4]
 8007b42:	60fb      	str	r3, [r7, #12]
 8007b44:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007b4a:	4619      	mov	r1, r3
 8007b4c:	6878      	ldr	r0, [r7, #4]
 8007b4e:	f7ff fdbb 	bl	80076c8 <HAL_UARTEx_RxEventCallback>
 8007b52:	e002      	b.n	8007b5a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007b54:	6878      	ldr	r0, [r7, #4]
 8007b56:	f7f9 fcef 	bl	8001538 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007b5a:	2300      	movs	r3, #0
 8007b5c:	e002      	b.n	8007b64 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8007b5e:	2300      	movs	r3, #0
 8007b60:	e000      	b.n	8007b64 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8007b62:	2302      	movs	r3, #2
  }
}
 8007b64:	4618      	mov	r0, r3
 8007b66:	3730      	adds	r7, #48	; 0x30
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	bd80      	pop	{r7, pc}

08007b6c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007b6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007b70:	b0c0      	sub	sp, #256	; 0x100
 8007b72:	af00      	add	r7, sp, #0
 8007b74:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007b78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	691b      	ldr	r3, [r3, #16]
 8007b80:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007b84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b88:	68d9      	ldr	r1, [r3, #12]
 8007b8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b8e:	681a      	ldr	r2, [r3, #0]
 8007b90:	ea40 0301 	orr.w	r3, r0, r1
 8007b94:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007b96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b9a:	689a      	ldr	r2, [r3, #8]
 8007b9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ba0:	691b      	ldr	r3, [r3, #16]
 8007ba2:	431a      	orrs	r2, r3
 8007ba4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ba8:	695b      	ldr	r3, [r3, #20]
 8007baa:	431a      	orrs	r2, r3
 8007bac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007bb0:	69db      	ldr	r3, [r3, #28]
 8007bb2:	4313      	orrs	r3, r2
 8007bb4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007bb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	68db      	ldr	r3, [r3, #12]
 8007bc0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007bc4:	f021 010c 	bic.w	r1, r1, #12
 8007bc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007bcc:	681a      	ldr	r2, [r3, #0]
 8007bce:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007bd2:	430b      	orrs	r3, r1
 8007bd4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007bd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	695b      	ldr	r3, [r3, #20]
 8007bde:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007be2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007be6:	6999      	ldr	r1, [r3, #24]
 8007be8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007bec:	681a      	ldr	r2, [r3, #0]
 8007bee:	ea40 0301 	orr.w	r3, r0, r1
 8007bf2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007bf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007bf8:	681a      	ldr	r2, [r3, #0]
 8007bfa:	4b8f      	ldr	r3, [pc, #572]	; (8007e38 <UART_SetConfig+0x2cc>)
 8007bfc:	429a      	cmp	r2, r3
 8007bfe:	d005      	beq.n	8007c0c <UART_SetConfig+0xa0>
 8007c00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c04:	681a      	ldr	r2, [r3, #0]
 8007c06:	4b8d      	ldr	r3, [pc, #564]	; (8007e3c <UART_SetConfig+0x2d0>)
 8007c08:	429a      	cmp	r2, r3
 8007c0a:	d104      	bne.n	8007c16 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007c0c:	f7fe f932 	bl	8005e74 <HAL_RCC_GetPCLK2Freq>
 8007c10:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007c14:	e003      	b.n	8007c1e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007c16:	f7fe f919 	bl	8005e4c <HAL_RCC_GetPCLK1Freq>
 8007c1a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007c1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c22:	69db      	ldr	r3, [r3, #28]
 8007c24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007c28:	f040 810c 	bne.w	8007e44 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007c2c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007c30:	2200      	movs	r2, #0
 8007c32:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007c36:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007c3a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007c3e:	4622      	mov	r2, r4
 8007c40:	462b      	mov	r3, r5
 8007c42:	1891      	adds	r1, r2, r2
 8007c44:	65b9      	str	r1, [r7, #88]	; 0x58
 8007c46:	415b      	adcs	r3, r3
 8007c48:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007c4a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007c4e:	4621      	mov	r1, r4
 8007c50:	eb12 0801 	adds.w	r8, r2, r1
 8007c54:	4629      	mov	r1, r5
 8007c56:	eb43 0901 	adc.w	r9, r3, r1
 8007c5a:	f04f 0200 	mov.w	r2, #0
 8007c5e:	f04f 0300 	mov.w	r3, #0
 8007c62:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007c66:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007c6a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007c6e:	4690      	mov	r8, r2
 8007c70:	4699      	mov	r9, r3
 8007c72:	4623      	mov	r3, r4
 8007c74:	eb18 0303 	adds.w	r3, r8, r3
 8007c78:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007c7c:	462b      	mov	r3, r5
 8007c7e:	eb49 0303 	adc.w	r3, r9, r3
 8007c82:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007c86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c8a:	685b      	ldr	r3, [r3, #4]
 8007c8c:	2200      	movs	r2, #0
 8007c8e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007c92:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007c96:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007c9a:	460b      	mov	r3, r1
 8007c9c:	18db      	adds	r3, r3, r3
 8007c9e:	653b      	str	r3, [r7, #80]	; 0x50
 8007ca0:	4613      	mov	r3, r2
 8007ca2:	eb42 0303 	adc.w	r3, r2, r3
 8007ca6:	657b      	str	r3, [r7, #84]	; 0x54
 8007ca8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007cac:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007cb0:	f7f8 ff2c 	bl	8000b0c <__aeabi_uldivmod>
 8007cb4:	4602      	mov	r2, r0
 8007cb6:	460b      	mov	r3, r1
 8007cb8:	4b61      	ldr	r3, [pc, #388]	; (8007e40 <UART_SetConfig+0x2d4>)
 8007cba:	fba3 2302 	umull	r2, r3, r3, r2
 8007cbe:	095b      	lsrs	r3, r3, #5
 8007cc0:	011c      	lsls	r4, r3, #4
 8007cc2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007cc6:	2200      	movs	r2, #0
 8007cc8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007ccc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007cd0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007cd4:	4642      	mov	r2, r8
 8007cd6:	464b      	mov	r3, r9
 8007cd8:	1891      	adds	r1, r2, r2
 8007cda:	64b9      	str	r1, [r7, #72]	; 0x48
 8007cdc:	415b      	adcs	r3, r3
 8007cde:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007ce0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007ce4:	4641      	mov	r1, r8
 8007ce6:	eb12 0a01 	adds.w	sl, r2, r1
 8007cea:	4649      	mov	r1, r9
 8007cec:	eb43 0b01 	adc.w	fp, r3, r1
 8007cf0:	f04f 0200 	mov.w	r2, #0
 8007cf4:	f04f 0300 	mov.w	r3, #0
 8007cf8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007cfc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007d00:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007d04:	4692      	mov	sl, r2
 8007d06:	469b      	mov	fp, r3
 8007d08:	4643      	mov	r3, r8
 8007d0a:	eb1a 0303 	adds.w	r3, sl, r3
 8007d0e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007d12:	464b      	mov	r3, r9
 8007d14:	eb4b 0303 	adc.w	r3, fp, r3
 8007d18:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007d1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d20:	685b      	ldr	r3, [r3, #4]
 8007d22:	2200      	movs	r2, #0
 8007d24:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007d28:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007d2c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007d30:	460b      	mov	r3, r1
 8007d32:	18db      	adds	r3, r3, r3
 8007d34:	643b      	str	r3, [r7, #64]	; 0x40
 8007d36:	4613      	mov	r3, r2
 8007d38:	eb42 0303 	adc.w	r3, r2, r3
 8007d3c:	647b      	str	r3, [r7, #68]	; 0x44
 8007d3e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007d42:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007d46:	f7f8 fee1 	bl	8000b0c <__aeabi_uldivmod>
 8007d4a:	4602      	mov	r2, r0
 8007d4c:	460b      	mov	r3, r1
 8007d4e:	4611      	mov	r1, r2
 8007d50:	4b3b      	ldr	r3, [pc, #236]	; (8007e40 <UART_SetConfig+0x2d4>)
 8007d52:	fba3 2301 	umull	r2, r3, r3, r1
 8007d56:	095b      	lsrs	r3, r3, #5
 8007d58:	2264      	movs	r2, #100	; 0x64
 8007d5a:	fb02 f303 	mul.w	r3, r2, r3
 8007d5e:	1acb      	subs	r3, r1, r3
 8007d60:	00db      	lsls	r3, r3, #3
 8007d62:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007d66:	4b36      	ldr	r3, [pc, #216]	; (8007e40 <UART_SetConfig+0x2d4>)
 8007d68:	fba3 2302 	umull	r2, r3, r3, r2
 8007d6c:	095b      	lsrs	r3, r3, #5
 8007d6e:	005b      	lsls	r3, r3, #1
 8007d70:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007d74:	441c      	add	r4, r3
 8007d76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007d7a:	2200      	movs	r2, #0
 8007d7c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007d80:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007d84:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007d88:	4642      	mov	r2, r8
 8007d8a:	464b      	mov	r3, r9
 8007d8c:	1891      	adds	r1, r2, r2
 8007d8e:	63b9      	str	r1, [r7, #56]	; 0x38
 8007d90:	415b      	adcs	r3, r3
 8007d92:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007d94:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007d98:	4641      	mov	r1, r8
 8007d9a:	1851      	adds	r1, r2, r1
 8007d9c:	6339      	str	r1, [r7, #48]	; 0x30
 8007d9e:	4649      	mov	r1, r9
 8007da0:	414b      	adcs	r3, r1
 8007da2:	637b      	str	r3, [r7, #52]	; 0x34
 8007da4:	f04f 0200 	mov.w	r2, #0
 8007da8:	f04f 0300 	mov.w	r3, #0
 8007dac:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007db0:	4659      	mov	r1, fp
 8007db2:	00cb      	lsls	r3, r1, #3
 8007db4:	4651      	mov	r1, sl
 8007db6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007dba:	4651      	mov	r1, sl
 8007dbc:	00ca      	lsls	r2, r1, #3
 8007dbe:	4610      	mov	r0, r2
 8007dc0:	4619      	mov	r1, r3
 8007dc2:	4603      	mov	r3, r0
 8007dc4:	4642      	mov	r2, r8
 8007dc6:	189b      	adds	r3, r3, r2
 8007dc8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007dcc:	464b      	mov	r3, r9
 8007dce:	460a      	mov	r2, r1
 8007dd0:	eb42 0303 	adc.w	r3, r2, r3
 8007dd4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007dd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ddc:	685b      	ldr	r3, [r3, #4]
 8007dde:	2200      	movs	r2, #0
 8007de0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007de4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007de8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007dec:	460b      	mov	r3, r1
 8007dee:	18db      	adds	r3, r3, r3
 8007df0:	62bb      	str	r3, [r7, #40]	; 0x28
 8007df2:	4613      	mov	r3, r2
 8007df4:	eb42 0303 	adc.w	r3, r2, r3
 8007df8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007dfa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007dfe:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007e02:	f7f8 fe83 	bl	8000b0c <__aeabi_uldivmod>
 8007e06:	4602      	mov	r2, r0
 8007e08:	460b      	mov	r3, r1
 8007e0a:	4b0d      	ldr	r3, [pc, #52]	; (8007e40 <UART_SetConfig+0x2d4>)
 8007e0c:	fba3 1302 	umull	r1, r3, r3, r2
 8007e10:	095b      	lsrs	r3, r3, #5
 8007e12:	2164      	movs	r1, #100	; 0x64
 8007e14:	fb01 f303 	mul.w	r3, r1, r3
 8007e18:	1ad3      	subs	r3, r2, r3
 8007e1a:	00db      	lsls	r3, r3, #3
 8007e1c:	3332      	adds	r3, #50	; 0x32
 8007e1e:	4a08      	ldr	r2, [pc, #32]	; (8007e40 <UART_SetConfig+0x2d4>)
 8007e20:	fba2 2303 	umull	r2, r3, r2, r3
 8007e24:	095b      	lsrs	r3, r3, #5
 8007e26:	f003 0207 	and.w	r2, r3, #7
 8007e2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	4422      	add	r2, r4
 8007e32:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007e34:	e106      	b.n	8008044 <UART_SetConfig+0x4d8>
 8007e36:	bf00      	nop
 8007e38:	40011000 	.word	0x40011000
 8007e3c:	40011400 	.word	0x40011400
 8007e40:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007e44:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007e48:	2200      	movs	r2, #0
 8007e4a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007e4e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007e52:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007e56:	4642      	mov	r2, r8
 8007e58:	464b      	mov	r3, r9
 8007e5a:	1891      	adds	r1, r2, r2
 8007e5c:	6239      	str	r1, [r7, #32]
 8007e5e:	415b      	adcs	r3, r3
 8007e60:	627b      	str	r3, [r7, #36]	; 0x24
 8007e62:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007e66:	4641      	mov	r1, r8
 8007e68:	1854      	adds	r4, r2, r1
 8007e6a:	4649      	mov	r1, r9
 8007e6c:	eb43 0501 	adc.w	r5, r3, r1
 8007e70:	f04f 0200 	mov.w	r2, #0
 8007e74:	f04f 0300 	mov.w	r3, #0
 8007e78:	00eb      	lsls	r3, r5, #3
 8007e7a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007e7e:	00e2      	lsls	r2, r4, #3
 8007e80:	4614      	mov	r4, r2
 8007e82:	461d      	mov	r5, r3
 8007e84:	4643      	mov	r3, r8
 8007e86:	18e3      	adds	r3, r4, r3
 8007e88:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007e8c:	464b      	mov	r3, r9
 8007e8e:	eb45 0303 	adc.w	r3, r5, r3
 8007e92:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007e96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e9a:	685b      	ldr	r3, [r3, #4]
 8007e9c:	2200      	movs	r2, #0
 8007e9e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007ea2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007ea6:	f04f 0200 	mov.w	r2, #0
 8007eaa:	f04f 0300 	mov.w	r3, #0
 8007eae:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007eb2:	4629      	mov	r1, r5
 8007eb4:	008b      	lsls	r3, r1, #2
 8007eb6:	4621      	mov	r1, r4
 8007eb8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007ebc:	4621      	mov	r1, r4
 8007ebe:	008a      	lsls	r2, r1, #2
 8007ec0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007ec4:	f7f8 fe22 	bl	8000b0c <__aeabi_uldivmod>
 8007ec8:	4602      	mov	r2, r0
 8007eca:	460b      	mov	r3, r1
 8007ecc:	4b60      	ldr	r3, [pc, #384]	; (8008050 <UART_SetConfig+0x4e4>)
 8007ece:	fba3 2302 	umull	r2, r3, r3, r2
 8007ed2:	095b      	lsrs	r3, r3, #5
 8007ed4:	011c      	lsls	r4, r3, #4
 8007ed6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007eda:	2200      	movs	r2, #0
 8007edc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007ee0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007ee4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007ee8:	4642      	mov	r2, r8
 8007eea:	464b      	mov	r3, r9
 8007eec:	1891      	adds	r1, r2, r2
 8007eee:	61b9      	str	r1, [r7, #24]
 8007ef0:	415b      	adcs	r3, r3
 8007ef2:	61fb      	str	r3, [r7, #28]
 8007ef4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007ef8:	4641      	mov	r1, r8
 8007efa:	1851      	adds	r1, r2, r1
 8007efc:	6139      	str	r1, [r7, #16]
 8007efe:	4649      	mov	r1, r9
 8007f00:	414b      	adcs	r3, r1
 8007f02:	617b      	str	r3, [r7, #20]
 8007f04:	f04f 0200 	mov.w	r2, #0
 8007f08:	f04f 0300 	mov.w	r3, #0
 8007f0c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007f10:	4659      	mov	r1, fp
 8007f12:	00cb      	lsls	r3, r1, #3
 8007f14:	4651      	mov	r1, sl
 8007f16:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007f1a:	4651      	mov	r1, sl
 8007f1c:	00ca      	lsls	r2, r1, #3
 8007f1e:	4610      	mov	r0, r2
 8007f20:	4619      	mov	r1, r3
 8007f22:	4603      	mov	r3, r0
 8007f24:	4642      	mov	r2, r8
 8007f26:	189b      	adds	r3, r3, r2
 8007f28:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007f2c:	464b      	mov	r3, r9
 8007f2e:	460a      	mov	r2, r1
 8007f30:	eb42 0303 	adc.w	r3, r2, r3
 8007f34:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007f38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f3c:	685b      	ldr	r3, [r3, #4]
 8007f3e:	2200      	movs	r2, #0
 8007f40:	67bb      	str	r3, [r7, #120]	; 0x78
 8007f42:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007f44:	f04f 0200 	mov.w	r2, #0
 8007f48:	f04f 0300 	mov.w	r3, #0
 8007f4c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007f50:	4649      	mov	r1, r9
 8007f52:	008b      	lsls	r3, r1, #2
 8007f54:	4641      	mov	r1, r8
 8007f56:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007f5a:	4641      	mov	r1, r8
 8007f5c:	008a      	lsls	r2, r1, #2
 8007f5e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007f62:	f7f8 fdd3 	bl	8000b0c <__aeabi_uldivmod>
 8007f66:	4602      	mov	r2, r0
 8007f68:	460b      	mov	r3, r1
 8007f6a:	4611      	mov	r1, r2
 8007f6c:	4b38      	ldr	r3, [pc, #224]	; (8008050 <UART_SetConfig+0x4e4>)
 8007f6e:	fba3 2301 	umull	r2, r3, r3, r1
 8007f72:	095b      	lsrs	r3, r3, #5
 8007f74:	2264      	movs	r2, #100	; 0x64
 8007f76:	fb02 f303 	mul.w	r3, r2, r3
 8007f7a:	1acb      	subs	r3, r1, r3
 8007f7c:	011b      	lsls	r3, r3, #4
 8007f7e:	3332      	adds	r3, #50	; 0x32
 8007f80:	4a33      	ldr	r2, [pc, #204]	; (8008050 <UART_SetConfig+0x4e4>)
 8007f82:	fba2 2303 	umull	r2, r3, r2, r3
 8007f86:	095b      	lsrs	r3, r3, #5
 8007f88:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007f8c:	441c      	add	r4, r3
 8007f8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007f92:	2200      	movs	r2, #0
 8007f94:	673b      	str	r3, [r7, #112]	; 0x70
 8007f96:	677a      	str	r2, [r7, #116]	; 0x74
 8007f98:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007f9c:	4642      	mov	r2, r8
 8007f9e:	464b      	mov	r3, r9
 8007fa0:	1891      	adds	r1, r2, r2
 8007fa2:	60b9      	str	r1, [r7, #8]
 8007fa4:	415b      	adcs	r3, r3
 8007fa6:	60fb      	str	r3, [r7, #12]
 8007fa8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007fac:	4641      	mov	r1, r8
 8007fae:	1851      	adds	r1, r2, r1
 8007fb0:	6039      	str	r1, [r7, #0]
 8007fb2:	4649      	mov	r1, r9
 8007fb4:	414b      	adcs	r3, r1
 8007fb6:	607b      	str	r3, [r7, #4]
 8007fb8:	f04f 0200 	mov.w	r2, #0
 8007fbc:	f04f 0300 	mov.w	r3, #0
 8007fc0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007fc4:	4659      	mov	r1, fp
 8007fc6:	00cb      	lsls	r3, r1, #3
 8007fc8:	4651      	mov	r1, sl
 8007fca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007fce:	4651      	mov	r1, sl
 8007fd0:	00ca      	lsls	r2, r1, #3
 8007fd2:	4610      	mov	r0, r2
 8007fd4:	4619      	mov	r1, r3
 8007fd6:	4603      	mov	r3, r0
 8007fd8:	4642      	mov	r2, r8
 8007fda:	189b      	adds	r3, r3, r2
 8007fdc:	66bb      	str	r3, [r7, #104]	; 0x68
 8007fde:	464b      	mov	r3, r9
 8007fe0:	460a      	mov	r2, r1
 8007fe2:	eb42 0303 	adc.w	r3, r2, r3
 8007fe6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007fe8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007fec:	685b      	ldr	r3, [r3, #4]
 8007fee:	2200      	movs	r2, #0
 8007ff0:	663b      	str	r3, [r7, #96]	; 0x60
 8007ff2:	667a      	str	r2, [r7, #100]	; 0x64
 8007ff4:	f04f 0200 	mov.w	r2, #0
 8007ff8:	f04f 0300 	mov.w	r3, #0
 8007ffc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8008000:	4649      	mov	r1, r9
 8008002:	008b      	lsls	r3, r1, #2
 8008004:	4641      	mov	r1, r8
 8008006:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800800a:	4641      	mov	r1, r8
 800800c:	008a      	lsls	r2, r1, #2
 800800e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008012:	f7f8 fd7b 	bl	8000b0c <__aeabi_uldivmod>
 8008016:	4602      	mov	r2, r0
 8008018:	460b      	mov	r3, r1
 800801a:	4b0d      	ldr	r3, [pc, #52]	; (8008050 <UART_SetConfig+0x4e4>)
 800801c:	fba3 1302 	umull	r1, r3, r3, r2
 8008020:	095b      	lsrs	r3, r3, #5
 8008022:	2164      	movs	r1, #100	; 0x64
 8008024:	fb01 f303 	mul.w	r3, r1, r3
 8008028:	1ad3      	subs	r3, r2, r3
 800802a:	011b      	lsls	r3, r3, #4
 800802c:	3332      	adds	r3, #50	; 0x32
 800802e:	4a08      	ldr	r2, [pc, #32]	; (8008050 <UART_SetConfig+0x4e4>)
 8008030:	fba2 2303 	umull	r2, r3, r2, r3
 8008034:	095b      	lsrs	r3, r3, #5
 8008036:	f003 020f 	and.w	r2, r3, #15
 800803a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	4422      	add	r2, r4
 8008042:	609a      	str	r2, [r3, #8]
}
 8008044:	bf00      	nop
 8008046:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800804a:	46bd      	mov	sp, r7
 800804c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008050:	51eb851f 	.word	0x51eb851f

08008054 <malloc>:
 8008054:	4b02      	ldr	r3, [pc, #8]	; (8008060 <malloc+0xc>)
 8008056:	4601      	mov	r1, r0
 8008058:	6818      	ldr	r0, [r3, #0]
 800805a:	f000 b823 	b.w	80080a4 <_malloc_r>
 800805e:	bf00      	nop
 8008060:	20000084 	.word	0x20000084

08008064 <sbrk_aligned>:
 8008064:	b570      	push	{r4, r5, r6, lr}
 8008066:	4e0e      	ldr	r6, [pc, #56]	; (80080a0 <sbrk_aligned+0x3c>)
 8008068:	460c      	mov	r4, r1
 800806a:	6831      	ldr	r1, [r6, #0]
 800806c:	4605      	mov	r5, r0
 800806e:	b911      	cbnz	r1, 8008076 <sbrk_aligned+0x12>
 8008070:	f000 faf6 	bl	8008660 <_sbrk_r>
 8008074:	6030      	str	r0, [r6, #0]
 8008076:	4621      	mov	r1, r4
 8008078:	4628      	mov	r0, r5
 800807a:	f000 faf1 	bl	8008660 <_sbrk_r>
 800807e:	1c43      	adds	r3, r0, #1
 8008080:	d00a      	beq.n	8008098 <sbrk_aligned+0x34>
 8008082:	1cc4      	adds	r4, r0, #3
 8008084:	f024 0403 	bic.w	r4, r4, #3
 8008088:	42a0      	cmp	r0, r4
 800808a:	d007      	beq.n	800809c <sbrk_aligned+0x38>
 800808c:	1a21      	subs	r1, r4, r0
 800808e:	4628      	mov	r0, r5
 8008090:	f000 fae6 	bl	8008660 <_sbrk_r>
 8008094:	3001      	adds	r0, #1
 8008096:	d101      	bne.n	800809c <sbrk_aligned+0x38>
 8008098:	f04f 34ff 	mov.w	r4, #4294967295
 800809c:	4620      	mov	r0, r4
 800809e:	bd70      	pop	{r4, r5, r6, pc}
 80080a0:	2000053c 	.word	0x2000053c

080080a4 <_malloc_r>:
 80080a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80080a8:	1ccd      	adds	r5, r1, #3
 80080aa:	f025 0503 	bic.w	r5, r5, #3
 80080ae:	3508      	adds	r5, #8
 80080b0:	2d0c      	cmp	r5, #12
 80080b2:	bf38      	it	cc
 80080b4:	250c      	movcc	r5, #12
 80080b6:	2d00      	cmp	r5, #0
 80080b8:	4607      	mov	r7, r0
 80080ba:	db01      	blt.n	80080c0 <_malloc_r+0x1c>
 80080bc:	42a9      	cmp	r1, r5
 80080be:	d905      	bls.n	80080cc <_malloc_r+0x28>
 80080c0:	230c      	movs	r3, #12
 80080c2:	603b      	str	r3, [r7, #0]
 80080c4:	2600      	movs	r6, #0
 80080c6:	4630      	mov	r0, r6
 80080c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80080cc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80081a0 <_malloc_r+0xfc>
 80080d0:	f000 f868 	bl	80081a4 <__malloc_lock>
 80080d4:	f8d8 3000 	ldr.w	r3, [r8]
 80080d8:	461c      	mov	r4, r3
 80080da:	bb5c      	cbnz	r4, 8008134 <_malloc_r+0x90>
 80080dc:	4629      	mov	r1, r5
 80080de:	4638      	mov	r0, r7
 80080e0:	f7ff ffc0 	bl	8008064 <sbrk_aligned>
 80080e4:	1c43      	adds	r3, r0, #1
 80080e6:	4604      	mov	r4, r0
 80080e8:	d155      	bne.n	8008196 <_malloc_r+0xf2>
 80080ea:	f8d8 4000 	ldr.w	r4, [r8]
 80080ee:	4626      	mov	r6, r4
 80080f0:	2e00      	cmp	r6, #0
 80080f2:	d145      	bne.n	8008180 <_malloc_r+0xdc>
 80080f4:	2c00      	cmp	r4, #0
 80080f6:	d048      	beq.n	800818a <_malloc_r+0xe6>
 80080f8:	6823      	ldr	r3, [r4, #0]
 80080fa:	4631      	mov	r1, r6
 80080fc:	4638      	mov	r0, r7
 80080fe:	eb04 0903 	add.w	r9, r4, r3
 8008102:	f000 faad 	bl	8008660 <_sbrk_r>
 8008106:	4581      	cmp	r9, r0
 8008108:	d13f      	bne.n	800818a <_malloc_r+0xe6>
 800810a:	6821      	ldr	r1, [r4, #0]
 800810c:	1a6d      	subs	r5, r5, r1
 800810e:	4629      	mov	r1, r5
 8008110:	4638      	mov	r0, r7
 8008112:	f7ff ffa7 	bl	8008064 <sbrk_aligned>
 8008116:	3001      	adds	r0, #1
 8008118:	d037      	beq.n	800818a <_malloc_r+0xe6>
 800811a:	6823      	ldr	r3, [r4, #0]
 800811c:	442b      	add	r3, r5
 800811e:	6023      	str	r3, [r4, #0]
 8008120:	f8d8 3000 	ldr.w	r3, [r8]
 8008124:	2b00      	cmp	r3, #0
 8008126:	d038      	beq.n	800819a <_malloc_r+0xf6>
 8008128:	685a      	ldr	r2, [r3, #4]
 800812a:	42a2      	cmp	r2, r4
 800812c:	d12b      	bne.n	8008186 <_malloc_r+0xe2>
 800812e:	2200      	movs	r2, #0
 8008130:	605a      	str	r2, [r3, #4]
 8008132:	e00f      	b.n	8008154 <_malloc_r+0xb0>
 8008134:	6822      	ldr	r2, [r4, #0]
 8008136:	1b52      	subs	r2, r2, r5
 8008138:	d41f      	bmi.n	800817a <_malloc_r+0xd6>
 800813a:	2a0b      	cmp	r2, #11
 800813c:	d917      	bls.n	800816e <_malloc_r+0xca>
 800813e:	1961      	adds	r1, r4, r5
 8008140:	42a3      	cmp	r3, r4
 8008142:	6025      	str	r5, [r4, #0]
 8008144:	bf18      	it	ne
 8008146:	6059      	strne	r1, [r3, #4]
 8008148:	6863      	ldr	r3, [r4, #4]
 800814a:	bf08      	it	eq
 800814c:	f8c8 1000 	streq.w	r1, [r8]
 8008150:	5162      	str	r2, [r4, r5]
 8008152:	604b      	str	r3, [r1, #4]
 8008154:	4638      	mov	r0, r7
 8008156:	f104 060b 	add.w	r6, r4, #11
 800815a:	f000 f829 	bl	80081b0 <__malloc_unlock>
 800815e:	f026 0607 	bic.w	r6, r6, #7
 8008162:	1d23      	adds	r3, r4, #4
 8008164:	1af2      	subs	r2, r6, r3
 8008166:	d0ae      	beq.n	80080c6 <_malloc_r+0x22>
 8008168:	1b9b      	subs	r3, r3, r6
 800816a:	50a3      	str	r3, [r4, r2]
 800816c:	e7ab      	b.n	80080c6 <_malloc_r+0x22>
 800816e:	42a3      	cmp	r3, r4
 8008170:	6862      	ldr	r2, [r4, #4]
 8008172:	d1dd      	bne.n	8008130 <_malloc_r+0x8c>
 8008174:	f8c8 2000 	str.w	r2, [r8]
 8008178:	e7ec      	b.n	8008154 <_malloc_r+0xb0>
 800817a:	4623      	mov	r3, r4
 800817c:	6864      	ldr	r4, [r4, #4]
 800817e:	e7ac      	b.n	80080da <_malloc_r+0x36>
 8008180:	4634      	mov	r4, r6
 8008182:	6876      	ldr	r6, [r6, #4]
 8008184:	e7b4      	b.n	80080f0 <_malloc_r+0x4c>
 8008186:	4613      	mov	r3, r2
 8008188:	e7cc      	b.n	8008124 <_malloc_r+0x80>
 800818a:	230c      	movs	r3, #12
 800818c:	603b      	str	r3, [r7, #0]
 800818e:	4638      	mov	r0, r7
 8008190:	f000 f80e 	bl	80081b0 <__malloc_unlock>
 8008194:	e797      	b.n	80080c6 <_malloc_r+0x22>
 8008196:	6025      	str	r5, [r4, #0]
 8008198:	e7dc      	b.n	8008154 <_malloc_r+0xb0>
 800819a:	605b      	str	r3, [r3, #4]
 800819c:	deff      	udf	#255	; 0xff
 800819e:	bf00      	nop
 80081a0:	20000538 	.word	0x20000538

080081a4 <__malloc_lock>:
 80081a4:	4801      	ldr	r0, [pc, #4]	; (80081ac <__malloc_lock+0x8>)
 80081a6:	f000 baa7 	b.w	80086f8 <__retarget_lock_acquire_recursive>
 80081aa:	bf00      	nop
 80081ac:	20000680 	.word	0x20000680

080081b0 <__malloc_unlock>:
 80081b0:	4801      	ldr	r0, [pc, #4]	; (80081b8 <__malloc_unlock+0x8>)
 80081b2:	f000 baa2 	b.w	80086fa <__retarget_lock_release_recursive>
 80081b6:	bf00      	nop
 80081b8:	20000680 	.word	0x20000680

080081bc <std>:
 80081bc:	2300      	movs	r3, #0
 80081be:	b510      	push	{r4, lr}
 80081c0:	4604      	mov	r4, r0
 80081c2:	e9c0 3300 	strd	r3, r3, [r0]
 80081c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80081ca:	6083      	str	r3, [r0, #8]
 80081cc:	8181      	strh	r1, [r0, #12]
 80081ce:	6643      	str	r3, [r0, #100]	; 0x64
 80081d0:	81c2      	strh	r2, [r0, #14]
 80081d2:	6183      	str	r3, [r0, #24]
 80081d4:	4619      	mov	r1, r3
 80081d6:	2208      	movs	r2, #8
 80081d8:	305c      	adds	r0, #92	; 0x5c
 80081da:	f000 fa05 	bl	80085e8 <memset>
 80081de:	4b05      	ldr	r3, [pc, #20]	; (80081f4 <std+0x38>)
 80081e0:	6263      	str	r3, [r4, #36]	; 0x24
 80081e2:	4b05      	ldr	r3, [pc, #20]	; (80081f8 <std+0x3c>)
 80081e4:	62a3      	str	r3, [r4, #40]	; 0x28
 80081e6:	4b05      	ldr	r3, [pc, #20]	; (80081fc <std+0x40>)
 80081e8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80081ea:	4b05      	ldr	r3, [pc, #20]	; (8008200 <std+0x44>)
 80081ec:	6224      	str	r4, [r4, #32]
 80081ee:	6323      	str	r3, [r4, #48]	; 0x30
 80081f0:	bd10      	pop	{r4, pc}
 80081f2:	bf00      	nop
 80081f4:	08008439 	.word	0x08008439
 80081f8:	0800845b 	.word	0x0800845b
 80081fc:	08008493 	.word	0x08008493
 8008200:	080084b7 	.word	0x080084b7

08008204 <stdio_exit_handler>:
 8008204:	4a02      	ldr	r2, [pc, #8]	; (8008210 <stdio_exit_handler+0xc>)
 8008206:	4903      	ldr	r1, [pc, #12]	; (8008214 <stdio_exit_handler+0x10>)
 8008208:	4803      	ldr	r0, [pc, #12]	; (8008218 <stdio_exit_handler+0x14>)
 800820a:	f000 b869 	b.w	80082e0 <_fwalk_sglue>
 800820e:	bf00      	nop
 8008210:	2000002c 	.word	0x2000002c
 8008214:	080090f9 	.word	0x080090f9
 8008218:	20000038 	.word	0x20000038

0800821c <cleanup_stdio>:
 800821c:	6841      	ldr	r1, [r0, #4]
 800821e:	4b0c      	ldr	r3, [pc, #48]	; (8008250 <cleanup_stdio+0x34>)
 8008220:	4299      	cmp	r1, r3
 8008222:	b510      	push	{r4, lr}
 8008224:	4604      	mov	r4, r0
 8008226:	d001      	beq.n	800822c <cleanup_stdio+0x10>
 8008228:	f000 ff66 	bl	80090f8 <_fflush_r>
 800822c:	68a1      	ldr	r1, [r4, #8]
 800822e:	4b09      	ldr	r3, [pc, #36]	; (8008254 <cleanup_stdio+0x38>)
 8008230:	4299      	cmp	r1, r3
 8008232:	d002      	beq.n	800823a <cleanup_stdio+0x1e>
 8008234:	4620      	mov	r0, r4
 8008236:	f000 ff5f 	bl	80090f8 <_fflush_r>
 800823a:	68e1      	ldr	r1, [r4, #12]
 800823c:	4b06      	ldr	r3, [pc, #24]	; (8008258 <cleanup_stdio+0x3c>)
 800823e:	4299      	cmp	r1, r3
 8008240:	d004      	beq.n	800824c <cleanup_stdio+0x30>
 8008242:	4620      	mov	r0, r4
 8008244:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008248:	f000 bf56 	b.w	80090f8 <_fflush_r>
 800824c:	bd10      	pop	{r4, pc}
 800824e:	bf00      	nop
 8008250:	20000540 	.word	0x20000540
 8008254:	200005a8 	.word	0x200005a8
 8008258:	20000610 	.word	0x20000610

0800825c <global_stdio_init.part.0>:
 800825c:	b510      	push	{r4, lr}
 800825e:	4b0b      	ldr	r3, [pc, #44]	; (800828c <global_stdio_init.part.0+0x30>)
 8008260:	4c0b      	ldr	r4, [pc, #44]	; (8008290 <global_stdio_init.part.0+0x34>)
 8008262:	4a0c      	ldr	r2, [pc, #48]	; (8008294 <global_stdio_init.part.0+0x38>)
 8008264:	601a      	str	r2, [r3, #0]
 8008266:	4620      	mov	r0, r4
 8008268:	2200      	movs	r2, #0
 800826a:	2104      	movs	r1, #4
 800826c:	f7ff ffa6 	bl	80081bc <std>
 8008270:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8008274:	2201      	movs	r2, #1
 8008276:	2109      	movs	r1, #9
 8008278:	f7ff ffa0 	bl	80081bc <std>
 800827c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8008280:	2202      	movs	r2, #2
 8008282:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008286:	2112      	movs	r1, #18
 8008288:	f7ff bf98 	b.w	80081bc <std>
 800828c:	20000678 	.word	0x20000678
 8008290:	20000540 	.word	0x20000540
 8008294:	08008205 	.word	0x08008205

08008298 <__sfp_lock_acquire>:
 8008298:	4801      	ldr	r0, [pc, #4]	; (80082a0 <__sfp_lock_acquire+0x8>)
 800829a:	f000 ba2d 	b.w	80086f8 <__retarget_lock_acquire_recursive>
 800829e:	bf00      	nop
 80082a0:	20000681 	.word	0x20000681

080082a4 <__sfp_lock_release>:
 80082a4:	4801      	ldr	r0, [pc, #4]	; (80082ac <__sfp_lock_release+0x8>)
 80082a6:	f000 ba28 	b.w	80086fa <__retarget_lock_release_recursive>
 80082aa:	bf00      	nop
 80082ac:	20000681 	.word	0x20000681

080082b0 <__sinit>:
 80082b0:	b510      	push	{r4, lr}
 80082b2:	4604      	mov	r4, r0
 80082b4:	f7ff fff0 	bl	8008298 <__sfp_lock_acquire>
 80082b8:	6a23      	ldr	r3, [r4, #32]
 80082ba:	b11b      	cbz	r3, 80082c4 <__sinit+0x14>
 80082bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80082c0:	f7ff bff0 	b.w	80082a4 <__sfp_lock_release>
 80082c4:	4b04      	ldr	r3, [pc, #16]	; (80082d8 <__sinit+0x28>)
 80082c6:	6223      	str	r3, [r4, #32]
 80082c8:	4b04      	ldr	r3, [pc, #16]	; (80082dc <__sinit+0x2c>)
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d1f5      	bne.n	80082bc <__sinit+0xc>
 80082d0:	f7ff ffc4 	bl	800825c <global_stdio_init.part.0>
 80082d4:	e7f2      	b.n	80082bc <__sinit+0xc>
 80082d6:	bf00      	nop
 80082d8:	0800821d 	.word	0x0800821d
 80082dc:	20000678 	.word	0x20000678

080082e0 <_fwalk_sglue>:
 80082e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80082e4:	4607      	mov	r7, r0
 80082e6:	4688      	mov	r8, r1
 80082e8:	4614      	mov	r4, r2
 80082ea:	2600      	movs	r6, #0
 80082ec:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80082f0:	f1b9 0901 	subs.w	r9, r9, #1
 80082f4:	d505      	bpl.n	8008302 <_fwalk_sglue+0x22>
 80082f6:	6824      	ldr	r4, [r4, #0]
 80082f8:	2c00      	cmp	r4, #0
 80082fa:	d1f7      	bne.n	80082ec <_fwalk_sglue+0xc>
 80082fc:	4630      	mov	r0, r6
 80082fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008302:	89ab      	ldrh	r3, [r5, #12]
 8008304:	2b01      	cmp	r3, #1
 8008306:	d907      	bls.n	8008318 <_fwalk_sglue+0x38>
 8008308:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800830c:	3301      	adds	r3, #1
 800830e:	d003      	beq.n	8008318 <_fwalk_sglue+0x38>
 8008310:	4629      	mov	r1, r5
 8008312:	4638      	mov	r0, r7
 8008314:	47c0      	blx	r8
 8008316:	4306      	orrs	r6, r0
 8008318:	3568      	adds	r5, #104	; 0x68
 800831a:	e7e9      	b.n	80082f0 <_fwalk_sglue+0x10>

0800831c <iprintf>:
 800831c:	b40f      	push	{r0, r1, r2, r3}
 800831e:	b507      	push	{r0, r1, r2, lr}
 8008320:	4906      	ldr	r1, [pc, #24]	; (800833c <iprintf+0x20>)
 8008322:	ab04      	add	r3, sp, #16
 8008324:	6808      	ldr	r0, [r1, #0]
 8008326:	f853 2b04 	ldr.w	r2, [r3], #4
 800832a:	6881      	ldr	r1, [r0, #8]
 800832c:	9301      	str	r3, [sp, #4]
 800832e:	f000 fbb3 	bl	8008a98 <_vfiprintf_r>
 8008332:	b003      	add	sp, #12
 8008334:	f85d eb04 	ldr.w	lr, [sp], #4
 8008338:	b004      	add	sp, #16
 800833a:	4770      	bx	lr
 800833c:	20000084 	.word	0x20000084

08008340 <_puts_r>:
 8008340:	6a03      	ldr	r3, [r0, #32]
 8008342:	b570      	push	{r4, r5, r6, lr}
 8008344:	6884      	ldr	r4, [r0, #8]
 8008346:	4605      	mov	r5, r0
 8008348:	460e      	mov	r6, r1
 800834a:	b90b      	cbnz	r3, 8008350 <_puts_r+0x10>
 800834c:	f7ff ffb0 	bl	80082b0 <__sinit>
 8008350:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008352:	07db      	lsls	r3, r3, #31
 8008354:	d405      	bmi.n	8008362 <_puts_r+0x22>
 8008356:	89a3      	ldrh	r3, [r4, #12]
 8008358:	0598      	lsls	r0, r3, #22
 800835a:	d402      	bmi.n	8008362 <_puts_r+0x22>
 800835c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800835e:	f000 f9cb 	bl	80086f8 <__retarget_lock_acquire_recursive>
 8008362:	89a3      	ldrh	r3, [r4, #12]
 8008364:	0719      	lsls	r1, r3, #28
 8008366:	d513      	bpl.n	8008390 <_puts_r+0x50>
 8008368:	6923      	ldr	r3, [r4, #16]
 800836a:	b18b      	cbz	r3, 8008390 <_puts_r+0x50>
 800836c:	3e01      	subs	r6, #1
 800836e:	68a3      	ldr	r3, [r4, #8]
 8008370:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008374:	3b01      	subs	r3, #1
 8008376:	60a3      	str	r3, [r4, #8]
 8008378:	b9e9      	cbnz	r1, 80083b6 <_puts_r+0x76>
 800837a:	2b00      	cmp	r3, #0
 800837c:	da2e      	bge.n	80083dc <_puts_r+0x9c>
 800837e:	4622      	mov	r2, r4
 8008380:	210a      	movs	r1, #10
 8008382:	4628      	mov	r0, r5
 8008384:	f000 f89b 	bl	80084be <__swbuf_r>
 8008388:	3001      	adds	r0, #1
 800838a:	d007      	beq.n	800839c <_puts_r+0x5c>
 800838c:	250a      	movs	r5, #10
 800838e:	e007      	b.n	80083a0 <_puts_r+0x60>
 8008390:	4621      	mov	r1, r4
 8008392:	4628      	mov	r0, r5
 8008394:	f000 f8d0 	bl	8008538 <__swsetup_r>
 8008398:	2800      	cmp	r0, #0
 800839a:	d0e7      	beq.n	800836c <_puts_r+0x2c>
 800839c:	f04f 35ff 	mov.w	r5, #4294967295
 80083a0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80083a2:	07da      	lsls	r2, r3, #31
 80083a4:	d405      	bmi.n	80083b2 <_puts_r+0x72>
 80083a6:	89a3      	ldrh	r3, [r4, #12]
 80083a8:	059b      	lsls	r3, r3, #22
 80083aa:	d402      	bmi.n	80083b2 <_puts_r+0x72>
 80083ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80083ae:	f000 f9a4 	bl	80086fa <__retarget_lock_release_recursive>
 80083b2:	4628      	mov	r0, r5
 80083b4:	bd70      	pop	{r4, r5, r6, pc}
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	da04      	bge.n	80083c4 <_puts_r+0x84>
 80083ba:	69a2      	ldr	r2, [r4, #24]
 80083bc:	429a      	cmp	r2, r3
 80083be:	dc06      	bgt.n	80083ce <_puts_r+0x8e>
 80083c0:	290a      	cmp	r1, #10
 80083c2:	d004      	beq.n	80083ce <_puts_r+0x8e>
 80083c4:	6823      	ldr	r3, [r4, #0]
 80083c6:	1c5a      	adds	r2, r3, #1
 80083c8:	6022      	str	r2, [r4, #0]
 80083ca:	7019      	strb	r1, [r3, #0]
 80083cc:	e7cf      	b.n	800836e <_puts_r+0x2e>
 80083ce:	4622      	mov	r2, r4
 80083d0:	4628      	mov	r0, r5
 80083d2:	f000 f874 	bl	80084be <__swbuf_r>
 80083d6:	3001      	adds	r0, #1
 80083d8:	d1c9      	bne.n	800836e <_puts_r+0x2e>
 80083da:	e7df      	b.n	800839c <_puts_r+0x5c>
 80083dc:	6823      	ldr	r3, [r4, #0]
 80083de:	250a      	movs	r5, #10
 80083e0:	1c5a      	adds	r2, r3, #1
 80083e2:	6022      	str	r2, [r4, #0]
 80083e4:	701d      	strb	r5, [r3, #0]
 80083e6:	e7db      	b.n	80083a0 <_puts_r+0x60>

080083e8 <puts>:
 80083e8:	4b02      	ldr	r3, [pc, #8]	; (80083f4 <puts+0xc>)
 80083ea:	4601      	mov	r1, r0
 80083ec:	6818      	ldr	r0, [r3, #0]
 80083ee:	f7ff bfa7 	b.w	8008340 <_puts_r>
 80083f2:	bf00      	nop
 80083f4:	20000084 	.word	0x20000084

080083f8 <siprintf>:
 80083f8:	b40e      	push	{r1, r2, r3}
 80083fa:	b500      	push	{lr}
 80083fc:	b09c      	sub	sp, #112	; 0x70
 80083fe:	ab1d      	add	r3, sp, #116	; 0x74
 8008400:	9002      	str	r0, [sp, #8]
 8008402:	9006      	str	r0, [sp, #24]
 8008404:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008408:	4809      	ldr	r0, [pc, #36]	; (8008430 <siprintf+0x38>)
 800840a:	9107      	str	r1, [sp, #28]
 800840c:	9104      	str	r1, [sp, #16]
 800840e:	4909      	ldr	r1, [pc, #36]	; (8008434 <siprintf+0x3c>)
 8008410:	f853 2b04 	ldr.w	r2, [r3], #4
 8008414:	9105      	str	r1, [sp, #20]
 8008416:	6800      	ldr	r0, [r0, #0]
 8008418:	9301      	str	r3, [sp, #4]
 800841a:	a902      	add	r1, sp, #8
 800841c:	f000 fa14 	bl	8008848 <_svfiprintf_r>
 8008420:	9b02      	ldr	r3, [sp, #8]
 8008422:	2200      	movs	r2, #0
 8008424:	701a      	strb	r2, [r3, #0]
 8008426:	b01c      	add	sp, #112	; 0x70
 8008428:	f85d eb04 	ldr.w	lr, [sp], #4
 800842c:	b003      	add	sp, #12
 800842e:	4770      	bx	lr
 8008430:	20000084 	.word	0x20000084
 8008434:	ffff0208 	.word	0xffff0208

08008438 <__sread>:
 8008438:	b510      	push	{r4, lr}
 800843a:	460c      	mov	r4, r1
 800843c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008440:	f000 f8fc 	bl	800863c <_read_r>
 8008444:	2800      	cmp	r0, #0
 8008446:	bfab      	itete	ge
 8008448:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800844a:	89a3      	ldrhlt	r3, [r4, #12]
 800844c:	181b      	addge	r3, r3, r0
 800844e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008452:	bfac      	ite	ge
 8008454:	6563      	strge	r3, [r4, #84]	; 0x54
 8008456:	81a3      	strhlt	r3, [r4, #12]
 8008458:	bd10      	pop	{r4, pc}

0800845a <__swrite>:
 800845a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800845e:	461f      	mov	r7, r3
 8008460:	898b      	ldrh	r3, [r1, #12]
 8008462:	05db      	lsls	r3, r3, #23
 8008464:	4605      	mov	r5, r0
 8008466:	460c      	mov	r4, r1
 8008468:	4616      	mov	r6, r2
 800846a:	d505      	bpl.n	8008478 <__swrite+0x1e>
 800846c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008470:	2302      	movs	r3, #2
 8008472:	2200      	movs	r2, #0
 8008474:	f000 f8d0 	bl	8008618 <_lseek_r>
 8008478:	89a3      	ldrh	r3, [r4, #12]
 800847a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800847e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008482:	81a3      	strh	r3, [r4, #12]
 8008484:	4632      	mov	r2, r6
 8008486:	463b      	mov	r3, r7
 8008488:	4628      	mov	r0, r5
 800848a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800848e:	f000 b8f7 	b.w	8008680 <_write_r>

08008492 <__sseek>:
 8008492:	b510      	push	{r4, lr}
 8008494:	460c      	mov	r4, r1
 8008496:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800849a:	f000 f8bd 	bl	8008618 <_lseek_r>
 800849e:	1c43      	adds	r3, r0, #1
 80084a0:	89a3      	ldrh	r3, [r4, #12]
 80084a2:	bf15      	itete	ne
 80084a4:	6560      	strne	r0, [r4, #84]	; 0x54
 80084a6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80084aa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80084ae:	81a3      	strheq	r3, [r4, #12]
 80084b0:	bf18      	it	ne
 80084b2:	81a3      	strhne	r3, [r4, #12]
 80084b4:	bd10      	pop	{r4, pc}

080084b6 <__sclose>:
 80084b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80084ba:	f000 b89d 	b.w	80085f8 <_close_r>

080084be <__swbuf_r>:
 80084be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084c0:	460e      	mov	r6, r1
 80084c2:	4614      	mov	r4, r2
 80084c4:	4605      	mov	r5, r0
 80084c6:	b118      	cbz	r0, 80084d0 <__swbuf_r+0x12>
 80084c8:	6a03      	ldr	r3, [r0, #32]
 80084ca:	b90b      	cbnz	r3, 80084d0 <__swbuf_r+0x12>
 80084cc:	f7ff fef0 	bl	80082b0 <__sinit>
 80084d0:	69a3      	ldr	r3, [r4, #24]
 80084d2:	60a3      	str	r3, [r4, #8]
 80084d4:	89a3      	ldrh	r3, [r4, #12]
 80084d6:	071a      	lsls	r2, r3, #28
 80084d8:	d525      	bpl.n	8008526 <__swbuf_r+0x68>
 80084da:	6923      	ldr	r3, [r4, #16]
 80084dc:	b31b      	cbz	r3, 8008526 <__swbuf_r+0x68>
 80084de:	6823      	ldr	r3, [r4, #0]
 80084e0:	6922      	ldr	r2, [r4, #16]
 80084e2:	1a98      	subs	r0, r3, r2
 80084e4:	6963      	ldr	r3, [r4, #20]
 80084e6:	b2f6      	uxtb	r6, r6
 80084e8:	4283      	cmp	r3, r0
 80084ea:	4637      	mov	r7, r6
 80084ec:	dc04      	bgt.n	80084f8 <__swbuf_r+0x3a>
 80084ee:	4621      	mov	r1, r4
 80084f0:	4628      	mov	r0, r5
 80084f2:	f000 fe01 	bl	80090f8 <_fflush_r>
 80084f6:	b9e0      	cbnz	r0, 8008532 <__swbuf_r+0x74>
 80084f8:	68a3      	ldr	r3, [r4, #8]
 80084fa:	3b01      	subs	r3, #1
 80084fc:	60a3      	str	r3, [r4, #8]
 80084fe:	6823      	ldr	r3, [r4, #0]
 8008500:	1c5a      	adds	r2, r3, #1
 8008502:	6022      	str	r2, [r4, #0]
 8008504:	701e      	strb	r6, [r3, #0]
 8008506:	6962      	ldr	r2, [r4, #20]
 8008508:	1c43      	adds	r3, r0, #1
 800850a:	429a      	cmp	r2, r3
 800850c:	d004      	beq.n	8008518 <__swbuf_r+0x5a>
 800850e:	89a3      	ldrh	r3, [r4, #12]
 8008510:	07db      	lsls	r3, r3, #31
 8008512:	d506      	bpl.n	8008522 <__swbuf_r+0x64>
 8008514:	2e0a      	cmp	r6, #10
 8008516:	d104      	bne.n	8008522 <__swbuf_r+0x64>
 8008518:	4621      	mov	r1, r4
 800851a:	4628      	mov	r0, r5
 800851c:	f000 fdec 	bl	80090f8 <_fflush_r>
 8008520:	b938      	cbnz	r0, 8008532 <__swbuf_r+0x74>
 8008522:	4638      	mov	r0, r7
 8008524:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008526:	4621      	mov	r1, r4
 8008528:	4628      	mov	r0, r5
 800852a:	f000 f805 	bl	8008538 <__swsetup_r>
 800852e:	2800      	cmp	r0, #0
 8008530:	d0d5      	beq.n	80084de <__swbuf_r+0x20>
 8008532:	f04f 37ff 	mov.w	r7, #4294967295
 8008536:	e7f4      	b.n	8008522 <__swbuf_r+0x64>

08008538 <__swsetup_r>:
 8008538:	b538      	push	{r3, r4, r5, lr}
 800853a:	4b2a      	ldr	r3, [pc, #168]	; (80085e4 <__swsetup_r+0xac>)
 800853c:	4605      	mov	r5, r0
 800853e:	6818      	ldr	r0, [r3, #0]
 8008540:	460c      	mov	r4, r1
 8008542:	b118      	cbz	r0, 800854c <__swsetup_r+0x14>
 8008544:	6a03      	ldr	r3, [r0, #32]
 8008546:	b90b      	cbnz	r3, 800854c <__swsetup_r+0x14>
 8008548:	f7ff feb2 	bl	80082b0 <__sinit>
 800854c:	89a3      	ldrh	r3, [r4, #12]
 800854e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008552:	0718      	lsls	r0, r3, #28
 8008554:	d422      	bmi.n	800859c <__swsetup_r+0x64>
 8008556:	06d9      	lsls	r1, r3, #27
 8008558:	d407      	bmi.n	800856a <__swsetup_r+0x32>
 800855a:	2309      	movs	r3, #9
 800855c:	602b      	str	r3, [r5, #0]
 800855e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008562:	81a3      	strh	r3, [r4, #12]
 8008564:	f04f 30ff 	mov.w	r0, #4294967295
 8008568:	e034      	b.n	80085d4 <__swsetup_r+0x9c>
 800856a:	0758      	lsls	r0, r3, #29
 800856c:	d512      	bpl.n	8008594 <__swsetup_r+0x5c>
 800856e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008570:	b141      	cbz	r1, 8008584 <__swsetup_r+0x4c>
 8008572:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008576:	4299      	cmp	r1, r3
 8008578:	d002      	beq.n	8008580 <__swsetup_r+0x48>
 800857a:	4628      	mov	r0, r5
 800857c:	f000 f8be 	bl	80086fc <_free_r>
 8008580:	2300      	movs	r3, #0
 8008582:	6363      	str	r3, [r4, #52]	; 0x34
 8008584:	89a3      	ldrh	r3, [r4, #12]
 8008586:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800858a:	81a3      	strh	r3, [r4, #12]
 800858c:	2300      	movs	r3, #0
 800858e:	6063      	str	r3, [r4, #4]
 8008590:	6923      	ldr	r3, [r4, #16]
 8008592:	6023      	str	r3, [r4, #0]
 8008594:	89a3      	ldrh	r3, [r4, #12]
 8008596:	f043 0308 	orr.w	r3, r3, #8
 800859a:	81a3      	strh	r3, [r4, #12]
 800859c:	6923      	ldr	r3, [r4, #16]
 800859e:	b94b      	cbnz	r3, 80085b4 <__swsetup_r+0x7c>
 80085a0:	89a3      	ldrh	r3, [r4, #12]
 80085a2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80085a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80085aa:	d003      	beq.n	80085b4 <__swsetup_r+0x7c>
 80085ac:	4621      	mov	r1, r4
 80085ae:	4628      	mov	r0, r5
 80085b0:	f000 fdf0 	bl	8009194 <__smakebuf_r>
 80085b4:	89a0      	ldrh	r0, [r4, #12]
 80085b6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80085ba:	f010 0301 	ands.w	r3, r0, #1
 80085be:	d00a      	beq.n	80085d6 <__swsetup_r+0x9e>
 80085c0:	2300      	movs	r3, #0
 80085c2:	60a3      	str	r3, [r4, #8]
 80085c4:	6963      	ldr	r3, [r4, #20]
 80085c6:	425b      	negs	r3, r3
 80085c8:	61a3      	str	r3, [r4, #24]
 80085ca:	6923      	ldr	r3, [r4, #16]
 80085cc:	b943      	cbnz	r3, 80085e0 <__swsetup_r+0xa8>
 80085ce:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80085d2:	d1c4      	bne.n	800855e <__swsetup_r+0x26>
 80085d4:	bd38      	pop	{r3, r4, r5, pc}
 80085d6:	0781      	lsls	r1, r0, #30
 80085d8:	bf58      	it	pl
 80085da:	6963      	ldrpl	r3, [r4, #20]
 80085dc:	60a3      	str	r3, [r4, #8]
 80085de:	e7f4      	b.n	80085ca <__swsetup_r+0x92>
 80085e0:	2000      	movs	r0, #0
 80085e2:	e7f7      	b.n	80085d4 <__swsetup_r+0x9c>
 80085e4:	20000084 	.word	0x20000084

080085e8 <memset>:
 80085e8:	4402      	add	r2, r0
 80085ea:	4603      	mov	r3, r0
 80085ec:	4293      	cmp	r3, r2
 80085ee:	d100      	bne.n	80085f2 <memset+0xa>
 80085f0:	4770      	bx	lr
 80085f2:	f803 1b01 	strb.w	r1, [r3], #1
 80085f6:	e7f9      	b.n	80085ec <memset+0x4>

080085f8 <_close_r>:
 80085f8:	b538      	push	{r3, r4, r5, lr}
 80085fa:	4d06      	ldr	r5, [pc, #24]	; (8008614 <_close_r+0x1c>)
 80085fc:	2300      	movs	r3, #0
 80085fe:	4604      	mov	r4, r0
 8008600:	4608      	mov	r0, r1
 8008602:	602b      	str	r3, [r5, #0]
 8008604:	f7f9 f9ad 	bl	8001962 <_close>
 8008608:	1c43      	adds	r3, r0, #1
 800860a:	d102      	bne.n	8008612 <_close_r+0x1a>
 800860c:	682b      	ldr	r3, [r5, #0]
 800860e:	b103      	cbz	r3, 8008612 <_close_r+0x1a>
 8008610:	6023      	str	r3, [r4, #0]
 8008612:	bd38      	pop	{r3, r4, r5, pc}
 8008614:	2000067c 	.word	0x2000067c

08008618 <_lseek_r>:
 8008618:	b538      	push	{r3, r4, r5, lr}
 800861a:	4d07      	ldr	r5, [pc, #28]	; (8008638 <_lseek_r+0x20>)
 800861c:	4604      	mov	r4, r0
 800861e:	4608      	mov	r0, r1
 8008620:	4611      	mov	r1, r2
 8008622:	2200      	movs	r2, #0
 8008624:	602a      	str	r2, [r5, #0]
 8008626:	461a      	mov	r2, r3
 8008628:	f7f9 f9c2 	bl	80019b0 <_lseek>
 800862c:	1c43      	adds	r3, r0, #1
 800862e:	d102      	bne.n	8008636 <_lseek_r+0x1e>
 8008630:	682b      	ldr	r3, [r5, #0]
 8008632:	b103      	cbz	r3, 8008636 <_lseek_r+0x1e>
 8008634:	6023      	str	r3, [r4, #0]
 8008636:	bd38      	pop	{r3, r4, r5, pc}
 8008638:	2000067c 	.word	0x2000067c

0800863c <_read_r>:
 800863c:	b538      	push	{r3, r4, r5, lr}
 800863e:	4d07      	ldr	r5, [pc, #28]	; (800865c <_read_r+0x20>)
 8008640:	4604      	mov	r4, r0
 8008642:	4608      	mov	r0, r1
 8008644:	4611      	mov	r1, r2
 8008646:	2200      	movs	r2, #0
 8008648:	602a      	str	r2, [r5, #0]
 800864a:	461a      	mov	r2, r3
 800864c:	f7f9 f950 	bl	80018f0 <_read>
 8008650:	1c43      	adds	r3, r0, #1
 8008652:	d102      	bne.n	800865a <_read_r+0x1e>
 8008654:	682b      	ldr	r3, [r5, #0]
 8008656:	b103      	cbz	r3, 800865a <_read_r+0x1e>
 8008658:	6023      	str	r3, [r4, #0]
 800865a:	bd38      	pop	{r3, r4, r5, pc}
 800865c:	2000067c 	.word	0x2000067c

08008660 <_sbrk_r>:
 8008660:	b538      	push	{r3, r4, r5, lr}
 8008662:	4d06      	ldr	r5, [pc, #24]	; (800867c <_sbrk_r+0x1c>)
 8008664:	2300      	movs	r3, #0
 8008666:	4604      	mov	r4, r0
 8008668:	4608      	mov	r0, r1
 800866a:	602b      	str	r3, [r5, #0]
 800866c:	f7f9 f9ae 	bl	80019cc <_sbrk>
 8008670:	1c43      	adds	r3, r0, #1
 8008672:	d102      	bne.n	800867a <_sbrk_r+0x1a>
 8008674:	682b      	ldr	r3, [r5, #0]
 8008676:	b103      	cbz	r3, 800867a <_sbrk_r+0x1a>
 8008678:	6023      	str	r3, [r4, #0]
 800867a:	bd38      	pop	{r3, r4, r5, pc}
 800867c:	2000067c 	.word	0x2000067c

08008680 <_write_r>:
 8008680:	b538      	push	{r3, r4, r5, lr}
 8008682:	4d07      	ldr	r5, [pc, #28]	; (80086a0 <_write_r+0x20>)
 8008684:	4604      	mov	r4, r0
 8008686:	4608      	mov	r0, r1
 8008688:	4611      	mov	r1, r2
 800868a:	2200      	movs	r2, #0
 800868c:	602a      	str	r2, [r5, #0]
 800868e:	461a      	mov	r2, r3
 8008690:	f7f9 f94b 	bl	800192a <_write>
 8008694:	1c43      	adds	r3, r0, #1
 8008696:	d102      	bne.n	800869e <_write_r+0x1e>
 8008698:	682b      	ldr	r3, [r5, #0]
 800869a:	b103      	cbz	r3, 800869e <_write_r+0x1e>
 800869c:	6023      	str	r3, [r4, #0]
 800869e:	bd38      	pop	{r3, r4, r5, pc}
 80086a0:	2000067c 	.word	0x2000067c

080086a4 <__errno>:
 80086a4:	4b01      	ldr	r3, [pc, #4]	; (80086ac <__errno+0x8>)
 80086a6:	6818      	ldr	r0, [r3, #0]
 80086a8:	4770      	bx	lr
 80086aa:	bf00      	nop
 80086ac:	20000084 	.word	0x20000084

080086b0 <__libc_init_array>:
 80086b0:	b570      	push	{r4, r5, r6, lr}
 80086b2:	4d0d      	ldr	r5, [pc, #52]	; (80086e8 <__libc_init_array+0x38>)
 80086b4:	4c0d      	ldr	r4, [pc, #52]	; (80086ec <__libc_init_array+0x3c>)
 80086b6:	1b64      	subs	r4, r4, r5
 80086b8:	10a4      	asrs	r4, r4, #2
 80086ba:	2600      	movs	r6, #0
 80086bc:	42a6      	cmp	r6, r4
 80086be:	d109      	bne.n	80086d4 <__libc_init_array+0x24>
 80086c0:	4d0b      	ldr	r5, [pc, #44]	; (80086f0 <__libc_init_array+0x40>)
 80086c2:	4c0c      	ldr	r4, [pc, #48]	; (80086f4 <__libc_init_array+0x44>)
 80086c4:	f000 fe24 	bl	8009310 <_init>
 80086c8:	1b64      	subs	r4, r4, r5
 80086ca:	10a4      	asrs	r4, r4, #2
 80086cc:	2600      	movs	r6, #0
 80086ce:	42a6      	cmp	r6, r4
 80086d0:	d105      	bne.n	80086de <__libc_init_array+0x2e>
 80086d2:	bd70      	pop	{r4, r5, r6, pc}
 80086d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80086d8:	4798      	blx	r3
 80086da:	3601      	adds	r6, #1
 80086dc:	e7ee      	b.n	80086bc <__libc_init_array+0xc>
 80086de:	f855 3b04 	ldr.w	r3, [r5], #4
 80086e2:	4798      	blx	r3
 80086e4:	3601      	adds	r6, #1
 80086e6:	e7f2      	b.n	80086ce <__libc_init_array+0x1e>
 80086e8:	08013b9c 	.word	0x08013b9c
 80086ec:	08013b9c 	.word	0x08013b9c
 80086f0:	08013b9c 	.word	0x08013b9c
 80086f4:	08013ba0 	.word	0x08013ba0

080086f8 <__retarget_lock_acquire_recursive>:
 80086f8:	4770      	bx	lr

080086fa <__retarget_lock_release_recursive>:
 80086fa:	4770      	bx	lr

080086fc <_free_r>:
 80086fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80086fe:	2900      	cmp	r1, #0
 8008700:	d044      	beq.n	800878c <_free_r+0x90>
 8008702:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008706:	9001      	str	r0, [sp, #4]
 8008708:	2b00      	cmp	r3, #0
 800870a:	f1a1 0404 	sub.w	r4, r1, #4
 800870e:	bfb8      	it	lt
 8008710:	18e4      	addlt	r4, r4, r3
 8008712:	f7ff fd47 	bl	80081a4 <__malloc_lock>
 8008716:	4a1e      	ldr	r2, [pc, #120]	; (8008790 <_free_r+0x94>)
 8008718:	9801      	ldr	r0, [sp, #4]
 800871a:	6813      	ldr	r3, [r2, #0]
 800871c:	b933      	cbnz	r3, 800872c <_free_r+0x30>
 800871e:	6063      	str	r3, [r4, #4]
 8008720:	6014      	str	r4, [r2, #0]
 8008722:	b003      	add	sp, #12
 8008724:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008728:	f7ff bd42 	b.w	80081b0 <__malloc_unlock>
 800872c:	42a3      	cmp	r3, r4
 800872e:	d908      	bls.n	8008742 <_free_r+0x46>
 8008730:	6825      	ldr	r5, [r4, #0]
 8008732:	1961      	adds	r1, r4, r5
 8008734:	428b      	cmp	r3, r1
 8008736:	bf01      	itttt	eq
 8008738:	6819      	ldreq	r1, [r3, #0]
 800873a:	685b      	ldreq	r3, [r3, #4]
 800873c:	1949      	addeq	r1, r1, r5
 800873e:	6021      	streq	r1, [r4, #0]
 8008740:	e7ed      	b.n	800871e <_free_r+0x22>
 8008742:	461a      	mov	r2, r3
 8008744:	685b      	ldr	r3, [r3, #4]
 8008746:	b10b      	cbz	r3, 800874c <_free_r+0x50>
 8008748:	42a3      	cmp	r3, r4
 800874a:	d9fa      	bls.n	8008742 <_free_r+0x46>
 800874c:	6811      	ldr	r1, [r2, #0]
 800874e:	1855      	adds	r5, r2, r1
 8008750:	42a5      	cmp	r5, r4
 8008752:	d10b      	bne.n	800876c <_free_r+0x70>
 8008754:	6824      	ldr	r4, [r4, #0]
 8008756:	4421      	add	r1, r4
 8008758:	1854      	adds	r4, r2, r1
 800875a:	42a3      	cmp	r3, r4
 800875c:	6011      	str	r1, [r2, #0]
 800875e:	d1e0      	bne.n	8008722 <_free_r+0x26>
 8008760:	681c      	ldr	r4, [r3, #0]
 8008762:	685b      	ldr	r3, [r3, #4]
 8008764:	6053      	str	r3, [r2, #4]
 8008766:	440c      	add	r4, r1
 8008768:	6014      	str	r4, [r2, #0]
 800876a:	e7da      	b.n	8008722 <_free_r+0x26>
 800876c:	d902      	bls.n	8008774 <_free_r+0x78>
 800876e:	230c      	movs	r3, #12
 8008770:	6003      	str	r3, [r0, #0]
 8008772:	e7d6      	b.n	8008722 <_free_r+0x26>
 8008774:	6825      	ldr	r5, [r4, #0]
 8008776:	1961      	adds	r1, r4, r5
 8008778:	428b      	cmp	r3, r1
 800877a:	bf04      	itt	eq
 800877c:	6819      	ldreq	r1, [r3, #0]
 800877e:	685b      	ldreq	r3, [r3, #4]
 8008780:	6063      	str	r3, [r4, #4]
 8008782:	bf04      	itt	eq
 8008784:	1949      	addeq	r1, r1, r5
 8008786:	6021      	streq	r1, [r4, #0]
 8008788:	6054      	str	r4, [r2, #4]
 800878a:	e7ca      	b.n	8008722 <_free_r+0x26>
 800878c:	b003      	add	sp, #12
 800878e:	bd30      	pop	{r4, r5, pc}
 8008790:	20000538 	.word	0x20000538

08008794 <__ssputs_r>:
 8008794:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008798:	688e      	ldr	r6, [r1, #8]
 800879a:	461f      	mov	r7, r3
 800879c:	42be      	cmp	r6, r7
 800879e:	680b      	ldr	r3, [r1, #0]
 80087a0:	4682      	mov	sl, r0
 80087a2:	460c      	mov	r4, r1
 80087a4:	4690      	mov	r8, r2
 80087a6:	d82c      	bhi.n	8008802 <__ssputs_r+0x6e>
 80087a8:	898a      	ldrh	r2, [r1, #12]
 80087aa:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80087ae:	d026      	beq.n	80087fe <__ssputs_r+0x6a>
 80087b0:	6965      	ldr	r5, [r4, #20]
 80087b2:	6909      	ldr	r1, [r1, #16]
 80087b4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80087b8:	eba3 0901 	sub.w	r9, r3, r1
 80087bc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80087c0:	1c7b      	adds	r3, r7, #1
 80087c2:	444b      	add	r3, r9
 80087c4:	106d      	asrs	r5, r5, #1
 80087c6:	429d      	cmp	r5, r3
 80087c8:	bf38      	it	cc
 80087ca:	461d      	movcc	r5, r3
 80087cc:	0553      	lsls	r3, r2, #21
 80087ce:	d527      	bpl.n	8008820 <__ssputs_r+0x8c>
 80087d0:	4629      	mov	r1, r5
 80087d2:	f7ff fc67 	bl	80080a4 <_malloc_r>
 80087d6:	4606      	mov	r6, r0
 80087d8:	b360      	cbz	r0, 8008834 <__ssputs_r+0xa0>
 80087da:	6921      	ldr	r1, [r4, #16]
 80087dc:	464a      	mov	r2, r9
 80087de:	f000 fd51 	bl	8009284 <memcpy>
 80087e2:	89a3      	ldrh	r3, [r4, #12]
 80087e4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80087e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80087ec:	81a3      	strh	r3, [r4, #12]
 80087ee:	6126      	str	r6, [r4, #16]
 80087f0:	6165      	str	r5, [r4, #20]
 80087f2:	444e      	add	r6, r9
 80087f4:	eba5 0509 	sub.w	r5, r5, r9
 80087f8:	6026      	str	r6, [r4, #0]
 80087fa:	60a5      	str	r5, [r4, #8]
 80087fc:	463e      	mov	r6, r7
 80087fe:	42be      	cmp	r6, r7
 8008800:	d900      	bls.n	8008804 <__ssputs_r+0x70>
 8008802:	463e      	mov	r6, r7
 8008804:	6820      	ldr	r0, [r4, #0]
 8008806:	4632      	mov	r2, r6
 8008808:	4641      	mov	r1, r8
 800880a:	f000 fcff 	bl	800920c <memmove>
 800880e:	68a3      	ldr	r3, [r4, #8]
 8008810:	1b9b      	subs	r3, r3, r6
 8008812:	60a3      	str	r3, [r4, #8]
 8008814:	6823      	ldr	r3, [r4, #0]
 8008816:	4433      	add	r3, r6
 8008818:	6023      	str	r3, [r4, #0]
 800881a:	2000      	movs	r0, #0
 800881c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008820:	462a      	mov	r2, r5
 8008822:	f000 fd3d 	bl	80092a0 <_realloc_r>
 8008826:	4606      	mov	r6, r0
 8008828:	2800      	cmp	r0, #0
 800882a:	d1e0      	bne.n	80087ee <__ssputs_r+0x5a>
 800882c:	6921      	ldr	r1, [r4, #16]
 800882e:	4650      	mov	r0, sl
 8008830:	f7ff ff64 	bl	80086fc <_free_r>
 8008834:	230c      	movs	r3, #12
 8008836:	f8ca 3000 	str.w	r3, [sl]
 800883a:	89a3      	ldrh	r3, [r4, #12]
 800883c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008840:	81a3      	strh	r3, [r4, #12]
 8008842:	f04f 30ff 	mov.w	r0, #4294967295
 8008846:	e7e9      	b.n	800881c <__ssputs_r+0x88>

08008848 <_svfiprintf_r>:
 8008848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800884c:	4698      	mov	r8, r3
 800884e:	898b      	ldrh	r3, [r1, #12]
 8008850:	061b      	lsls	r3, r3, #24
 8008852:	b09d      	sub	sp, #116	; 0x74
 8008854:	4607      	mov	r7, r0
 8008856:	460d      	mov	r5, r1
 8008858:	4614      	mov	r4, r2
 800885a:	d50e      	bpl.n	800887a <_svfiprintf_r+0x32>
 800885c:	690b      	ldr	r3, [r1, #16]
 800885e:	b963      	cbnz	r3, 800887a <_svfiprintf_r+0x32>
 8008860:	2140      	movs	r1, #64	; 0x40
 8008862:	f7ff fc1f 	bl	80080a4 <_malloc_r>
 8008866:	6028      	str	r0, [r5, #0]
 8008868:	6128      	str	r0, [r5, #16]
 800886a:	b920      	cbnz	r0, 8008876 <_svfiprintf_r+0x2e>
 800886c:	230c      	movs	r3, #12
 800886e:	603b      	str	r3, [r7, #0]
 8008870:	f04f 30ff 	mov.w	r0, #4294967295
 8008874:	e0d0      	b.n	8008a18 <_svfiprintf_r+0x1d0>
 8008876:	2340      	movs	r3, #64	; 0x40
 8008878:	616b      	str	r3, [r5, #20]
 800887a:	2300      	movs	r3, #0
 800887c:	9309      	str	r3, [sp, #36]	; 0x24
 800887e:	2320      	movs	r3, #32
 8008880:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008884:	f8cd 800c 	str.w	r8, [sp, #12]
 8008888:	2330      	movs	r3, #48	; 0x30
 800888a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008a30 <_svfiprintf_r+0x1e8>
 800888e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008892:	f04f 0901 	mov.w	r9, #1
 8008896:	4623      	mov	r3, r4
 8008898:	469a      	mov	sl, r3
 800889a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800889e:	b10a      	cbz	r2, 80088a4 <_svfiprintf_r+0x5c>
 80088a0:	2a25      	cmp	r2, #37	; 0x25
 80088a2:	d1f9      	bne.n	8008898 <_svfiprintf_r+0x50>
 80088a4:	ebba 0b04 	subs.w	fp, sl, r4
 80088a8:	d00b      	beq.n	80088c2 <_svfiprintf_r+0x7a>
 80088aa:	465b      	mov	r3, fp
 80088ac:	4622      	mov	r2, r4
 80088ae:	4629      	mov	r1, r5
 80088b0:	4638      	mov	r0, r7
 80088b2:	f7ff ff6f 	bl	8008794 <__ssputs_r>
 80088b6:	3001      	adds	r0, #1
 80088b8:	f000 80a9 	beq.w	8008a0e <_svfiprintf_r+0x1c6>
 80088bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80088be:	445a      	add	r2, fp
 80088c0:	9209      	str	r2, [sp, #36]	; 0x24
 80088c2:	f89a 3000 	ldrb.w	r3, [sl]
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	f000 80a1 	beq.w	8008a0e <_svfiprintf_r+0x1c6>
 80088cc:	2300      	movs	r3, #0
 80088ce:	f04f 32ff 	mov.w	r2, #4294967295
 80088d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80088d6:	f10a 0a01 	add.w	sl, sl, #1
 80088da:	9304      	str	r3, [sp, #16]
 80088dc:	9307      	str	r3, [sp, #28]
 80088de:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80088e2:	931a      	str	r3, [sp, #104]	; 0x68
 80088e4:	4654      	mov	r4, sl
 80088e6:	2205      	movs	r2, #5
 80088e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80088ec:	4850      	ldr	r0, [pc, #320]	; (8008a30 <_svfiprintf_r+0x1e8>)
 80088ee:	f7f7 fc77 	bl	80001e0 <memchr>
 80088f2:	9a04      	ldr	r2, [sp, #16]
 80088f4:	b9d8      	cbnz	r0, 800892e <_svfiprintf_r+0xe6>
 80088f6:	06d0      	lsls	r0, r2, #27
 80088f8:	bf44      	itt	mi
 80088fa:	2320      	movmi	r3, #32
 80088fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008900:	0711      	lsls	r1, r2, #28
 8008902:	bf44      	itt	mi
 8008904:	232b      	movmi	r3, #43	; 0x2b
 8008906:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800890a:	f89a 3000 	ldrb.w	r3, [sl]
 800890e:	2b2a      	cmp	r3, #42	; 0x2a
 8008910:	d015      	beq.n	800893e <_svfiprintf_r+0xf6>
 8008912:	9a07      	ldr	r2, [sp, #28]
 8008914:	4654      	mov	r4, sl
 8008916:	2000      	movs	r0, #0
 8008918:	f04f 0c0a 	mov.w	ip, #10
 800891c:	4621      	mov	r1, r4
 800891e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008922:	3b30      	subs	r3, #48	; 0x30
 8008924:	2b09      	cmp	r3, #9
 8008926:	d94d      	bls.n	80089c4 <_svfiprintf_r+0x17c>
 8008928:	b1b0      	cbz	r0, 8008958 <_svfiprintf_r+0x110>
 800892a:	9207      	str	r2, [sp, #28]
 800892c:	e014      	b.n	8008958 <_svfiprintf_r+0x110>
 800892e:	eba0 0308 	sub.w	r3, r0, r8
 8008932:	fa09 f303 	lsl.w	r3, r9, r3
 8008936:	4313      	orrs	r3, r2
 8008938:	9304      	str	r3, [sp, #16]
 800893a:	46a2      	mov	sl, r4
 800893c:	e7d2      	b.n	80088e4 <_svfiprintf_r+0x9c>
 800893e:	9b03      	ldr	r3, [sp, #12]
 8008940:	1d19      	adds	r1, r3, #4
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	9103      	str	r1, [sp, #12]
 8008946:	2b00      	cmp	r3, #0
 8008948:	bfbb      	ittet	lt
 800894a:	425b      	neglt	r3, r3
 800894c:	f042 0202 	orrlt.w	r2, r2, #2
 8008950:	9307      	strge	r3, [sp, #28]
 8008952:	9307      	strlt	r3, [sp, #28]
 8008954:	bfb8      	it	lt
 8008956:	9204      	strlt	r2, [sp, #16]
 8008958:	7823      	ldrb	r3, [r4, #0]
 800895a:	2b2e      	cmp	r3, #46	; 0x2e
 800895c:	d10c      	bne.n	8008978 <_svfiprintf_r+0x130>
 800895e:	7863      	ldrb	r3, [r4, #1]
 8008960:	2b2a      	cmp	r3, #42	; 0x2a
 8008962:	d134      	bne.n	80089ce <_svfiprintf_r+0x186>
 8008964:	9b03      	ldr	r3, [sp, #12]
 8008966:	1d1a      	adds	r2, r3, #4
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	9203      	str	r2, [sp, #12]
 800896c:	2b00      	cmp	r3, #0
 800896e:	bfb8      	it	lt
 8008970:	f04f 33ff 	movlt.w	r3, #4294967295
 8008974:	3402      	adds	r4, #2
 8008976:	9305      	str	r3, [sp, #20]
 8008978:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8008a40 <_svfiprintf_r+0x1f8>
 800897c:	7821      	ldrb	r1, [r4, #0]
 800897e:	2203      	movs	r2, #3
 8008980:	4650      	mov	r0, sl
 8008982:	f7f7 fc2d 	bl	80001e0 <memchr>
 8008986:	b138      	cbz	r0, 8008998 <_svfiprintf_r+0x150>
 8008988:	9b04      	ldr	r3, [sp, #16]
 800898a:	eba0 000a 	sub.w	r0, r0, sl
 800898e:	2240      	movs	r2, #64	; 0x40
 8008990:	4082      	lsls	r2, r0
 8008992:	4313      	orrs	r3, r2
 8008994:	3401      	adds	r4, #1
 8008996:	9304      	str	r3, [sp, #16]
 8008998:	f814 1b01 	ldrb.w	r1, [r4], #1
 800899c:	4825      	ldr	r0, [pc, #148]	; (8008a34 <_svfiprintf_r+0x1ec>)
 800899e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80089a2:	2206      	movs	r2, #6
 80089a4:	f7f7 fc1c 	bl	80001e0 <memchr>
 80089a8:	2800      	cmp	r0, #0
 80089aa:	d038      	beq.n	8008a1e <_svfiprintf_r+0x1d6>
 80089ac:	4b22      	ldr	r3, [pc, #136]	; (8008a38 <_svfiprintf_r+0x1f0>)
 80089ae:	bb1b      	cbnz	r3, 80089f8 <_svfiprintf_r+0x1b0>
 80089b0:	9b03      	ldr	r3, [sp, #12]
 80089b2:	3307      	adds	r3, #7
 80089b4:	f023 0307 	bic.w	r3, r3, #7
 80089b8:	3308      	adds	r3, #8
 80089ba:	9303      	str	r3, [sp, #12]
 80089bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089be:	4433      	add	r3, r6
 80089c0:	9309      	str	r3, [sp, #36]	; 0x24
 80089c2:	e768      	b.n	8008896 <_svfiprintf_r+0x4e>
 80089c4:	fb0c 3202 	mla	r2, ip, r2, r3
 80089c8:	460c      	mov	r4, r1
 80089ca:	2001      	movs	r0, #1
 80089cc:	e7a6      	b.n	800891c <_svfiprintf_r+0xd4>
 80089ce:	2300      	movs	r3, #0
 80089d0:	3401      	adds	r4, #1
 80089d2:	9305      	str	r3, [sp, #20]
 80089d4:	4619      	mov	r1, r3
 80089d6:	f04f 0c0a 	mov.w	ip, #10
 80089da:	4620      	mov	r0, r4
 80089dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80089e0:	3a30      	subs	r2, #48	; 0x30
 80089e2:	2a09      	cmp	r2, #9
 80089e4:	d903      	bls.n	80089ee <_svfiprintf_r+0x1a6>
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d0c6      	beq.n	8008978 <_svfiprintf_r+0x130>
 80089ea:	9105      	str	r1, [sp, #20]
 80089ec:	e7c4      	b.n	8008978 <_svfiprintf_r+0x130>
 80089ee:	fb0c 2101 	mla	r1, ip, r1, r2
 80089f2:	4604      	mov	r4, r0
 80089f4:	2301      	movs	r3, #1
 80089f6:	e7f0      	b.n	80089da <_svfiprintf_r+0x192>
 80089f8:	ab03      	add	r3, sp, #12
 80089fa:	9300      	str	r3, [sp, #0]
 80089fc:	462a      	mov	r2, r5
 80089fe:	4b0f      	ldr	r3, [pc, #60]	; (8008a3c <_svfiprintf_r+0x1f4>)
 8008a00:	a904      	add	r1, sp, #16
 8008a02:	4638      	mov	r0, r7
 8008a04:	f3af 8000 	nop.w
 8008a08:	1c42      	adds	r2, r0, #1
 8008a0a:	4606      	mov	r6, r0
 8008a0c:	d1d6      	bne.n	80089bc <_svfiprintf_r+0x174>
 8008a0e:	89ab      	ldrh	r3, [r5, #12]
 8008a10:	065b      	lsls	r3, r3, #25
 8008a12:	f53f af2d 	bmi.w	8008870 <_svfiprintf_r+0x28>
 8008a16:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008a18:	b01d      	add	sp, #116	; 0x74
 8008a1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a1e:	ab03      	add	r3, sp, #12
 8008a20:	9300      	str	r3, [sp, #0]
 8008a22:	462a      	mov	r2, r5
 8008a24:	4b05      	ldr	r3, [pc, #20]	; (8008a3c <_svfiprintf_r+0x1f4>)
 8008a26:	a904      	add	r1, sp, #16
 8008a28:	4638      	mov	r0, r7
 8008a2a:	f000 f9bd 	bl	8008da8 <_printf_i>
 8008a2e:	e7eb      	b.n	8008a08 <_svfiprintf_r+0x1c0>
 8008a30:	08013b60 	.word	0x08013b60
 8008a34:	08013b6a 	.word	0x08013b6a
 8008a38:	00000000 	.word	0x00000000
 8008a3c:	08008795 	.word	0x08008795
 8008a40:	08013b66 	.word	0x08013b66

08008a44 <__sfputc_r>:
 8008a44:	6893      	ldr	r3, [r2, #8]
 8008a46:	3b01      	subs	r3, #1
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	b410      	push	{r4}
 8008a4c:	6093      	str	r3, [r2, #8]
 8008a4e:	da08      	bge.n	8008a62 <__sfputc_r+0x1e>
 8008a50:	6994      	ldr	r4, [r2, #24]
 8008a52:	42a3      	cmp	r3, r4
 8008a54:	db01      	blt.n	8008a5a <__sfputc_r+0x16>
 8008a56:	290a      	cmp	r1, #10
 8008a58:	d103      	bne.n	8008a62 <__sfputc_r+0x1e>
 8008a5a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008a5e:	f7ff bd2e 	b.w	80084be <__swbuf_r>
 8008a62:	6813      	ldr	r3, [r2, #0]
 8008a64:	1c58      	adds	r0, r3, #1
 8008a66:	6010      	str	r0, [r2, #0]
 8008a68:	7019      	strb	r1, [r3, #0]
 8008a6a:	4608      	mov	r0, r1
 8008a6c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008a70:	4770      	bx	lr

08008a72 <__sfputs_r>:
 8008a72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a74:	4606      	mov	r6, r0
 8008a76:	460f      	mov	r7, r1
 8008a78:	4614      	mov	r4, r2
 8008a7a:	18d5      	adds	r5, r2, r3
 8008a7c:	42ac      	cmp	r4, r5
 8008a7e:	d101      	bne.n	8008a84 <__sfputs_r+0x12>
 8008a80:	2000      	movs	r0, #0
 8008a82:	e007      	b.n	8008a94 <__sfputs_r+0x22>
 8008a84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a88:	463a      	mov	r2, r7
 8008a8a:	4630      	mov	r0, r6
 8008a8c:	f7ff ffda 	bl	8008a44 <__sfputc_r>
 8008a90:	1c43      	adds	r3, r0, #1
 8008a92:	d1f3      	bne.n	8008a7c <__sfputs_r+0xa>
 8008a94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008a98 <_vfiprintf_r>:
 8008a98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a9c:	460d      	mov	r5, r1
 8008a9e:	b09d      	sub	sp, #116	; 0x74
 8008aa0:	4614      	mov	r4, r2
 8008aa2:	4698      	mov	r8, r3
 8008aa4:	4606      	mov	r6, r0
 8008aa6:	b118      	cbz	r0, 8008ab0 <_vfiprintf_r+0x18>
 8008aa8:	6a03      	ldr	r3, [r0, #32]
 8008aaa:	b90b      	cbnz	r3, 8008ab0 <_vfiprintf_r+0x18>
 8008aac:	f7ff fc00 	bl	80082b0 <__sinit>
 8008ab0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008ab2:	07d9      	lsls	r1, r3, #31
 8008ab4:	d405      	bmi.n	8008ac2 <_vfiprintf_r+0x2a>
 8008ab6:	89ab      	ldrh	r3, [r5, #12]
 8008ab8:	059a      	lsls	r2, r3, #22
 8008aba:	d402      	bmi.n	8008ac2 <_vfiprintf_r+0x2a>
 8008abc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008abe:	f7ff fe1b 	bl	80086f8 <__retarget_lock_acquire_recursive>
 8008ac2:	89ab      	ldrh	r3, [r5, #12]
 8008ac4:	071b      	lsls	r3, r3, #28
 8008ac6:	d501      	bpl.n	8008acc <_vfiprintf_r+0x34>
 8008ac8:	692b      	ldr	r3, [r5, #16]
 8008aca:	b99b      	cbnz	r3, 8008af4 <_vfiprintf_r+0x5c>
 8008acc:	4629      	mov	r1, r5
 8008ace:	4630      	mov	r0, r6
 8008ad0:	f7ff fd32 	bl	8008538 <__swsetup_r>
 8008ad4:	b170      	cbz	r0, 8008af4 <_vfiprintf_r+0x5c>
 8008ad6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008ad8:	07dc      	lsls	r4, r3, #31
 8008ada:	d504      	bpl.n	8008ae6 <_vfiprintf_r+0x4e>
 8008adc:	f04f 30ff 	mov.w	r0, #4294967295
 8008ae0:	b01d      	add	sp, #116	; 0x74
 8008ae2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ae6:	89ab      	ldrh	r3, [r5, #12]
 8008ae8:	0598      	lsls	r0, r3, #22
 8008aea:	d4f7      	bmi.n	8008adc <_vfiprintf_r+0x44>
 8008aec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008aee:	f7ff fe04 	bl	80086fa <__retarget_lock_release_recursive>
 8008af2:	e7f3      	b.n	8008adc <_vfiprintf_r+0x44>
 8008af4:	2300      	movs	r3, #0
 8008af6:	9309      	str	r3, [sp, #36]	; 0x24
 8008af8:	2320      	movs	r3, #32
 8008afa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008afe:	f8cd 800c 	str.w	r8, [sp, #12]
 8008b02:	2330      	movs	r3, #48	; 0x30
 8008b04:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8008cb8 <_vfiprintf_r+0x220>
 8008b08:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008b0c:	f04f 0901 	mov.w	r9, #1
 8008b10:	4623      	mov	r3, r4
 8008b12:	469a      	mov	sl, r3
 8008b14:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008b18:	b10a      	cbz	r2, 8008b1e <_vfiprintf_r+0x86>
 8008b1a:	2a25      	cmp	r2, #37	; 0x25
 8008b1c:	d1f9      	bne.n	8008b12 <_vfiprintf_r+0x7a>
 8008b1e:	ebba 0b04 	subs.w	fp, sl, r4
 8008b22:	d00b      	beq.n	8008b3c <_vfiprintf_r+0xa4>
 8008b24:	465b      	mov	r3, fp
 8008b26:	4622      	mov	r2, r4
 8008b28:	4629      	mov	r1, r5
 8008b2a:	4630      	mov	r0, r6
 8008b2c:	f7ff ffa1 	bl	8008a72 <__sfputs_r>
 8008b30:	3001      	adds	r0, #1
 8008b32:	f000 80a9 	beq.w	8008c88 <_vfiprintf_r+0x1f0>
 8008b36:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008b38:	445a      	add	r2, fp
 8008b3a:	9209      	str	r2, [sp, #36]	; 0x24
 8008b3c:	f89a 3000 	ldrb.w	r3, [sl]
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	f000 80a1 	beq.w	8008c88 <_vfiprintf_r+0x1f0>
 8008b46:	2300      	movs	r3, #0
 8008b48:	f04f 32ff 	mov.w	r2, #4294967295
 8008b4c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008b50:	f10a 0a01 	add.w	sl, sl, #1
 8008b54:	9304      	str	r3, [sp, #16]
 8008b56:	9307      	str	r3, [sp, #28]
 8008b58:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008b5c:	931a      	str	r3, [sp, #104]	; 0x68
 8008b5e:	4654      	mov	r4, sl
 8008b60:	2205      	movs	r2, #5
 8008b62:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b66:	4854      	ldr	r0, [pc, #336]	; (8008cb8 <_vfiprintf_r+0x220>)
 8008b68:	f7f7 fb3a 	bl	80001e0 <memchr>
 8008b6c:	9a04      	ldr	r2, [sp, #16]
 8008b6e:	b9d8      	cbnz	r0, 8008ba8 <_vfiprintf_r+0x110>
 8008b70:	06d1      	lsls	r1, r2, #27
 8008b72:	bf44      	itt	mi
 8008b74:	2320      	movmi	r3, #32
 8008b76:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008b7a:	0713      	lsls	r3, r2, #28
 8008b7c:	bf44      	itt	mi
 8008b7e:	232b      	movmi	r3, #43	; 0x2b
 8008b80:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008b84:	f89a 3000 	ldrb.w	r3, [sl]
 8008b88:	2b2a      	cmp	r3, #42	; 0x2a
 8008b8a:	d015      	beq.n	8008bb8 <_vfiprintf_r+0x120>
 8008b8c:	9a07      	ldr	r2, [sp, #28]
 8008b8e:	4654      	mov	r4, sl
 8008b90:	2000      	movs	r0, #0
 8008b92:	f04f 0c0a 	mov.w	ip, #10
 8008b96:	4621      	mov	r1, r4
 8008b98:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008b9c:	3b30      	subs	r3, #48	; 0x30
 8008b9e:	2b09      	cmp	r3, #9
 8008ba0:	d94d      	bls.n	8008c3e <_vfiprintf_r+0x1a6>
 8008ba2:	b1b0      	cbz	r0, 8008bd2 <_vfiprintf_r+0x13a>
 8008ba4:	9207      	str	r2, [sp, #28]
 8008ba6:	e014      	b.n	8008bd2 <_vfiprintf_r+0x13a>
 8008ba8:	eba0 0308 	sub.w	r3, r0, r8
 8008bac:	fa09 f303 	lsl.w	r3, r9, r3
 8008bb0:	4313      	orrs	r3, r2
 8008bb2:	9304      	str	r3, [sp, #16]
 8008bb4:	46a2      	mov	sl, r4
 8008bb6:	e7d2      	b.n	8008b5e <_vfiprintf_r+0xc6>
 8008bb8:	9b03      	ldr	r3, [sp, #12]
 8008bba:	1d19      	adds	r1, r3, #4
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	9103      	str	r1, [sp, #12]
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	bfbb      	ittet	lt
 8008bc4:	425b      	neglt	r3, r3
 8008bc6:	f042 0202 	orrlt.w	r2, r2, #2
 8008bca:	9307      	strge	r3, [sp, #28]
 8008bcc:	9307      	strlt	r3, [sp, #28]
 8008bce:	bfb8      	it	lt
 8008bd0:	9204      	strlt	r2, [sp, #16]
 8008bd2:	7823      	ldrb	r3, [r4, #0]
 8008bd4:	2b2e      	cmp	r3, #46	; 0x2e
 8008bd6:	d10c      	bne.n	8008bf2 <_vfiprintf_r+0x15a>
 8008bd8:	7863      	ldrb	r3, [r4, #1]
 8008bda:	2b2a      	cmp	r3, #42	; 0x2a
 8008bdc:	d134      	bne.n	8008c48 <_vfiprintf_r+0x1b0>
 8008bde:	9b03      	ldr	r3, [sp, #12]
 8008be0:	1d1a      	adds	r2, r3, #4
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	9203      	str	r2, [sp, #12]
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	bfb8      	it	lt
 8008bea:	f04f 33ff 	movlt.w	r3, #4294967295
 8008bee:	3402      	adds	r4, #2
 8008bf0:	9305      	str	r3, [sp, #20]
 8008bf2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8008cc8 <_vfiprintf_r+0x230>
 8008bf6:	7821      	ldrb	r1, [r4, #0]
 8008bf8:	2203      	movs	r2, #3
 8008bfa:	4650      	mov	r0, sl
 8008bfc:	f7f7 faf0 	bl	80001e0 <memchr>
 8008c00:	b138      	cbz	r0, 8008c12 <_vfiprintf_r+0x17a>
 8008c02:	9b04      	ldr	r3, [sp, #16]
 8008c04:	eba0 000a 	sub.w	r0, r0, sl
 8008c08:	2240      	movs	r2, #64	; 0x40
 8008c0a:	4082      	lsls	r2, r0
 8008c0c:	4313      	orrs	r3, r2
 8008c0e:	3401      	adds	r4, #1
 8008c10:	9304      	str	r3, [sp, #16]
 8008c12:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c16:	4829      	ldr	r0, [pc, #164]	; (8008cbc <_vfiprintf_r+0x224>)
 8008c18:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008c1c:	2206      	movs	r2, #6
 8008c1e:	f7f7 fadf 	bl	80001e0 <memchr>
 8008c22:	2800      	cmp	r0, #0
 8008c24:	d03f      	beq.n	8008ca6 <_vfiprintf_r+0x20e>
 8008c26:	4b26      	ldr	r3, [pc, #152]	; (8008cc0 <_vfiprintf_r+0x228>)
 8008c28:	bb1b      	cbnz	r3, 8008c72 <_vfiprintf_r+0x1da>
 8008c2a:	9b03      	ldr	r3, [sp, #12]
 8008c2c:	3307      	adds	r3, #7
 8008c2e:	f023 0307 	bic.w	r3, r3, #7
 8008c32:	3308      	adds	r3, #8
 8008c34:	9303      	str	r3, [sp, #12]
 8008c36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c38:	443b      	add	r3, r7
 8008c3a:	9309      	str	r3, [sp, #36]	; 0x24
 8008c3c:	e768      	b.n	8008b10 <_vfiprintf_r+0x78>
 8008c3e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008c42:	460c      	mov	r4, r1
 8008c44:	2001      	movs	r0, #1
 8008c46:	e7a6      	b.n	8008b96 <_vfiprintf_r+0xfe>
 8008c48:	2300      	movs	r3, #0
 8008c4a:	3401      	adds	r4, #1
 8008c4c:	9305      	str	r3, [sp, #20]
 8008c4e:	4619      	mov	r1, r3
 8008c50:	f04f 0c0a 	mov.w	ip, #10
 8008c54:	4620      	mov	r0, r4
 8008c56:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008c5a:	3a30      	subs	r2, #48	; 0x30
 8008c5c:	2a09      	cmp	r2, #9
 8008c5e:	d903      	bls.n	8008c68 <_vfiprintf_r+0x1d0>
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d0c6      	beq.n	8008bf2 <_vfiprintf_r+0x15a>
 8008c64:	9105      	str	r1, [sp, #20]
 8008c66:	e7c4      	b.n	8008bf2 <_vfiprintf_r+0x15a>
 8008c68:	fb0c 2101 	mla	r1, ip, r1, r2
 8008c6c:	4604      	mov	r4, r0
 8008c6e:	2301      	movs	r3, #1
 8008c70:	e7f0      	b.n	8008c54 <_vfiprintf_r+0x1bc>
 8008c72:	ab03      	add	r3, sp, #12
 8008c74:	9300      	str	r3, [sp, #0]
 8008c76:	462a      	mov	r2, r5
 8008c78:	4b12      	ldr	r3, [pc, #72]	; (8008cc4 <_vfiprintf_r+0x22c>)
 8008c7a:	a904      	add	r1, sp, #16
 8008c7c:	4630      	mov	r0, r6
 8008c7e:	f3af 8000 	nop.w
 8008c82:	4607      	mov	r7, r0
 8008c84:	1c78      	adds	r0, r7, #1
 8008c86:	d1d6      	bne.n	8008c36 <_vfiprintf_r+0x19e>
 8008c88:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008c8a:	07d9      	lsls	r1, r3, #31
 8008c8c:	d405      	bmi.n	8008c9a <_vfiprintf_r+0x202>
 8008c8e:	89ab      	ldrh	r3, [r5, #12]
 8008c90:	059a      	lsls	r2, r3, #22
 8008c92:	d402      	bmi.n	8008c9a <_vfiprintf_r+0x202>
 8008c94:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008c96:	f7ff fd30 	bl	80086fa <__retarget_lock_release_recursive>
 8008c9a:	89ab      	ldrh	r3, [r5, #12]
 8008c9c:	065b      	lsls	r3, r3, #25
 8008c9e:	f53f af1d 	bmi.w	8008adc <_vfiprintf_r+0x44>
 8008ca2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008ca4:	e71c      	b.n	8008ae0 <_vfiprintf_r+0x48>
 8008ca6:	ab03      	add	r3, sp, #12
 8008ca8:	9300      	str	r3, [sp, #0]
 8008caa:	462a      	mov	r2, r5
 8008cac:	4b05      	ldr	r3, [pc, #20]	; (8008cc4 <_vfiprintf_r+0x22c>)
 8008cae:	a904      	add	r1, sp, #16
 8008cb0:	4630      	mov	r0, r6
 8008cb2:	f000 f879 	bl	8008da8 <_printf_i>
 8008cb6:	e7e4      	b.n	8008c82 <_vfiprintf_r+0x1ea>
 8008cb8:	08013b60 	.word	0x08013b60
 8008cbc:	08013b6a 	.word	0x08013b6a
 8008cc0:	00000000 	.word	0x00000000
 8008cc4:	08008a73 	.word	0x08008a73
 8008cc8:	08013b66 	.word	0x08013b66

08008ccc <_printf_common>:
 8008ccc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008cd0:	4616      	mov	r6, r2
 8008cd2:	4699      	mov	r9, r3
 8008cd4:	688a      	ldr	r2, [r1, #8]
 8008cd6:	690b      	ldr	r3, [r1, #16]
 8008cd8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008cdc:	4293      	cmp	r3, r2
 8008cde:	bfb8      	it	lt
 8008ce0:	4613      	movlt	r3, r2
 8008ce2:	6033      	str	r3, [r6, #0]
 8008ce4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008ce8:	4607      	mov	r7, r0
 8008cea:	460c      	mov	r4, r1
 8008cec:	b10a      	cbz	r2, 8008cf2 <_printf_common+0x26>
 8008cee:	3301      	adds	r3, #1
 8008cf0:	6033      	str	r3, [r6, #0]
 8008cf2:	6823      	ldr	r3, [r4, #0]
 8008cf4:	0699      	lsls	r1, r3, #26
 8008cf6:	bf42      	ittt	mi
 8008cf8:	6833      	ldrmi	r3, [r6, #0]
 8008cfa:	3302      	addmi	r3, #2
 8008cfc:	6033      	strmi	r3, [r6, #0]
 8008cfe:	6825      	ldr	r5, [r4, #0]
 8008d00:	f015 0506 	ands.w	r5, r5, #6
 8008d04:	d106      	bne.n	8008d14 <_printf_common+0x48>
 8008d06:	f104 0a19 	add.w	sl, r4, #25
 8008d0a:	68e3      	ldr	r3, [r4, #12]
 8008d0c:	6832      	ldr	r2, [r6, #0]
 8008d0e:	1a9b      	subs	r3, r3, r2
 8008d10:	42ab      	cmp	r3, r5
 8008d12:	dc26      	bgt.n	8008d62 <_printf_common+0x96>
 8008d14:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008d18:	1e13      	subs	r3, r2, #0
 8008d1a:	6822      	ldr	r2, [r4, #0]
 8008d1c:	bf18      	it	ne
 8008d1e:	2301      	movne	r3, #1
 8008d20:	0692      	lsls	r2, r2, #26
 8008d22:	d42b      	bmi.n	8008d7c <_printf_common+0xb0>
 8008d24:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008d28:	4649      	mov	r1, r9
 8008d2a:	4638      	mov	r0, r7
 8008d2c:	47c0      	blx	r8
 8008d2e:	3001      	adds	r0, #1
 8008d30:	d01e      	beq.n	8008d70 <_printf_common+0xa4>
 8008d32:	6823      	ldr	r3, [r4, #0]
 8008d34:	6922      	ldr	r2, [r4, #16]
 8008d36:	f003 0306 	and.w	r3, r3, #6
 8008d3a:	2b04      	cmp	r3, #4
 8008d3c:	bf02      	ittt	eq
 8008d3e:	68e5      	ldreq	r5, [r4, #12]
 8008d40:	6833      	ldreq	r3, [r6, #0]
 8008d42:	1aed      	subeq	r5, r5, r3
 8008d44:	68a3      	ldr	r3, [r4, #8]
 8008d46:	bf0c      	ite	eq
 8008d48:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008d4c:	2500      	movne	r5, #0
 8008d4e:	4293      	cmp	r3, r2
 8008d50:	bfc4      	itt	gt
 8008d52:	1a9b      	subgt	r3, r3, r2
 8008d54:	18ed      	addgt	r5, r5, r3
 8008d56:	2600      	movs	r6, #0
 8008d58:	341a      	adds	r4, #26
 8008d5a:	42b5      	cmp	r5, r6
 8008d5c:	d11a      	bne.n	8008d94 <_printf_common+0xc8>
 8008d5e:	2000      	movs	r0, #0
 8008d60:	e008      	b.n	8008d74 <_printf_common+0xa8>
 8008d62:	2301      	movs	r3, #1
 8008d64:	4652      	mov	r2, sl
 8008d66:	4649      	mov	r1, r9
 8008d68:	4638      	mov	r0, r7
 8008d6a:	47c0      	blx	r8
 8008d6c:	3001      	adds	r0, #1
 8008d6e:	d103      	bne.n	8008d78 <_printf_common+0xac>
 8008d70:	f04f 30ff 	mov.w	r0, #4294967295
 8008d74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d78:	3501      	adds	r5, #1
 8008d7a:	e7c6      	b.n	8008d0a <_printf_common+0x3e>
 8008d7c:	18e1      	adds	r1, r4, r3
 8008d7e:	1c5a      	adds	r2, r3, #1
 8008d80:	2030      	movs	r0, #48	; 0x30
 8008d82:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008d86:	4422      	add	r2, r4
 8008d88:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008d8c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008d90:	3302      	adds	r3, #2
 8008d92:	e7c7      	b.n	8008d24 <_printf_common+0x58>
 8008d94:	2301      	movs	r3, #1
 8008d96:	4622      	mov	r2, r4
 8008d98:	4649      	mov	r1, r9
 8008d9a:	4638      	mov	r0, r7
 8008d9c:	47c0      	blx	r8
 8008d9e:	3001      	adds	r0, #1
 8008da0:	d0e6      	beq.n	8008d70 <_printf_common+0xa4>
 8008da2:	3601      	adds	r6, #1
 8008da4:	e7d9      	b.n	8008d5a <_printf_common+0x8e>
	...

08008da8 <_printf_i>:
 8008da8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008dac:	7e0f      	ldrb	r7, [r1, #24]
 8008dae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008db0:	2f78      	cmp	r7, #120	; 0x78
 8008db2:	4691      	mov	r9, r2
 8008db4:	4680      	mov	r8, r0
 8008db6:	460c      	mov	r4, r1
 8008db8:	469a      	mov	sl, r3
 8008dba:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008dbe:	d807      	bhi.n	8008dd0 <_printf_i+0x28>
 8008dc0:	2f62      	cmp	r7, #98	; 0x62
 8008dc2:	d80a      	bhi.n	8008dda <_printf_i+0x32>
 8008dc4:	2f00      	cmp	r7, #0
 8008dc6:	f000 80d4 	beq.w	8008f72 <_printf_i+0x1ca>
 8008dca:	2f58      	cmp	r7, #88	; 0x58
 8008dcc:	f000 80c0 	beq.w	8008f50 <_printf_i+0x1a8>
 8008dd0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008dd4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008dd8:	e03a      	b.n	8008e50 <_printf_i+0xa8>
 8008dda:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008dde:	2b15      	cmp	r3, #21
 8008de0:	d8f6      	bhi.n	8008dd0 <_printf_i+0x28>
 8008de2:	a101      	add	r1, pc, #4	; (adr r1, 8008de8 <_printf_i+0x40>)
 8008de4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008de8:	08008e41 	.word	0x08008e41
 8008dec:	08008e55 	.word	0x08008e55
 8008df0:	08008dd1 	.word	0x08008dd1
 8008df4:	08008dd1 	.word	0x08008dd1
 8008df8:	08008dd1 	.word	0x08008dd1
 8008dfc:	08008dd1 	.word	0x08008dd1
 8008e00:	08008e55 	.word	0x08008e55
 8008e04:	08008dd1 	.word	0x08008dd1
 8008e08:	08008dd1 	.word	0x08008dd1
 8008e0c:	08008dd1 	.word	0x08008dd1
 8008e10:	08008dd1 	.word	0x08008dd1
 8008e14:	08008f59 	.word	0x08008f59
 8008e18:	08008e81 	.word	0x08008e81
 8008e1c:	08008f13 	.word	0x08008f13
 8008e20:	08008dd1 	.word	0x08008dd1
 8008e24:	08008dd1 	.word	0x08008dd1
 8008e28:	08008f7b 	.word	0x08008f7b
 8008e2c:	08008dd1 	.word	0x08008dd1
 8008e30:	08008e81 	.word	0x08008e81
 8008e34:	08008dd1 	.word	0x08008dd1
 8008e38:	08008dd1 	.word	0x08008dd1
 8008e3c:	08008f1b 	.word	0x08008f1b
 8008e40:	682b      	ldr	r3, [r5, #0]
 8008e42:	1d1a      	adds	r2, r3, #4
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	602a      	str	r2, [r5, #0]
 8008e48:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008e4c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008e50:	2301      	movs	r3, #1
 8008e52:	e09f      	b.n	8008f94 <_printf_i+0x1ec>
 8008e54:	6820      	ldr	r0, [r4, #0]
 8008e56:	682b      	ldr	r3, [r5, #0]
 8008e58:	0607      	lsls	r7, r0, #24
 8008e5a:	f103 0104 	add.w	r1, r3, #4
 8008e5e:	6029      	str	r1, [r5, #0]
 8008e60:	d501      	bpl.n	8008e66 <_printf_i+0xbe>
 8008e62:	681e      	ldr	r6, [r3, #0]
 8008e64:	e003      	b.n	8008e6e <_printf_i+0xc6>
 8008e66:	0646      	lsls	r6, r0, #25
 8008e68:	d5fb      	bpl.n	8008e62 <_printf_i+0xba>
 8008e6a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8008e6e:	2e00      	cmp	r6, #0
 8008e70:	da03      	bge.n	8008e7a <_printf_i+0xd2>
 8008e72:	232d      	movs	r3, #45	; 0x2d
 8008e74:	4276      	negs	r6, r6
 8008e76:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008e7a:	485a      	ldr	r0, [pc, #360]	; (8008fe4 <_printf_i+0x23c>)
 8008e7c:	230a      	movs	r3, #10
 8008e7e:	e012      	b.n	8008ea6 <_printf_i+0xfe>
 8008e80:	682b      	ldr	r3, [r5, #0]
 8008e82:	6820      	ldr	r0, [r4, #0]
 8008e84:	1d19      	adds	r1, r3, #4
 8008e86:	6029      	str	r1, [r5, #0]
 8008e88:	0605      	lsls	r5, r0, #24
 8008e8a:	d501      	bpl.n	8008e90 <_printf_i+0xe8>
 8008e8c:	681e      	ldr	r6, [r3, #0]
 8008e8e:	e002      	b.n	8008e96 <_printf_i+0xee>
 8008e90:	0641      	lsls	r1, r0, #25
 8008e92:	d5fb      	bpl.n	8008e8c <_printf_i+0xe4>
 8008e94:	881e      	ldrh	r6, [r3, #0]
 8008e96:	4853      	ldr	r0, [pc, #332]	; (8008fe4 <_printf_i+0x23c>)
 8008e98:	2f6f      	cmp	r7, #111	; 0x6f
 8008e9a:	bf0c      	ite	eq
 8008e9c:	2308      	moveq	r3, #8
 8008e9e:	230a      	movne	r3, #10
 8008ea0:	2100      	movs	r1, #0
 8008ea2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008ea6:	6865      	ldr	r5, [r4, #4]
 8008ea8:	60a5      	str	r5, [r4, #8]
 8008eaa:	2d00      	cmp	r5, #0
 8008eac:	bfa2      	ittt	ge
 8008eae:	6821      	ldrge	r1, [r4, #0]
 8008eb0:	f021 0104 	bicge.w	r1, r1, #4
 8008eb4:	6021      	strge	r1, [r4, #0]
 8008eb6:	b90e      	cbnz	r6, 8008ebc <_printf_i+0x114>
 8008eb8:	2d00      	cmp	r5, #0
 8008eba:	d04b      	beq.n	8008f54 <_printf_i+0x1ac>
 8008ebc:	4615      	mov	r5, r2
 8008ebe:	fbb6 f1f3 	udiv	r1, r6, r3
 8008ec2:	fb03 6711 	mls	r7, r3, r1, r6
 8008ec6:	5dc7      	ldrb	r7, [r0, r7]
 8008ec8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008ecc:	4637      	mov	r7, r6
 8008ece:	42bb      	cmp	r3, r7
 8008ed0:	460e      	mov	r6, r1
 8008ed2:	d9f4      	bls.n	8008ebe <_printf_i+0x116>
 8008ed4:	2b08      	cmp	r3, #8
 8008ed6:	d10b      	bne.n	8008ef0 <_printf_i+0x148>
 8008ed8:	6823      	ldr	r3, [r4, #0]
 8008eda:	07de      	lsls	r6, r3, #31
 8008edc:	d508      	bpl.n	8008ef0 <_printf_i+0x148>
 8008ede:	6923      	ldr	r3, [r4, #16]
 8008ee0:	6861      	ldr	r1, [r4, #4]
 8008ee2:	4299      	cmp	r1, r3
 8008ee4:	bfde      	ittt	le
 8008ee6:	2330      	movle	r3, #48	; 0x30
 8008ee8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008eec:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008ef0:	1b52      	subs	r2, r2, r5
 8008ef2:	6122      	str	r2, [r4, #16]
 8008ef4:	f8cd a000 	str.w	sl, [sp]
 8008ef8:	464b      	mov	r3, r9
 8008efa:	aa03      	add	r2, sp, #12
 8008efc:	4621      	mov	r1, r4
 8008efe:	4640      	mov	r0, r8
 8008f00:	f7ff fee4 	bl	8008ccc <_printf_common>
 8008f04:	3001      	adds	r0, #1
 8008f06:	d14a      	bne.n	8008f9e <_printf_i+0x1f6>
 8008f08:	f04f 30ff 	mov.w	r0, #4294967295
 8008f0c:	b004      	add	sp, #16
 8008f0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f12:	6823      	ldr	r3, [r4, #0]
 8008f14:	f043 0320 	orr.w	r3, r3, #32
 8008f18:	6023      	str	r3, [r4, #0]
 8008f1a:	4833      	ldr	r0, [pc, #204]	; (8008fe8 <_printf_i+0x240>)
 8008f1c:	2778      	movs	r7, #120	; 0x78
 8008f1e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008f22:	6823      	ldr	r3, [r4, #0]
 8008f24:	6829      	ldr	r1, [r5, #0]
 8008f26:	061f      	lsls	r7, r3, #24
 8008f28:	f851 6b04 	ldr.w	r6, [r1], #4
 8008f2c:	d402      	bmi.n	8008f34 <_printf_i+0x18c>
 8008f2e:	065f      	lsls	r7, r3, #25
 8008f30:	bf48      	it	mi
 8008f32:	b2b6      	uxthmi	r6, r6
 8008f34:	07df      	lsls	r7, r3, #31
 8008f36:	bf48      	it	mi
 8008f38:	f043 0320 	orrmi.w	r3, r3, #32
 8008f3c:	6029      	str	r1, [r5, #0]
 8008f3e:	bf48      	it	mi
 8008f40:	6023      	strmi	r3, [r4, #0]
 8008f42:	b91e      	cbnz	r6, 8008f4c <_printf_i+0x1a4>
 8008f44:	6823      	ldr	r3, [r4, #0]
 8008f46:	f023 0320 	bic.w	r3, r3, #32
 8008f4a:	6023      	str	r3, [r4, #0]
 8008f4c:	2310      	movs	r3, #16
 8008f4e:	e7a7      	b.n	8008ea0 <_printf_i+0xf8>
 8008f50:	4824      	ldr	r0, [pc, #144]	; (8008fe4 <_printf_i+0x23c>)
 8008f52:	e7e4      	b.n	8008f1e <_printf_i+0x176>
 8008f54:	4615      	mov	r5, r2
 8008f56:	e7bd      	b.n	8008ed4 <_printf_i+0x12c>
 8008f58:	682b      	ldr	r3, [r5, #0]
 8008f5a:	6826      	ldr	r6, [r4, #0]
 8008f5c:	6961      	ldr	r1, [r4, #20]
 8008f5e:	1d18      	adds	r0, r3, #4
 8008f60:	6028      	str	r0, [r5, #0]
 8008f62:	0635      	lsls	r5, r6, #24
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	d501      	bpl.n	8008f6c <_printf_i+0x1c4>
 8008f68:	6019      	str	r1, [r3, #0]
 8008f6a:	e002      	b.n	8008f72 <_printf_i+0x1ca>
 8008f6c:	0670      	lsls	r0, r6, #25
 8008f6e:	d5fb      	bpl.n	8008f68 <_printf_i+0x1c0>
 8008f70:	8019      	strh	r1, [r3, #0]
 8008f72:	2300      	movs	r3, #0
 8008f74:	6123      	str	r3, [r4, #16]
 8008f76:	4615      	mov	r5, r2
 8008f78:	e7bc      	b.n	8008ef4 <_printf_i+0x14c>
 8008f7a:	682b      	ldr	r3, [r5, #0]
 8008f7c:	1d1a      	adds	r2, r3, #4
 8008f7e:	602a      	str	r2, [r5, #0]
 8008f80:	681d      	ldr	r5, [r3, #0]
 8008f82:	6862      	ldr	r2, [r4, #4]
 8008f84:	2100      	movs	r1, #0
 8008f86:	4628      	mov	r0, r5
 8008f88:	f7f7 f92a 	bl	80001e0 <memchr>
 8008f8c:	b108      	cbz	r0, 8008f92 <_printf_i+0x1ea>
 8008f8e:	1b40      	subs	r0, r0, r5
 8008f90:	6060      	str	r0, [r4, #4]
 8008f92:	6863      	ldr	r3, [r4, #4]
 8008f94:	6123      	str	r3, [r4, #16]
 8008f96:	2300      	movs	r3, #0
 8008f98:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008f9c:	e7aa      	b.n	8008ef4 <_printf_i+0x14c>
 8008f9e:	6923      	ldr	r3, [r4, #16]
 8008fa0:	462a      	mov	r2, r5
 8008fa2:	4649      	mov	r1, r9
 8008fa4:	4640      	mov	r0, r8
 8008fa6:	47d0      	blx	sl
 8008fa8:	3001      	adds	r0, #1
 8008faa:	d0ad      	beq.n	8008f08 <_printf_i+0x160>
 8008fac:	6823      	ldr	r3, [r4, #0]
 8008fae:	079b      	lsls	r3, r3, #30
 8008fb0:	d413      	bmi.n	8008fda <_printf_i+0x232>
 8008fb2:	68e0      	ldr	r0, [r4, #12]
 8008fb4:	9b03      	ldr	r3, [sp, #12]
 8008fb6:	4298      	cmp	r0, r3
 8008fb8:	bfb8      	it	lt
 8008fba:	4618      	movlt	r0, r3
 8008fbc:	e7a6      	b.n	8008f0c <_printf_i+0x164>
 8008fbe:	2301      	movs	r3, #1
 8008fc0:	4632      	mov	r2, r6
 8008fc2:	4649      	mov	r1, r9
 8008fc4:	4640      	mov	r0, r8
 8008fc6:	47d0      	blx	sl
 8008fc8:	3001      	adds	r0, #1
 8008fca:	d09d      	beq.n	8008f08 <_printf_i+0x160>
 8008fcc:	3501      	adds	r5, #1
 8008fce:	68e3      	ldr	r3, [r4, #12]
 8008fd0:	9903      	ldr	r1, [sp, #12]
 8008fd2:	1a5b      	subs	r3, r3, r1
 8008fd4:	42ab      	cmp	r3, r5
 8008fd6:	dcf2      	bgt.n	8008fbe <_printf_i+0x216>
 8008fd8:	e7eb      	b.n	8008fb2 <_printf_i+0x20a>
 8008fda:	2500      	movs	r5, #0
 8008fdc:	f104 0619 	add.w	r6, r4, #25
 8008fe0:	e7f5      	b.n	8008fce <_printf_i+0x226>
 8008fe2:	bf00      	nop
 8008fe4:	08013b71 	.word	0x08013b71
 8008fe8:	08013b82 	.word	0x08013b82

08008fec <__sflush_r>:
 8008fec:	898a      	ldrh	r2, [r1, #12]
 8008fee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ff2:	4605      	mov	r5, r0
 8008ff4:	0710      	lsls	r0, r2, #28
 8008ff6:	460c      	mov	r4, r1
 8008ff8:	d458      	bmi.n	80090ac <__sflush_r+0xc0>
 8008ffa:	684b      	ldr	r3, [r1, #4]
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	dc05      	bgt.n	800900c <__sflush_r+0x20>
 8009000:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009002:	2b00      	cmp	r3, #0
 8009004:	dc02      	bgt.n	800900c <__sflush_r+0x20>
 8009006:	2000      	movs	r0, #0
 8009008:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800900c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800900e:	2e00      	cmp	r6, #0
 8009010:	d0f9      	beq.n	8009006 <__sflush_r+0x1a>
 8009012:	2300      	movs	r3, #0
 8009014:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009018:	682f      	ldr	r7, [r5, #0]
 800901a:	6a21      	ldr	r1, [r4, #32]
 800901c:	602b      	str	r3, [r5, #0]
 800901e:	d032      	beq.n	8009086 <__sflush_r+0x9a>
 8009020:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009022:	89a3      	ldrh	r3, [r4, #12]
 8009024:	075a      	lsls	r2, r3, #29
 8009026:	d505      	bpl.n	8009034 <__sflush_r+0x48>
 8009028:	6863      	ldr	r3, [r4, #4]
 800902a:	1ac0      	subs	r0, r0, r3
 800902c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800902e:	b10b      	cbz	r3, 8009034 <__sflush_r+0x48>
 8009030:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009032:	1ac0      	subs	r0, r0, r3
 8009034:	2300      	movs	r3, #0
 8009036:	4602      	mov	r2, r0
 8009038:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800903a:	6a21      	ldr	r1, [r4, #32]
 800903c:	4628      	mov	r0, r5
 800903e:	47b0      	blx	r6
 8009040:	1c43      	adds	r3, r0, #1
 8009042:	89a3      	ldrh	r3, [r4, #12]
 8009044:	d106      	bne.n	8009054 <__sflush_r+0x68>
 8009046:	6829      	ldr	r1, [r5, #0]
 8009048:	291d      	cmp	r1, #29
 800904a:	d82b      	bhi.n	80090a4 <__sflush_r+0xb8>
 800904c:	4a29      	ldr	r2, [pc, #164]	; (80090f4 <__sflush_r+0x108>)
 800904e:	410a      	asrs	r2, r1
 8009050:	07d6      	lsls	r6, r2, #31
 8009052:	d427      	bmi.n	80090a4 <__sflush_r+0xb8>
 8009054:	2200      	movs	r2, #0
 8009056:	6062      	str	r2, [r4, #4]
 8009058:	04d9      	lsls	r1, r3, #19
 800905a:	6922      	ldr	r2, [r4, #16]
 800905c:	6022      	str	r2, [r4, #0]
 800905e:	d504      	bpl.n	800906a <__sflush_r+0x7e>
 8009060:	1c42      	adds	r2, r0, #1
 8009062:	d101      	bne.n	8009068 <__sflush_r+0x7c>
 8009064:	682b      	ldr	r3, [r5, #0]
 8009066:	b903      	cbnz	r3, 800906a <__sflush_r+0x7e>
 8009068:	6560      	str	r0, [r4, #84]	; 0x54
 800906a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800906c:	602f      	str	r7, [r5, #0]
 800906e:	2900      	cmp	r1, #0
 8009070:	d0c9      	beq.n	8009006 <__sflush_r+0x1a>
 8009072:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009076:	4299      	cmp	r1, r3
 8009078:	d002      	beq.n	8009080 <__sflush_r+0x94>
 800907a:	4628      	mov	r0, r5
 800907c:	f7ff fb3e 	bl	80086fc <_free_r>
 8009080:	2000      	movs	r0, #0
 8009082:	6360      	str	r0, [r4, #52]	; 0x34
 8009084:	e7c0      	b.n	8009008 <__sflush_r+0x1c>
 8009086:	2301      	movs	r3, #1
 8009088:	4628      	mov	r0, r5
 800908a:	47b0      	blx	r6
 800908c:	1c41      	adds	r1, r0, #1
 800908e:	d1c8      	bne.n	8009022 <__sflush_r+0x36>
 8009090:	682b      	ldr	r3, [r5, #0]
 8009092:	2b00      	cmp	r3, #0
 8009094:	d0c5      	beq.n	8009022 <__sflush_r+0x36>
 8009096:	2b1d      	cmp	r3, #29
 8009098:	d001      	beq.n	800909e <__sflush_r+0xb2>
 800909a:	2b16      	cmp	r3, #22
 800909c:	d101      	bne.n	80090a2 <__sflush_r+0xb6>
 800909e:	602f      	str	r7, [r5, #0]
 80090a0:	e7b1      	b.n	8009006 <__sflush_r+0x1a>
 80090a2:	89a3      	ldrh	r3, [r4, #12]
 80090a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80090a8:	81a3      	strh	r3, [r4, #12]
 80090aa:	e7ad      	b.n	8009008 <__sflush_r+0x1c>
 80090ac:	690f      	ldr	r7, [r1, #16]
 80090ae:	2f00      	cmp	r7, #0
 80090b0:	d0a9      	beq.n	8009006 <__sflush_r+0x1a>
 80090b2:	0793      	lsls	r3, r2, #30
 80090b4:	680e      	ldr	r6, [r1, #0]
 80090b6:	bf08      	it	eq
 80090b8:	694b      	ldreq	r3, [r1, #20]
 80090ba:	600f      	str	r7, [r1, #0]
 80090bc:	bf18      	it	ne
 80090be:	2300      	movne	r3, #0
 80090c0:	eba6 0807 	sub.w	r8, r6, r7
 80090c4:	608b      	str	r3, [r1, #8]
 80090c6:	f1b8 0f00 	cmp.w	r8, #0
 80090ca:	dd9c      	ble.n	8009006 <__sflush_r+0x1a>
 80090cc:	6a21      	ldr	r1, [r4, #32]
 80090ce:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80090d0:	4643      	mov	r3, r8
 80090d2:	463a      	mov	r2, r7
 80090d4:	4628      	mov	r0, r5
 80090d6:	47b0      	blx	r6
 80090d8:	2800      	cmp	r0, #0
 80090da:	dc06      	bgt.n	80090ea <__sflush_r+0xfe>
 80090dc:	89a3      	ldrh	r3, [r4, #12]
 80090de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80090e2:	81a3      	strh	r3, [r4, #12]
 80090e4:	f04f 30ff 	mov.w	r0, #4294967295
 80090e8:	e78e      	b.n	8009008 <__sflush_r+0x1c>
 80090ea:	4407      	add	r7, r0
 80090ec:	eba8 0800 	sub.w	r8, r8, r0
 80090f0:	e7e9      	b.n	80090c6 <__sflush_r+0xda>
 80090f2:	bf00      	nop
 80090f4:	dfbffffe 	.word	0xdfbffffe

080090f8 <_fflush_r>:
 80090f8:	b538      	push	{r3, r4, r5, lr}
 80090fa:	690b      	ldr	r3, [r1, #16]
 80090fc:	4605      	mov	r5, r0
 80090fe:	460c      	mov	r4, r1
 8009100:	b913      	cbnz	r3, 8009108 <_fflush_r+0x10>
 8009102:	2500      	movs	r5, #0
 8009104:	4628      	mov	r0, r5
 8009106:	bd38      	pop	{r3, r4, r5, pc}
 8009108:	b118      	cbz	r0, 8009112 <_fflush_r+0x1a>
 800910a:	6a03      	ldr	r3, [r0, #32]
 800910c:	b90b      	cbnz	r3, 8009112 <_fflush_r+0x1a>
 800910e:	f7ff f8cf 	bl	80082b0 <__sinit>
 8009112:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009116:	2b00      	cmp	r3, #0
 8009118:	d0f3      	beq.n	8009102 <_fflush_r+0xa>
 800911a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800911c:	07d0      	lsls	r0, r2, #31
 800911e:	d404      	bmi.n	800912a <_fflush_r+0x32>
 8009120:	0599      	lsls	r1, r3, #22
 8009122:	d402      	bmi.n	800912a <_fflush_r+0x32>
 8009124:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009126:	f7ff fae7 	bl	80086f8 <__retarget_lock_acquire_recursive>
 800912a:	4628      	mov	r0, r5
 800912c:	4621      	mov	r1, r4
 800912e:	f7ff ff5d 	bl	8008fec <__sflush_r>
 8009132:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009134:	07da      	lsls	r2, r3, #31
 8009136:	4605      	mov	r5, r0
 8009138:	d4e4      	bmi.n	8009104 <_fflush_r+0xc>
 800913a:	89a3      	ldrh	r3, [r4, #12]
 800913c:	059b      	lsls	r3, r3, #22
 800913e:	d4e1      	bmi.n	8009104 <_fflush_r+0xc>
 8009140:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009142:	f7ff fada 	bl	80086fa <__retarget_lock_release_recursive>
 8009146:	e7dd      	b.n	8009104 <_fflush_r+0xc>

08009148 <__swhatbuf_r>:
 8009148:	b570      	push	{r4, r5, r6, lr}
 800914a:	460c      	mov	r4, r1
 800914c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009150:	2900      	cmp	r1, #0
 8009152:	b096      	sub	sp, #88	; 0x58
 8009154:	4615      	mov	r5, r2
 8009156:	461e      	mov	r6, r3
 8009158:	da0d      	bge.n	8009176 <__swhatbuf_r+0x2e>
 800915a:	89a3      	ldrh	r3, [r4, #12]
 800915c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009160:	f04f 0100 	mov.w	r1, #0
 8009164:	bf0c      	ite	eq
 8009166:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800916a:	2340      	movne	r3, #64	; 0x40
 800916c:	2000      	movs	r0, #0
 800916e:	6031      	str	r1, [r6, #0]
 8009170:	602b      	str	r3, [r5, #0]
 8009172:	b016      	add	sp, #88	; 0x58
 8009174:	bd70      	pop	{r4, r5, r6, pc}
 8009176:	466a      	mov	r2, sp
 8009178:	f000 f862 	bl	8009240 <_fstat_r>
 800917c:	2800      	cmp	r0, #0
 800917e:	dbec      	blt.n	800915a <__swhatbuf_r+0x12>
 8009180:	9901      	ldr	r1, [sp, #4]
 8009182:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8009186:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800918a:	4259      	negs	r1, r3
 800918c:	4159      	adcs	r1, r3
 800918e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009192:	e7eb      	b.n	800916c <__swhatbuf_r+0x24>

08009194 <__smakebuf_r>:
 8009194:	898b      	ldrh	r3, [r1, #12]
 8009196:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009198:	079d      	lsls	r5, r3, #30
 800919a:	4606      	mov	r6, r0
 800919c:	460c      	mov	r4, r1
 800919e:	d507      	bpl.n	80091b0 <__smakebuf_r+0x1c>
 80091a0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80091a4:	6023      	str	r3, [r4, #0]
 80091a6:	6123      	str	r3, [r4, #16]
 80091a8:	2301      	movs	r3, #1
 80091aa:	6163      	str	r3, [r4, #20]
 80091ac:	b002      	add	sp, #8
 80091ae:	bd70      	pop	{r4, r5, r6, pc}
 80091b0:	ab01      	add	r3, sp, #4
 80091b2:	466a      	mov	r2, sp
 80091b4:	f7ff ffc8 	bl	8009148 <__swhatbuf_r>
 80091b8:	9900      	ldr	r1, [sp, #0]
 80091ba:	4605      	mov	r5, r0
 80091bc:	4630      	mov	r0, r6
 80091be:	f7fe ff71 	bl	80080a4 <_malloc_r>
 80091c2:	b948      	cbnz	r0, 80091d8 <__smakebuf_r+0x44>
 80091c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80091c8:	059a      	lsls	r2, r3, #22
 80091ca:	d4ef      	bmi.n	80091ac <__smakebuf_r+0x18>
 80091cc:	f023 0303 	bic.w	r3, r3, #3
 80091d0:	f043 0302 	orr.w	r3, r3, #2
 80091d4:	81a3      	strh	r3, [r4, #12]
 80091d6:	e7e3      	b.n	80091a0 <__smakebuf_r+0xc>
 80091d8:	89a3      	ldrh	r3, [r4, #12]
 80091da:	6020      	str	r0, [r4, #0]
 80091dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80091e0:	81a3      	strh	r3, [r4, #12]
 80091e2:	9b00      	ldr	r3, [sp, #0]
 80091e4:	6163      	str	r3, [r4, #20]
 80091e6:	9b01      	ldr	r3, [sp, #4]
 80091e8:	6120      	str	r0, [r4, #16]
 80091ea:	b15b      	cbz	r3, 8009204 <__smakebuf_r+0x70>
 80091ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80091f0:	4630      	mov	r0, r6
 80091f2:	f000 f837 	bl	8009264 <_isatty_r>
 80091f6:	b128      	cbz	r0, 8009204 <__smakebuf_r+0x70>
 80091f8:	89a3      	ldrh	r3, [r4, #12]
 80091fa:	f023 0303 	bic.w	r3, r3, #3
 80091fe:	f043 0301 	orr.w	r3, r3, #1
 8009202:	81a3      	strh	r3, [r4, #12]
 8009204:	89a3      	ldrh	r3, [r4, #12]
 8009206:	431d      	orrs	r5, r3
 8009208:	81a5      	strh	r5, [r4, #12]
 800920a:	e7cf      	b.n	80091ac <__smakebuf_r+0x18>

0800920c <memmove>:
 800920c:	4288      	cmp	r0, r1
 800920e:	b510      	push	{r4, lr}
 8009210:	eb01 0402 	add.w	r4, r1, r2
 8009214:	d902      	bls.n	800921c <memmove+0x10>
 8009216:	4284      	cmp	r4, r0
 8009218:	4623      	mov	r3, r4
 800921a:	d807      	bhi.n	800922c <memmove+0x20>
 800921c:	1e43      	subs	r3, r0, #1
 800921e:	42a1      	cmp	r1, r4
 8009220:	d008      	beq.n	8009234 <memmove+0x28>
 8009222:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009226:	f803 2f01 	strb.w	r2, [r3, #1]!
 800922a:	e7f8      	b.n	800921e <memmove+0x12>
 800922c:	4402      	add	r2, r0
 800922e:	4601      	mov	r1, r0
 8009230:	428a      	cmp	r2, r1
 8009232:	d100      	bne.n	8009236 <memmove+0x2a>
 8009234:	bd10      	pop	{r4, pc}
 8009236:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800923a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800923e:	e7f7      	b.n	8009230 <memmove+0x24>

08009240 <_fstat_r>:
 8009240:	b538      	push	{r3, r4, r5, lr}
 8009242:	4d07      	ldr	r5, [pc, #28]	; (8009260 <_fstat_r+0x20>)
 8009244:	2300      	movs	r3, #0
 8009246:	4604      	mov	r4, r0
 8009248:	4608      	mov	r0, r1
 800924a:	4611      	mov	r1, r2
 800924c:	602b      	str	r3, [r5, #0]
 800924e:	f7f8 fb94 	bl	800197a <_fstat>
 8009252:	1c43      	adds	r3, r0, #1
 8009254:	d102      	bne.n	800925c <_fstat_r+0x1c>
 8009256:	682b      	ldr	r3, [r5, #0]
 8009258:	b103      	cbz	r3, 800925c <_fstat_r+0x1c>
 800925a:	6023      	str	r3, [r4, #0]
 800925c:	bd38      	pop	{r3, r4, r5, pc}
 800925e:	bf00      	nop
 8009260:	2000067c 	.word	0x2000067c

08009264 <_isatty_r>:
 8009264:	b538      	push	{r3, r4, r5, lr}
 8009266:	4d06      	ldr	r5, [pc, #24]	; (8009280 <_isatty_r+0x1c>)
 8009268:	2300      	movs	r3, #0
 800926a:	4604      	mov	r4, r0
 800926c:	4608      	mov	r0, r1
 800926e:	602b      	str	r3, [r5, #0]
 8009270:	f7f8 fb93 	bl	800199a <_isatty>
 8009274:	1c43      	adds	r3, r0, #1
 8009276:	d102      	bne.n	800927e <_isatty_r+0x1a>
 8009278:	682b      	ldr	r3, [r5, #0]
 800927a:	b103      	cbz	r3, 800927e <_isatty_r+0x1a>
 800927c:	6023      	str	r3, [r4, #0]
 800927e:	bd38      	pop	{r3, r4, r5, pc}
 8009280:	2000067c 	.word	0x2000067c

08009284 <memcpy>:
 8009284:	440a      	add	r2, r1
 8009286:	4291      	cmp	r1, r2
 8009288:	f100 33ff 	add.w	r3, r0, #4294967295
 800928c:	d100      	bne.n	8009290 <memcpy+0xc>
 800928e:	4770      	bx	lr
 8009290:	b510      	push	{r4, lr}
 8009292:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009296:	f803 4f01 	strb.w	r4, [r3, #1]!
 800929a:	4291      	cmp	r1, r2
 800929c:	d1f9      	bne.n	8009292 <memcpy+0xe>
 800929e:	bd10      	pop	{r4, pc}

080092a0 <_realloc_r>:
 80092a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80092a4:	4680      	mov	r8, r0
 80092a6:	4614      	mov	r4, r2
 80092a8:	460e      	mov	r6, r1
 80092aa:	b921      	cbnz	r1, 80092b6 <_realloc_r+0x16>
 80092ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80092b0:	4611      	mov	r1, r2
 80092b2:	f7fe bef7 	b.w	80080a4 <_malloc_r>
 80092b6:	b92a      	cbnz	r2, 80092c4 <_realloc_r+0x24>
 80092b8:	f7ff fa20 	bl	80086fc <_free_r>
 80092bc:	4625      	mov	r5, r4
 80092be:	4628      	mov	r0, r5
 80092c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80092c4:	f000 f81b 	bl	80092fe <_malloc_usable_size_r>
 80092c8:	4284      	cmp	r4, r0
 80092ca:	4607      	mov	r7, r0
 80092cc:	d802      	bhi.n	80092d4 <_realloc_r+0x34>
 80092ce:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80092d2:	d812      	bhi.n	80092fa <_realloc_r+0x5a>
 80092d4:	4621      	mov	r1, r4
 80092d6:	4640      	mov	r0, r8
 80092d8:	f7fe fee4 	bl	80080a4 <_malloc_r>
 80092dc:	4605      	mov	r5, r0
 80092de:	2800      	cmp	r0, #0
 80092e0:	d0ed      	beq.n	80092be <_realloc_r+0x1e>
 80092e2:	42bc      	cmp	r4, r7
 80092e4:	4622      	mov	r2, r4
 80092e6:	4631      	mov	r1, r6
 80092e8:	bf28      	it	cs
 80092ea:	463a      	movcs	r2, r7
 80092ec:	f7ff ffca 	bl	8009284 <memcpy>
 80092f0:	4631      	mov	r1, r6
 80092f2:	4640      	mov	r0, r8
 80092f4:	f7ff fa02 	bl	80086fc <_free_r>
 80092f8:	e7e1      	b.n	80092be <_realloc_r+0x1e>
 80092fa:	4635      	mov	r5, r6
 80092fc:	e7df      	b.n	80092be <_realloc_r+0x1e>

080092fe <_malloc_usable_size_r>:
 80092fe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009302:	1f18      	subs	r0, r3, #4
 8009304:	2b00      	cmp	r3, #0
 8009306:	bfbc      	itt	lt
 8009308:	580b      	ldrlt	r3, [r1, r0]
 800930a:	18c0      	addlt	r0, r0, r3
 800930c:	4770      	bx	lr
	...

08009310 <_init>:
 8009310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009312:	bf00      	nop
 8009314:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009316:	bc08      	pop	{r3}
 8009318:	469e      	mov	lr, r3
 800931a:	4770      	bx	lr

0800931c <_fini>:
 800931c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800931e:	bf00      	nop
 8009320:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009322:	bc08      	pop	{r3}
 8009324:	469e      	mov	lr, r3
 8009326:	4770      	bx	lr
